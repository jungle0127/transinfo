<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyBatis.Common</name>
    </assembly>
    <members>
        <member name="T:MyBatis.Common.Resources.AbstractResource">
            <summary>
            Convenience base class for <see cref="T:MyBatis.Common.Resources.IResource"/>
            implementations, pre-implementing typical behavior.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Resources.IResource">
            <summary>
            The central abstraction for iBATIS.NET's access to resources.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.IResource.CreateRelative(System.String)">
            <summary>
            Creates a resource relative to this resource.
            </summary>
            <param name="relativePath">
            The path (always resolved as relative to this resource).
            </param>
            <returns>
            The relative resource.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied
            path.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the resource does not support the notion of a relative path.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.IResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Resources.IResource.FileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <remarks>
            <p>
            For safety, always check the value of the
            <see cref="P:System.Uri.IsFile"/> property prior to
            accessing this property; resources that cannot be exposed as 
            a <see cref="T:System.IO.FileInfo"/> will typically return
            <see langword="false"/> from a call to this property.
            </p>
            </remarks>
            <value>
            The <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.IOException">
            If the resource is not available on a filesystem, or cannot be
            exposed as a <see cref="T:System.IO.FileInfo"/> handle.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.IResource.Stream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <remarks>
            <note type="caution">
            Clients of this interface must be aware that every access of this
            property will create a <i>fresh</i> <see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such
            <see cref="T:System.IO.Stream"/>.
            </note>
            </remarks>
            <value>
            An <see cref="T:System.IO.Stream"/>.
            </value>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.IResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <remarks>
            <p>
            The description is typically used for diagnostics and other such
            logging when working with the resource.
            </p>
            <p>
            Implementations are also encouraged to return this value from their
            <see cref="M:System.Object.ToString"/> method.
            </p>
            </remarks>
            <value>
            A description for this resource.
            </value>
        </member>
        <member name="F:MyBatis.Common.Resources.AbstractResource.DefaultBasePathPlaceHolder">
            <summary>
            The default special character that denotes the base (home, or root)
            path.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.AbstractResource.CreateRelative(System.String)">
            <summary>
            Creates a resource relative to this resource.
            </summary>
            <param name="relativePath">The path (always resolved as relative to this resource).</param>
            <returns>The relative resource.</returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied
            path.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the resource does not support the notion of a relative path.
            </exception>
        </member>
        <member name="M:MyBatis.Common.Resources.AbstractResource.GetResourceNameWithoutProtocol(System.Uri)">
            <summary>
            Strips any protocol name from the supplied
            <paramref name="uri"/>.
            </summary>
            <param name="uri">An Uri resource.</param>
            <returns>
            The name of the resource without the protocol name.
            </returns>
            <remarks>
            	<p>
            If the supplied <paramref name="uri"/> does not
            have any protocol associated with it, then the supplied
            <paramref name="uri"/> will be returned as-is.
            </p>
            </remarks>
            <example>
            	<code language="C#">
            GetResourceNameWithoutProtocol("http://www.mycompany.com/resource.txt");
            // returns www.mycompany.com/resource.txt
            </code>
            </example>
        </member>
        <member name="M:MyBatis.Common.Resources.AbstractResource.ToString">
            <summary>
            This implementation returns the
            <see cref="P:MyBatis.Common.Resources.AbstractResource.Description"/> of this resource.
            </summary>
            <seealso cref="P:MyBatis.Common.Resources.IResource.Description"/>
        </member>
        <member name="M:MyBatis.Common.Resources.AbstractResource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Resources.AbstractResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Resources.AbstractResource.FileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <value>The <see cref="T:System.IO.FileInfo"/> handle for this resource.</value>
            <remarks>
            	<p>
            For safety, always check the value of the
            <see cref="P:System.Uri.IsFile"/> property prior to
            accessing this property; resources that cannot be exposed as
            a <see cref="T:System.IO.FileInfo"/> will typically return
            <see langword="false"/> from a call to this property.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the resource is not available on a filesystem, or cannot be
            exposed as a <see cref="T:System.IO.FileInfo"/> handle.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.AbstractResource.Stream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>An <see cref="T:System.IO.Stream"/>.</value>
            <remarks>
            	<note type="caution">
            Clients of this interface must be aware that every access of this
            property will create a <i>fresh</i>
            		<see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such
            <see cref="T:System.IO.Stream"/>.
            </note>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.AbstractResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>A description for this resource.</value>
            <remarks>
            	<p>
            The description is typically used for diagnostics and other such
            logging when working with the resource.
            </p>
            	<p>
            Implementations are also encouraged to return this value from their
            <see cref="M:System.Object.ToString"/> method.
            </p>
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor"/> class provides an IL-based set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.BaseAccessor">
            <summary>
            Abstract base class for member accessor
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.BaseAccessor.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.BaseAccessor.targetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.BaseAccessor.nullInternal">
            <summary>
            The null internal value used by this member type 
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.BaseAccessor.typeToOpcode">
            <summary>
            List of type-opCode
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.BaseAccessor.#cctor">
            <summary>
            Static constructor
            "Initialize a private IDictionary with type-opCode pairs 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.BaseAccessor.GetPropertyInfo(System.Type)">
            <summary>
            Gets the property info.
            </summary>
            <param name="target">The target type.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.BaseAccessor.GetNullInternal(System.Type)">
            <summary>
            Get the null value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor"/> interface defines a field/property set accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISet"/> 
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.IAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.IAccessor"/> interface defines a field/property contract.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.IAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.IAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.ISet">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISet"/> interface defines a field/property set contrat to set the
            value on a field or property.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ISet.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field/property of the specified target.
            </summary>
            <param name="target">Object to set the field/property on.</param>
            <param name="value">Value.</param>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor"/> class.
            Generates the implementation for setter methods.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the property for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.FactoryLogAdapter">
            <summary>
            A wrapper arround an <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> implementation which logs argument type and value
            when CreateInstance is called.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.IFactory">
            <summary>
            Factory to create object for a given type
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.IFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryLogAdapter.#ctor(System.Type,System.Type[],MyBatis.Common.Utilities.Objects.IFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.FactoryLogAdapter"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="paramtersTypes">The paramters types.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryLogAdapter.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryLogAdapter.GenerateParametersName(System.Object[])">
            <summary>
            Generates the a string containing all parameter type names.
            </summary>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The string.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryLogAdapter.GenerateLogInfoForParameterValue(System.Object[])">
            <summary>
            Generates the a string containing all parameters value.
            </summary>
            <param name="arguments">The arguments</param>
            <returns>The string.</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.EmitObjectFactory">
            <summary>
            A <see cref="T:MyBatis.Common.Utilities.Objects.IObjectFactory"/> implementation that can create objects via IL code
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.IObjectFactory">
            <summary>
            A factory that can create objects 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.IObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new see cref="IFactory"/&gt; instance</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.EmitObjectFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.EmitObjectFactory"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.EmitObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.EmitObjectFactory.GenerateKey(System.Type,System.Object[])">
            <summary>
            Generates the key for a cache entry.
            </summary>
            <param name="typeToCreate">The type instance to build.</param>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The key for a cache entry.</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.DelegateObjectFactory">
            <summary>
            A <see cref="T:MyBatis.Common.Utilities.Objects.IObjectFactory"/> implementation that can create objects via DynamicMethod.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.DelegateObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new see <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.DelegateObjectFactory.GenerateKey(System.Type,System.Object[])">
            <summary>
            Generates the key for a cache entry.
            </summary>
            <param name="typeToCreate">The type instance to build.</param>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The key for a cache entry.</returns>
        </member>
        <member name="T:MyBatis.Common.Logging.LogSetting">
            <summary>
            Container used to hold configuration information from config file.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.LogSetting.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="factoryAdapterType">
            The <see cref="T:MyBatis.Common.Logging.ILoggerFactoryAdapter"/> type 
            that will be used for creating <see cref="T:MyBatis.Common.Logging.ILog"/>
            </param>
            <param name="properties">
            Additional user supplied properties that are passed to the 
            <paramref name="factoryAdapterType"/>'s constructor.
            </param>
        </member>
        <member name="P:MyBatis.Common.Logging.LogSetting.FactoryAdapterType">
            <summary>
            The <see cref="T:MyBatis.Common.Logging.ILoggerFactoryAdapter"/> type that will be used for creating <see cref="T:MyBatis.Common.Logging.ILog"/>
            instances.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.LogSetting.Properties">
            <summary>
            Additional user supplied properties that are passed to the <see cref="P:MyBatis.Common.Logging.LogSetting.FactoryAdapterType"/>'s constructor.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Exceptions.ConfigurationException">
            <summary>
            A ConfigurationException is thrown when an error has occured in the configuration process.
            </summary>
            <remarks>
            When this exception occurs check the .xml or .config file.
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Exceptions.IbatisException">
            <summary>
            The DalException is thrown when an error in the Dal occurs.
            </summary>
            <remarks>
            This is the base exception for all exceptions thrown in the framework. 
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.IbatisException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.IbatisException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.IbatisException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.IbatisException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance 
            using the message parameter.
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.IbatisException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.IbatisException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to 
            the Message property of the passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.IbatisException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.IbatisException"/> 
            class with a specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.IbatisException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.IbatisException"/> 
            class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. 
            </param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ConfigurationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error. 
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ConfigurationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ConfigurationException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ConfigurationException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ConfigurationException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:MyBatis.Common.Data.SqliteDbProvider">
            <summary>
            System.Data.SQLite, Version=1.0.61.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139
            </summary>
        </member>
        <member name="T:MyBatis.Common.Data.DbProvider">
            <summary>
            Information about a data provider.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Data.IDbProvider">
            <summary>
            Factory interface to create provider specific ado.net objects.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Data.IDbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            </summary>
            <returns>An 'IDbConnection' object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.IDbProvider.CreateCommand">
            <summary>
            Returns a new command object for executing SQL statments/Stored Procedures
            against the database.
            </summary>
            <returns>An 'IDbCommand' object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.IDbProvider.CreateDataParameter">
            <summary>
            Returns a new parameter object for binding values to parameter
            placeholders in SQL statements or Stored Procedure variables.
            </summary>
            <returns>An 'IDbDataParameter' object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.IDbProvider.FormatNameForSql(System.String)">
            <summary>
            Change the parameterName into the correct format IDbCommand.CommandText
            for the ConnectionProvider
            </summary>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbCommand.CommandText</returns>
        </member>
        <member name="M:MyBatis.Common.Data.IDbProvider.FormatNameForParameter(System.String)">
            <summary>
            Changes the parameterName into the correct format for an IDbParameter
            for the Driver.
            </summary>
            <remarks>
            For SqlServerConnectionProvider it will change <c>id</c> to <c>@id</c>
            </remarks>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbParameter.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.IDbProvider.Initialize">
            <summary>
            Init the provider.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.AssemblyName">
            <summary>
            The name of the assembly which conatins the definition of the provider.
            </summary>
            <example>Examples : "System.Data", "Microsoft.Data.Odbc"</example>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.IsDefault">
            <summary>
            Tell us if it is the default data source.
            Default false.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.IsEnabled">
            <summary>
            Tell us if this provider is enabled.
            Default true.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.AllowMARS">
            <summary>
            Tell us if this provider allows having multiple open <see cref="T:System.Data.IDataReader"/> with
            the same <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.DbConnectionClass">
            <summary>
            The connection class name to use.
            </summary>
            <example>
            "System.Data.OleDb.OleDbConnection", 
            "System.Data.SqlClient.SqlConnection", 
            "Microsoft.Data.Odbc.OdbcConnection"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.UseParameterPrefixInSql">
            <summary>
            Does this ConnectionProvider require the use of a Named Prefix in the SQL 
            statement. 
            </summary>
            <remarks>
            The OLE DB/ODBC .NET Provider does not support named parameters for 
            passing parameters to an SQL Statement or a stored procedure called 
            by an IDbCommand when CommandType is set to Text.
            
            For example, SqlClient requires select * from simple where simple_id = @simple_id
            If this is false, like with the OleDb or Obdc provider, then it is assumed that 
            the ? can be a placeholder for the parameter in the SQL statement when CommandType 
            is set to Text.		
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.UseParameterPrefixInParameter">
            <summary>
            Does this ConnectionProvider require the use of the Named Prefix when trying
            to reference the Parameter in the Command's Parameter collection. 
            </summary>
            <remarks>
            This is really only useful when the UseParameterPrefixInSql = true. 
            When this is true the code will look like IDbParameter param = cmd.Parameters["@paramName"], 
            if this is false the code will be IDbParameter param = cmd.Parameters["paramName"] - ie - Oracle.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.UsePositionalParameters">
            <summary>
            The OLE DB/OBDC .NET Provider uses positional parameters that are marked with a 
            question mark (?) instead of named parameters.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.SetDbParameterSize">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter size.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter size.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.SetDbParameterPrecision">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter precision.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter precision.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.SetDbParameterScale">
            <summary>
            Used to indicate whether or not the provider 
            supports a parameter scale.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter scale.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.UseDeriveParameters">
            <summary>
            Used to indicate whether or not the provider 
            supports DeriveParameters method for procedure.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.DbCommandClass">
            <summary>
            The command class name to use.
            </summary>
            <example>
            "System.Data.SqlClient.SqlCommand"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.ParameterDbTypeClass">
            <summary>
            The ParameterDbType class name to use.
            </summary>			
            <example>
            "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.ParameterDbTypeProperty">
            <summary>
            The ParameterDbTypeProperty class name to use.
            </summary>
            <example >
            SqlDbType in SqlParamater.SqlDbType, 
            OracleType in OracleParameter.OracleType.
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.CommandBuilderClass">
            <summary>
            The commandBuilder class name to use.
            </summary>
            <example >
            "System.Data.OleDb.OleDbCommandBuilder", 
            "System.Data.SqlClient.SqlCommandBuilder", 
            "Microsoft.Data.Odbc.OdbcCommandBuilder"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.Id">
            <summary>
            Name used to identify the provider amongst the others.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.ParameterPrefix">
            <summary>
            Parameter prefix use in store procedure.
            </summary>
            <example> @ for Sql Server.</example>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.IsObdc">
            <summary>
            Check if this provider is Odbc ?
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.CommandBuilderType">
            <summary>
            Get the CommandBuilder Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="P:MyBatis.Common.Data.IDbProvider.ParameterDbType">
            <summary>
            Get the ParameterDb Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.Initialize">
            <summary>
            Init the provider.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.CreateConnection">
            <summary>
            Create a connection object for this provider.
            </summary>
            <returns>An 'IDbConnection' object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.CreateCommand">
            <summary>
            Create a command object for this provider.
            </summary>
            <returns>An 'IDbCommand' object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.CreateDataParameter">
            <summary>
            Create a IDbDataParameter object for this provider.
            </summary>
            <returns>An 'IDbDataParameter' object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.FormatNameForSql(System.String)">
            <summary>
            Change the parameterName into the correct format IDbCommand.CommandText
            for the ConnectionProvider
            </summary>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbCommand.CommandText</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.FormatNameForParameter(System.String)">
            <summary>
            Changes the parameterName into the correct format for an IDbParameter
            for the Driver.
            </summary>
            <remarks>
            For SqlServerConnectionProvider it will change <c>id</c> to <c>@id</c>
            </remarks>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbParameter.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.Equals(System.Object)">
            <summary>
            Equals implemantation.
            </summary>
            <param name="obj">The test object.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.GetHashCode">
            <summary>
            A hashcode for the provider.
            </summary>
            <returns>An integer.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.DbProvider.ToString">
            <summary>
            ToString implementation.
            </summary>
            <returns>A string that describes the provider.</returns>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.AssemblyName">
            <summary>
            The name of the assembly which conatins the definition of the provider.
            </summary>
            <example>Examples : "System.Data", "Microsoft.Data.Odbc"</example>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.IsDefault">
            <summary>
            Tell us if it is the default data source.
            Default false.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.IsEnabled">
            <summary>
            Tell us if this provider is enabled.
            Default true.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.AllowMARS">
            <summary>
            Tell us if this provider allows having multiple open <see cref="T:System.Data.IDataReader"/> with
            the same <see cref="T:System.Data.IDbConnection"/>.
            </summary>
            <remarks>
            It's a new feature in ADO.NET 2.0 and Sql Server 2005 that allows for multiple forward only read only result sets (MARS).
            Some databases have supported this functionality for a long time :
            Not Supported : DB2, MySql.Data, OLE DB provider [except Sql Server 2005 when using MDAC 9], SQLite, Obdc 
            Supported :  Sql Server 2005, Npgsql
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.DbConnectionClass">
            <summary>
            The connection class name to use.
            </summary>
            <example>
            "System.Data.OleDb.OleDbConnection", 
            "System.Data.SqlClient.SqlConnection", 
            "Microsoft.Data.Odbc.OdbcConnection"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.UseParameterPrefixInSql">
            <summary>
            Does this ConnectionProvider require the use of a Named Prefix in the SQL 
            statement. 
            </summary>
            <remarks>
            The OLE DB/ODBC .NET Provider does not support named parameters for 
            passing parameters to an SQL Statement or a stored procedure called 
            by an IDbCommand when CommandType is set to Text.
            
            For example, SqlClient requires select * from simple where simple_id = @simple_id
            If this is false, like with the OleDb or Obdc provider, then it is assumed that 
            the ? can be a placeholder for the parameter in the SQL statement when CommandType 
            is set to Text.		
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.UseParameterPrefixInParameter">
            <summary>
            Does this ConnectionProvider require the use of the Named Prefix when trying
            to reference the Parameter in the Command's Parameter collection. 
            </summary>
            <remarks>
            This is really only useful when the UseParameterPrefixInSql = true. 
            When this is true the code will look like IDbParameter param = cmd.Parameters["@paramName"], 
            if this is false the code will be IDbParameter param = cmd.Parameters["paramName"] - ie - Oracle.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.UsePositionalParameters">
            <summary>
            The OLE DB/OBDC .NET Provider uses positional parameters that are marked with a 
            question mark (?) instead of named parameters.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.SetDbParameterSize">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter size.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter size.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.SetDbParameterPrecision">
            <summary>
            Used to indicate whether or not the provider 
            supports parameter precision.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter precision.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.SetDbParameterScale">
            <summary>
            Used to indicate whether or not the provider 
            supports a parameter scale.
            </summary>
            <remarks>
            See JIRA-49 about SQLite.Net provider not supporting parameter scale.
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.UseDeriveParameters">
            <summary>
            Used to indicate whether or not the provider 
            supports DeriveParameters method for procedure.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.DbCommandClass">
            <summary>
            The command class name to use.
            </summary>
            <example>
            "System.Data.SqlClient.SqlCommand"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.ParameterDbTypeClass">
            <summary>
            The ParameterDbType class name to use.
            </summary>			
            <example>
            "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.ParameterDbTypeProperty">
            <summary>
            The ParameterDbTypeProperty class name to use.
            </summary>
            <example >
            SqlDbType in SqlParamater.SqlDbType, 
            OracleType in OracleParameter.OracleType.
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.CommandBuilderClass">
            <summary>
            The commandBuilder class name to use.
            </summary>
            <example >
            "System.Data.OleDb.OleDbCommandBuilder", 
            "System.Data.SqlClient.SqlCommandBuilder", 
            "Microsoft.Data.Odbc.OdbcCommandBuilder"
            </example>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.Id">
            <summary>
            Name used to identify the provider amongst the others.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.ParameterPrefix">
            <summary>
            Parameter prefix use in store procedure.
            </summary>
            <example> @ for Sql Server.</example>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.IsObdc">
            <summary>
            Check if this provider is Odbc ?
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.CommandBuilderType">
            <summary>
            Get the CommandBuilder Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="P:MyBatis.Common.Data.DbProvider.ParameterDbType">
            <summary>
            Get the ParameterDb Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.Common.Data.SqliteDbProvider.#ctor">
            <summary>
            Sets default values for connecting to Sqlite.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Data.DataSource">
            <summary>
            Information about a data source.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Data.IDataSource">
            <summary>
            IDataSource
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDataSource.Id">
            <summary>
            DataSource Name.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.IDataSource.CommandTimeout">
            <summary>
            Gets the command timeout.
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:MyBatis.Common.Data.IDataSource.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MyBatis.Common.Data.IDataSource.DbProvider">
            <summary>
            Gets or sets the db provider.
            </summary>
            <value>The db provider.</value>
        </member>
        <member name="M:MyBatis.Common.Data.DataSource.#ctor(System.String,System.String,System.Int32,MyBatis.Common.Data.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Data.DataSource"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="connectionString">The connection string.</param>
            <param name="commandTimeout">The command timeout.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:MyBatis.Common.Data.DataSource.ToString">
            <summary>
            ToString implementation.
            </summary>
            <returns>A string that describes the data source</returns>
        </member>
        <member name="P:MyBatis.Common.Data.DataSource.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:MyBatis.Common.Data.DataSource.Id">
            <summary>
            DataSource Name
            </summary>
        </member>
        <member name="P:MyBatis.Common.Data.DataSource.CommandTimeout">
            <summary>
            Gets the command timeout.
            </summary>
            <value>The command timeout.</value>
        </member>
        <member name="P:MyBatis.Common.Data.DataSource.DbProvider">
            <summary>
            Gets or sets the db provider.
            </summary>
            <value>The db provider.</value>
        </member>
        <member name="T:MyBatis.Common.Contracts.Ensure">
            <summary>
            Helper class for post conditions checks
            Will throw exception of type <typeparamref name="PostConditionException"/>
            with the specified message if the condition is false
            </summary>
            <example>
            Sample usage:
            <code>
            <![CDATA[
            Contract.Ensure.That(connectionString, Is.Not.Null & Is.Not.Empty).When("retrieving argument connectionString in DataSource constructor");
            
            Contract.Ensure.That<ValidationException>(name, Is.Not.Null & Is.Not.Empty).When("validate order");
            ]]>
            </code>
            </example>
        </member>
        <member name="T:MyBatis.Common.Contracts.Contract">
            <summary>
            Design By Contract Checks.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Contract.Ensure">
            <summary>
            Checks post conditions
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Contract.Require">
            <summary>
            Checks pre conditions
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Contract.Assert">
            <summary>
            Assert conditions
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Contract.#ctor">
            <summary>
            Initializes the <see cref="T:MyBatis.Common.Contracts.Contract"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Contract.That(System.Boolean)">
            <summary>
            Thats the specified condition is true
            else throw exception
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Contract.That``1(System.Boolean)">
            <summary>
            Thats the specified condition.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Contract.That``1(System.Object,MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Thats the specified actual verify the constraint
            else throw exception  of type <typeparamref name="TException"/>
            </summary>
            <param name="actual">The actual.</param>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Contract.That(System.Object,MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Thats the specified verify the constraint.
            </summary>
            <param name="actual">The actual.</param>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Contract.AppendMessageError(System.String)">
            <summary>
            Appends the error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Contract.GetMessageError">
            <summary>
            Gets the message error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Ensure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Ensure"/> class.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.Is">
            <summary>
            Helper class to work with constraints. 
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Constraints.Is.Empty">
            <summary>
            Check if it is Empty
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Constraints.Is.False">
            <summary>
            Check if it is False
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Constraints.Is.Null">
            <summary>
            Check if it is Null
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Constraints.Is.True">
            <summary>
            Check if it is True
            </summary>
        </member>
        <member name="F:MyBatis.Common.Contracts.Constraints.Is.Anything">
            <summary>
            A constraint that always returns <code>true</code>
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.GreaterThan(System.Object)">
            <summary>
            Check whether an object is greater than the specified object.
            </summary>
            <param name="specified">The specified.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.LessThan(System.Object)">
            <summary>
            Check whether an object is less than the specified object.
            </summary>
            <param name="specified">The specified.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.EqualTo(System.Object)">
            <summary>
            Check whether an object is Equals to the specified object.
            </summary>
            <param name="specified">The specified object.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.TypeOf``1">
            <summary>
            Checks whether an object is of the specified type.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.AssignableFrom``1">
            <summary>
            Checks whether an object is Assignables from the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.Contains(System.String)">
            <summary>
            Checks whether a string contains the specified string.
            </summary>
            <param name="specified">The specified string.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.Like(System.String)">
            <summary>
            Checks whether a string is validated according to regex pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.Is.SameAs(System.Object)">
            <summary>
            Checks whether an object is identical to the specified object 
            </summary>
            <param name="expected">The expected.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.Is.Not">
            <summary>
            Negates the next constraint.
            </summary>
            <value>The not.</value>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.AssignableFromConstraint">
            <summary>
            Checks whether an instance of the current Type can be assigned from an instance of the specified Type. 
            </summary>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.BaseConstraint">
            <summary>
            Base class for all constraint.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.BaseConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified obj].
            </summary>
            <param name="obj">The obj.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyBatis.Common.Contracts.Constraints.BaseConstraint.op_BitwiseAnd(MyBatis.Common.Contracts.Constraints.BaseConstraint,MyBatis.Common.Contracts.Constraints.BaseConstraint)" -->
        <member name="M:MyBatis.Common.Contracts.Constraints.BaseConstraint.op_BitwiseOr(MyBatis.Common.Contracts.Constraints.BaseConstraint,MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Represents the Or operator between two constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.BaseConstraint.op_LogicalNot(MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Inverts the result of the specified constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.BaseConstraint.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.BaseConstraint.NegationMessage">
            <summary>
            Gets or sets the negation message.
            </summary>
            <value>The negation message.</value>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.AssignableFromConstraint.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.TypeOfConstraint"/> class.
            </summary>
            <param name="expectedType">The expected type.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.AssignableFromConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified obj].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed. 
            </summary>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.CompositeConstraint">
            <summary>
            Abstract base class for Composite constraints 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.CompositeConstraint.#ctor(MyBatis.Common.Contracts.Constraints.BaseConstraint,MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.CompositeConstraint"/> class.
            </summary>
            <param name="left">The left side.</param>
            <param name="right">The right side.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.AndConstraint.#ctor(MyBatis.Common.Contracts.Constraints.BaseConstraint,MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.AndConstraint"/> class.
            </summary>
            <param name="left">The left side.</param>
            <param name="right">The right side.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.AndConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Configuration.AbstractConfiguration">
            <summary>
            This is an abstract <see cref="T:MyBatis.Common.Configuration.IConfiguration"/> implementation
            that deals with methods that can be abstracted away
            from underlying implementations.
            </summary>
            <remarks>
            <para><b>AbstractConfiguration</b> makes easier to implementers 
            to create a new version of <see cref="T:MyBatis.Common.Configuration.IConfiguration"/></para>
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Configuration.IConfiguration">
            <summary>
            <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>  is a interface encapsulating a configuration node
            used to retrieve configuration values.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Configuration.IConfiguration.GetAttributeValue(System.String)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="key">The key.</param>
            <returns>If key exists, the attribute value else null</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.IConfiguration.GetValue(System.Type,System.Object)">
            <summary>
            Gets the value of the node and converts it 
            into specified <see cref="P:MyBatis.Common.Configuration.IConfiguration.Type"/>.
            </summary>
            <param name="type">The <see cref="P:MyBatis.Common.Configuration.IConfiguration.Type"/></param>
            <param name="defaultValue">
            The Default value returned if the convertion fails.
            </param>
            <returns>The Value converted into the specified type.</returns>
        </member>
        <member name="P:MyBatis.Common.Configuration.IConfiguration.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MyBatis.Common.Configuration.IConfiguration.Type">
            <summary>
            Gets the type of the node.
            </summary>
            <value>
            The type of the node.
            </value> 
        </member>
        <member name="P:MyBatis.Common.Configuration.IConfiguration.Id">
            <summary>
            Gets the id of the node.
            </summary>
            <value>
            The id of the node.
            </value> 
        </member>
        <member name="P:MyBatis.Common.Configuration.IConfiguration.Value">
            <summary>
            Gets the value of the node.
            </summary>
            <value>
            The Value of the node.
            </value> 
        </member>
        <member name="P:MyBatis.Common.Configuration.IConfiguration.Children">
            <summary>
            List of <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>
            elements for children node .
            </summary>
            <value>The Collection of child nodes.</value>
        </member>
        <member name="P:MyBatis.Common.Configuration.IConfiguration.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="F:MyBatis.Common.Configuration.AbstractConfiguration.parentConfiguration">
            <summary>
            The parent Configuration
            </summary>
        </member>
        <member name="F:MyBatis.Common.Configuration.AbstractConfiguration.internalType">
            <summary>
            The internal node type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Configuration.AbstractConfiguration.internalId">
            <summary>
            The internal node name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Configuration.AbstractConfiguration.internalValue">
            <summary>
            The internal node value
            </summary>
        </member>
        <member name="M:MyBatis.Common.Configuration.AbstractConfiguration.GetAttributeValue(System.String)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <returns>The attribute value if find else null</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.AbstractConfiguration.GetValue(System.Type,System.Object)">
            <summary>
            Gets the value of the node and converts it
            into specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/></param>
            <param name="defaultValue">
            The Default value returned if the convertion fails.
            </param>
            <returns>The Value converted into the specified type.</returns>
        </member>
        <member name="P:MyBatis.Common.Configuration.AbstractConfiguration.Parent">
            <summary>
            Gets the parent configuration
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MyBatis.Common.Configuration.AbstractConfiguration.Type">
            <summary>
            Gets the type of the <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.
            </summary>
            <value>
            The type of the <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.
            </value>
        </member>
        <member name="P:MyBatis.Common.Configuration.AbstractConfiguration.Id">
            <summary>
            Gets the id of the <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.
            </summary>
            <value>
            The id of the <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.
            </value>
        </member>
        <member name="P:MyBatis.Common.Configuration.AbstractConfiguration.Value">
            <summary>
            Gets the value of <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.
            </summary>
            <value>
            The Value of the <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.
            </value>
        </member>
        <member name="P:MyBatis.Common.Configuration.AbstractConfiguration.Children">
            <summary>
            Gets all child nodes.
            </summary>
            <value>The <see cref="T:MyBatis.Common.Configuration.ConfigurationCollection"/> of child nodes.</value>
        </member>
        <member name="P:MyBatis.Common.Configuration.AbstractConfiguration.Attributes">
            <summary>
            Gets node attributes.
            </summary>
            <value>
            All attributes of the node.
            </value>
        </member>
        <member name="T:MyBatis.Common.Xml.NodeUtils">
            <summary>
            Summary description for NodeUtils.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.GetStringAttribute(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.GetStringAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.GetByteAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Byte)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.GetIntAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.GetBooleanAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.ParseAttributes(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.ParseAttributes(System.Xml.XmlNode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Xml.NodeUtils.ParsePropertyTokens(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Replace properties by their values in the given string
            </summary>
            <param name="str"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Resources.ResourceLoaderRegistry">
            <summary>
            Registry class that allows to register and retrieve resource loader.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.ResourceLoaderRegistry.#cctor">
            <summary>
            Registers standard and user-configured resource handlers.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.ResourceLoaderRegistry.GetResource(System.String)">
            <summary>
            Return an <see cref="T:MyBatis.Common.Resources.IResource"/> for the
            specified string address.
            </summary>
            <param name="resource">The string adress.</param>
            <returns>
            An appropriate <see cref="T:MyBatis.Common.Resources.IResource"/>.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Resources.ResourceLoaderRegistry.ResetEventHandler">
            <summary>
            Resets the event handler.
            </summary>
        </member>
        <member name="E:MyBatis.Common.Resources.ResourceLoaderRegistry.LoadFileResource">
            <summary>
            Event launch on processing file resource
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor"/> class provides an IL-based set access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitFieldSetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.ActivatorFactory">
            <summary>
            Create objects via Activator.CreateInstance
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ActivatorFactory.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToCreate"></param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ActivatorFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="T:MyBatis.Common.Logging.LogManager">
            <summary>
            Uses the specified <see cref="T:MyBatis.Common.Logging.ILoggerFactoryAdapter"/> to create <see cref="T:MyBatis.Common.Logging.ILog"/> instances
            that are used to log messages. Inspired by log4net.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.LogManager.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.Common.Logging.LogManager"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.LogManager.BuildLoggerFactoryAdapter">
            <summary>
            Builds the logger factory adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.LogManager.BuildDefaultLoggerFactoryAdapter">
            <summary>
            Builds the default logger factory adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.Common.Logging.LogManager.Adapter">
            <summary>
            Gets or sets the adapter.
            </summary>
            <remarks>
            <para>
            The Apache.Ibatis.Common assembly ships with the following built-in <see cref="T:MyBatis.Common.Logging.ILoggerFactoryAdapter"/> implementations:
            </para>
            <list type="table">
            <item><term><see cref="T:MyBatis.Common.Logging.Impl.ConsoleOutLoggerFA"/></term><description>Writes output to Console.Out</description></item>
            <item><term><see cref="T:MyBatis.Common.Logging.Impl.TraceLoggerFA"/></term><description>Writes output to the System.Diagnostics.Trace sub-system</description></item>
            <item><term><see cref="T:MyBatis.Common.Logging.Impl.NoOpLoggerFA"/></term><description>Ignores all messages</description></item>
            </list>
            </remarks>
            <value>The adapter.</value>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.LessThanConstraint">
            <summary>
            Checks that an object is less than another
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.LessThanConstraint.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.LessThanConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.LessThanConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.GreaterThanConstraint">
            <summary>
            Checks that an object is greater than another
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.GreaterThanConstraint.#ctor(System.IComparable)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.GreaterThanConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.GreaterThanConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessor"/> interface defines a field/property get accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGet"/>
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.IGet">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGet"/> interface defines a field/property get contrat to get the
            value of a field or a property.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.IGet.Get(System.Object)">
            <summary>
            Gets the value stored in the field/property for the specified target.
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.AccessorFactory">
            <summary>
            Accessor factory
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.AccessorFactory.#ctor(MyBatis.Common.Utilities.Objects.Members.ISetAccessorFactory,MyBatis.Common.Utilities.Objects.Members.IGetAccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.AccessorFactory"/> class.
            </summary>
            <param name="setAccessorFactory">The set accessor factory.</param>
            <param name="getAccessorFactory">The get accessor factory.</param>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.AccessorFactory.SetAccessorFactory">
            <summary>
            The factory which build <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor"/>
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.AccessorFactory.GetAccessorFactory">
            <summary>
            The factory which build <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessor"/>
            </summary>
        </member>
        <member name="T:MyBatis.Common.Resources.StaticContentResource">
            <summary>
            Adapts a static string content as an <see cref="T:MyBatis.Common.Resources.IResource"/>
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.StaticContentResource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Resources.StaticContentResource"/> class.
            </summary>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:MyBatis.Common.Resources.StaticContentResource.CreateRelative(System.String)">
            <summary>
            Creates a resource relative to this resource.
            </summary>
            <param name="relativePath">The path (always resolved as relative to this resource).</param>
            <returns>The relative resource.</returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied
            path.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the resource does not support the notion of a relative path.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.StaticContentResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Resources.StaticContentResource.FileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <value>The <see cref="T:System.IO.FileInfo"/> handle for this resource.</value>
            <remarks>
            	<p>
            For safety, always check the value of the
            <see cref="P:System.Uri.IsFile"/> property prior to
            accessing this property; resources that cannot be exposed as
            a <see cref="T:System.IO.FileInfo"/> will typically return
            <see langword="false"/> from a call to this property.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the resource is not available on a filesystem, or cannot be
            exposed as a <see cref="T:System.IO.FileInfo"/> handle.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.StaticContentResource.Stream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>An <see cref="T:System.IO.Stream"/>.</value>
            <remarks>
            	<note type="caution">
            Clients of this interface must be aware that every access of this
            property will create a <i>fresh</i>
            		<see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such
            <see cref="T:System.IO.Stream"/>.
            </note>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.StaticContentResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>A description for this resource.</value>
            <remarks>
            	<p>
            The description is typically used for diagnostics and other such
            logging when working with the resource.
            </p>
            	<p>
            Implementations are also encouraged to return this value from their
            <see cref="M:System.Object.ToString"/> method.
            </p>
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Logging.Impl.ConsoleOutLogger">
            <summary>
            Sends log messages to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Logging.Impl.AbstractLogger">
            <summary>
            Base class that implements the ILog interface.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Logging.ILog">
            <summary>
            A simple logging interface abstracting logging APIs. Inspired by log4net.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Debug(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Debug"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Error(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Fatal(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Info(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Info"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Trace(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Warn(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="P:MyBatis.Common.Logging.ILog.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Debug"/> level.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.ILog.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/> level.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.ILog.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> level.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.ILog.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Info"/> level.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.ILog.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.ILog.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/> level.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Write(MyBatis.Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Concrete classes should override this method to perform the actual logging.
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.IsLevelEnabled(MyBatis.Common.Logging.LogLevel)">
            <summary>
            Concrete classes should override this method to determine if a particular <see cref="T:MyBatis.Common.Logging.LogLevel"/>
            is enabled.
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Debug(System.Object)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Debug"/> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Debug(System.Object,System.Exception)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Debug"/> message with an optional <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
            The	<see cref="T:System.Exception"/> associated with the message. If there isn't any
            <see cref="T:System.Exception"/> associated with the message, pass <see langword="null"/>.
            </param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Error(System.Object)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Error(System.Object,System.Exception)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/> message with an optional <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
            The	<see cref="T:System.Exception"/> associated with the message. If there isn't any
            <see cref="T:System.Exception"/> associated with the message, pass <see langword="null"/>.
            </param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Fatal(System.Object)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> message with an optional <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
            The	<see cref="T:System.Exception"/> associated with the message. If there isn't any
            <see cref="T:System.Exception"/> associated with the message, pass <see langword="null"/>.
            </param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Info(System.Object)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Info"/> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Info(System.Object,System.Exception)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Info"/> message with an optional <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
            The	<see cref="T:System.Exception"/> associated with the message. If there isn't any
            <see cref="T:System.Exception"/> associated with the message, pass <see langword="null"/>.
            </param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Trace(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Warn(System.Object)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.AbstractLogger.Warn(System.Object,System.Exception)">
            <summary>
            Log a <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/> message with an optional <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
            The	<see cref="T:System.Exception"/> associated with the message. If there isn't any
            <see cref="T:System.Exception"/> associated with the message, pass <see langword="null"/>.
            </param>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.AbstractLogger.IsDebugEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:MyBatis.Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:MyBatis.Common.Logging.LogLevel.Debug"/>. If it is, all messages will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.AbstractLogger.IsErrorEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:MyBatis.Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/>. If it is, only messages with a <see cref="T:MyBatis.Common.Logging.LogLevel"/> of
            <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/> and <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.AbstractLogger.IsFatalEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:MyBatis.Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/>. If it is, only messages with a <see cref="T:MyBatis.Common.Logging.LogLevel"/> of
            <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.AbstractLogger.IsInfoEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:MyBatis.Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:MyBatis.Common.Logging.LogLevel.Info"/>. If it is, only messages with a <see cref="T:MyBatis.Common.Logging.LogLevel"/> of
            <see cref="F:MyBatis.Common.Logging.LogLevel.Info"/>, <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/>, <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/>, and 
            <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.AbstractLogger.IsWarnEnabled">
            <summary>
            Returns <see langword="true"/> if the current <see cref="T:MyBatis.Common.Logging.LogLevel"/> is greater than or
            equal to <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/>. If it is, only messages with a <see cref="T:MyBatis.Common.Logging.LogLevel"/> of
            <see cref="F:MyBatis.Common.Logging.LogLevel.Warn"/>, <see cref="F:MyBatis.Common.Logging.LogLevel.Error"/>, and <see cref="F:MyBatis.Common.Logging.LogLevel.Fatal"/> 
            will be sent to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.AbstractLogger.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <value></value>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.ConsoleOutLogger.#ctor(System.String,MyBatis.Common.Logging.LogLevel,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates and initializes a logger that writes messages to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="logName">The name, usually type name of the calling class, of the logger.</param>
            <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.ConsoleOutLogger.Write(MyBatis.Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Do the actual logging by constructing the log message using a <see cref="T:System.Text.StringBuilder"/> then
            sending the output to <see cref="P:System.Console.Out"/>.
            </summary>
            <param name="level">The <see cref="T:MyBatis.Common.Logging.LogLevel"/> of the message.</param>
            <param name="message">The log message.</param>
            <param name="e">An optional <see cref="T:System.Exception"/> associated with the message.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.ConsoleOutLogger.IsLevelEnabled(MyBatis.Common.Logging.LogLevel)">
            <summary>
            Determines if the given log level is currently enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Data.ProviderDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified node in a <see cref="T:MyBatis.Common.Data.IDbProvider"/>.
            </summary>
            <param name="config">The IConfiguration node.</param>
            <returns>The <see cref="T:MyBatis.Common.Data.IDbProvider"/></returns>
        </member>
        <member name="T:MyBatis.Common.Configuration.ConfigurationCollection">
            <summary>
            A collection of <see cref="T:MyBatis.Common.Configuration.IConfiguration"/> objects.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationCollection.Find(System.String)">
            <summary>
            Finds the IConfiguration element that are from the specified element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>A list of IConfiguration</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationCollection.RecursiveFind(System.String)">
            <summary>
            Recursive find of the IConfiguration element that are from the specified element type.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>A list of IConfiguration</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationCollection.Remove(System.String)">
            <summary>
            Builds a new collection where element of the specified type
            are removed.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.Common.Configuration.ConfigurationCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MyBatis.Common.Configuration.IConfiguration"/> with the specified id.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Resources.CustomUriBuilder">
            <summary>
            Provides a custom constructor for uniform resource identifiers (URIs)
            </summary>
        </member>
        <member name="F:MyBatis.Common.Resources.CustomUriBuilder.DefaultBasePathPlaceHolder">
            <summary>
            The default special character that denotes the base (home, or root)
            path.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.CustomUriBuilder.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the UriBuilder class with the specified 
            path or fragment identifier. 
            </summary>
            <param name="resourceUri">The specified path or fragment identifier</param>
            <param name="basePath">The base directory</param>
            <exception cref="T:MyBatis.Common.Exceptions.ResourceException">Thrown when the resource doesn't exist for the supplied URI</exception>
        </member>
        <member name="M:MyBatis.Common.Resources.CustomUriBuilder.ResolveBasePathPlaceHolder(System.String)">
            <summary>
            Resolves the presence of the
            ~ value in the supplied <paramref name="resourceName"/> into a path.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
        </member>
        <member name="P:MyBatis.Common.Resources.CustomUriBuilder.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value>
            The <see cref="T:System.Uri"/> handle for this resource.
            </value>
            <exception cref="T:System.IO.IOException">
            If the resource is not available or cannot be exposed as a
            <see cref="T:System.Uri"/>.
            </exception>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor"/> class provides an reflection get access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.       
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The field alue.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldGetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.BoxingOpCodes">
            <summary>  
            Helper class that returns appropriate boxing opcode based on type  
            </summary>  
            <remarks>From Spring.NET</remarks>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.BoxingOpCodes.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.Common.Utilities.Objects.BoxingOpCodes"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.BoxingOpCodes.GetOpCode(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.OpCode"/>.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.AbstractFactory">
            <summary>
            A <see cref="T:MyBatis.Common.Utilities.Objects.IObjectFactory"/> implementation that for abstract type
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.AbstractFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.AbstractFactory"/> class.
            </summary>
            <param name="typeToCreate">The type to create.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.AbstractFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Utilities.ScriptRunner">
            <summary>
            Description r閟um閑 de ScriptRunner.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.ScriptRunner.RunScript(MyBatis.Common.Data.IDataSource,System.String)">
            <summary>
            Run an sql script
            </summary>
            <param name="dataSource">The dataSouce that will be used to run the script.</param>
            <param name="sqlScriptPath">a path to an sql script file.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ScriptRunner.RunScript(MyBatis.Common.Data.IDataSource,System.String,System.Boolean)">
            <summary>
            Run an sql script
            </summary>
            <param name="dataSource">The dataSouce that will be used to run the script.</param>
            <param name="sqlScriptPath">a path to an sql script file.</param>
            <param name="doParse">parse out the statements in the sql script file.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ScriptRunner.RunScript(MyBatis.Common.Data.IDataSource,System.IO.Stream,System.Boolean)">
            <summary>
            Runs the sql script.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="stream">The stream.</param>
            <param name="doParse">if set to <c>true</c> [do parse].</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ScriptRunner.AnalyseScript(MyBatis.Common.Data.IDataSource,System.String,System.Boolean,System.String)">
            <summary>
            Analyses the script.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="script">The script.</param>
            <param name="doParse">if set to <c>true</c> [do parse].</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ScriptRunner.ExecuteStatements(MyBatis.Common.Data.IDataSource,System.Collections.ArrayList)">
            <summary>
            Execute the given sql statements
            </summary>
            <param name="dataSource">The dataSouce that will be used.</param>
            <param name="sqlStatements">An ArrayList of sql statements to execute.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ScriptRunner.ParseScript(System.String)">
            <summary>
            Parse and tokenize the sql script into multiple statements
            </summary>
            <param name="script">the script to parse</param>
        </member>
        <member name="T:MyBatis.Common.Resources.FileResourceLoadEventArgs">
            <summary>
            Event generated when processing a <see cref="T:MyBatis.Common.Resources.FileResource"/>
            </summary>
        </member>
        <member name="P:MyBatis.Common.Resources.FileResourceLoadEventArgs.FileInfo">
            <summary>
            Gets or sets the <see cref="P:MyBatis.Common.Resources.FileResourceLoadEventArgs.FileInfo"/>.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.TypeOfConstraint">
            <summary>
            Checks that an object is of the same type provided or derived from it.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.TypeOfConstraint.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.TypeOfConstraint"/> class.
            </summary>
            <param name="expectedType">The expected type.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.TypeOfConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified obj].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.NotConstraint">
            <summary>
            NotConstraint negates the effect of some other constraint 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NotConstraint.#ctor(MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.NotConstraint"/> class.
            </summary>
            <param name="baseConstraint">The base constraint.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NotConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.EqualConstraint">
            <summary>
            Checks that an object equals another
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.EqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.EqualConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.EqualConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.TypeUtils">
            <summary>
             Helper methods with regard to type.
            </summary>
            <remarks>
            <p>
            Mainly for internal use within the framework.
            </p>
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypeUtils.ResolveType(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypeUtils.InstantiatePrimitiveType(System.Type)">
            <summary>
            Instantiate a 'Primitive' Type.
            </summary>
            <param name="type">The type.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypeUtils.InstantiateNullableType(System.Type)">
            <summary>
            Instantiate a Nullable Type.
            </summary>
            <param name="type">The nullable type.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypeUtils.IsImplementGenericIListInterface(System.Type)">
            <summary>
            Determines whether the specified type is implement generic Ilist interface.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is implement generic Ilist interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.TypesResolver.ITypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this interface is to centralise
            the resolution of type names to <see cref="T:System.Type"/> instances
            beyond that offered by the plain vanilla
            <see cref="M:System.Type.GetType(System.String)"/> method call.
            </p>
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.ITypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:MyBatis.Common.Resources.FileResource">
            <summary>
            A <see cref="T:System.IO.File"/> backed resource.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.FileResource.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Resources.UrlResource"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:MyBatis.Common.Resources.FileResource.CreateRelative(System.String)">
            <summary>
            Creates a resource relative to this resource.
            </summary>
            <param name="relativePath">The path (always resolved as relative to this resource).</param>
            <returns>The relative resource.</returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied
            path.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the resource does not support the notion of a relative path.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.FileResource.FileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <value>The <see cref="T:System.IO.FileInfo"/> handle for this resource.</value>
            <remarks>
            	<p>
            For safety, always check the value of the
            <see cref="P:System.Uri.IsFile"/> property prior to
            accessing this property; resources that cannot be exposed as
            a <see cref="T:System.IO.FileInfo"/> will typically return
            <see langword="false"/> from a call to this property.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the resource is not available on a filesystem, or cannot be
            exposed as a <see cref="T:System.IO.FileInfo"/> handle.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.FileResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Resources.FileResource.Stream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>An <see cref="T:System.IO.Stream"/>.</value>
            <remarks>
            	<note type="caution">
            Clients of this interface must be aware that every access of this
            property will create a <i>fresh</i>
            		<see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such
            <see cref="T:System.IO.Stream"/>.
            </note>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.FileResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>A description for this resource.</value>
            <remarks>
            	<p>
            The description is typically used for diagnostics and other such
            logging when working with the resource.
            </p>
            	<p>
            Implementations are also encouraged to return this value from their
            <see cref="M:System.Object.ToString"/> method.
            </p>
            </remarks>
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor"/> class provides an reflection set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the property of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor"/> class defines a set property accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor"/> class
            for set property access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegatePropertySetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Logging.Impl.TraceLoggerFA">
            <summary>
            Summary description for  TraceLoggerFA.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Logging.ILoggerFactoryAdapter">
            <summary>
            Defines the members that logging implementations must implement.
            </summary>
            <remarks>
            Classes that implement this interface may optional implement a constructor that accepts 
            a <see cref="T:System.Collections.Specialized.NameValueCollection"/> which will contain zero or more user supplied configuration
            properties.
            <para>
            The Apache.Ibatis.Common assembly ships with the following built-in <see cref="T:MyBatis.Common.Logging.ILoggerFactoryAdapter"/> implementations:
            </para>
            <list type="table">
            <item><term><see cref="T:MyBatis.Common.Logging.Impl.ConsoleOutLoggerFA"/></term><description>Writes output to Console.Out</description></item>
            <item><term><see cref="T:MyBatis.Common.Logging.Impl.TraceLoggerFA"/></term><description>Writes output to the System.Diagnostics.Trace sub-system</description></item>
            <item><term><see cref="T:MyBatis.Common.Logging.Impl.NoOpLoggerFA"/></term><description>Ignores all messages</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
            Get a <see cref="T:MyBatis.Common.Logging.ILog"/> instance by type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
            Get a <see cref="T:MyBatis.Common.Logging.ILog"/> instance by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.TraceLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructor
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.TraceLoggerFA.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.TraceLoggerFA.GetLogger(System.String)">
            <summary>
            Get a ILog instance by type name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Exceptions.ProbeException">
            <summary>
            Summary description for ProbeException.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ProbeException.#ctor">
            <summary>
            Initializes a new instance of the <b>ProbeException</b> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ProbeException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ProbeException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ProbeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ProbeException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ProbeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ProbeException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ProbeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:MyBatis.Common.Contracts.Exceptions.PostConditionException">
            <summary>
            Design By Contract Exception raised when a postcondition fails.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Contracts.Exceptions.DesignByContractException">
            <summary>
            Base class for all exception raise when a contract is broken
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.DesignByContractException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.DesignByContractException"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.DesignByContractException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.DesignByContractException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.DesignByContractException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.DesignByContractException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.PostConditionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.PostConditionException"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.PostConditionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.PostConditionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.PostConditionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.PostConditionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.EmptyConstraint">
            <summary>
            Checks whether a string or collection is empty
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.EmptyConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.ReflectionInfo">
            <summary>
            This class represents a cached set of class definition information that
            allows for easy mapping between property names and get/set methods.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.ReflectionInfo.BINDING_FLAGS_PROPERTY">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.ReflectionInfo.BINDING_FLAGS_FIELD">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.Common.Utilities.Objects.ReflectionInfo"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.ReflectionInfo"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.AddMembers(System.Type)">
            <summary>
            Adds the members.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.GetSetter(System.String)">
            <summary>
            Gets the setter.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.GetGetter(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.GetSetterType(System.String)">
            <summary>
            Gets the type of the member.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.GetGetterType(System.String)">
            <summary>
            Gets the type of the getter.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.GetReadableMemberNames">
            <summary>
            Gets the readable member names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.GetWriteableMemberNames">
            <summary>
            Gets the writeable member names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.HasWritableMember(System.String)">
            <summary>
            Determines whether [has writable member] [the specified member name].
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns>
            	<c>true</c> if [has writable member] [the specified member name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.HasReadableMember(System.String)">
            <summary>
            Determines whether [has readable member] [the specified member name].
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns>
            	<c>true</c> if [has readable member] [the specified member name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.IsKnownType(System.Type)">
            <summary>
            Determines whether [is known type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if [is known type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ReflectionInfo.GetInstance(System.Type)">
            <summary>
            Gets an instance of ReflectionInfo for the specified type.
            </summary>summary>
            <param name="type">The type for which to lookup the method cache.</param>
            <returns>The properties cache for the type</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.ReflectionInfo.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor"/> class defines a field get accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor"/> class
            for field get access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegateFieldSetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Resources.UrlResourceLoader">
            <summary>
            Url resource loader implementation of the
            <see cref="!:Apache.Ibatis.Common.Utilities.Resources.IResourceLoader"/> interface.
            </summary>
            <remarks>
            <p>
            This <see cref="!:Apache.Ibatis.Common.Utilities.Resources.IResourceLoader"/> implementation
            allows the creation of embeded assembly resource.
            </p>
            <remarks>
            <p>
            Obviously supports resolution as a <see cref="T:System.Uri"/>, and also
            as a <see cref="T:System.IO.FileInfo"/> in the case of the <c>"file:"</c>
            protocol.
            </p>
            </remarks>
            <example>
            <p>
            Some examples of the strings that can be used to initialize a new
            instance of the <see cref="!:Apache.Ibatis.Common.Utilities.Resources.UrlResource"/> class
            include...
            <list type="bullet">
            <item>
            <description>ftp://Config/SqlMap.config</description>
            </item>
            <item>
            <description>http://www.mycompany.com/SqlMap.config</description>
            </item>
            </list>
            </p>
            </example>
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Resources.IResourceLoader">
            <summary>
            Return an <see cref="!:Apache.Ibatis.Common.Utilities.Resources.IResource"/> handle for the
            specified resource.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.IResourceLoader.Accept(System.Uri)">
            <summary>
            Check if this loader accepts the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:MyBatis.Common.Resources.IResourceLoader.Create(System.Uri)">
            <summary>
            Return an <see cref="!:Apache.Ibatis.Common.Utilities.Resources.IResource"/> handle for the
            specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            An appropriate <see cref="!:Apache.Ibatis.Common.Utilities.Resources.IResource"/> handle.
            </returns>
        </member>
        <member name="F:MyBatis.Common.Resources.UrlResourceLoader.SchemeFtp">
            <summary>
            The resource is accessed through FTP. 
            </summary>
        </member>
        <member name="F:MyBatis.Common.Resources.UrlResourceLoader.SchemeHttp">
            <summary>
            The resource is accessed through HTTP. 
            </summary>
        </member>
        <member name="F:MyBatis.Common.Resources.UrlResourceLoader.SchemeHttps">
            <summary>
            The resource is accessed through SSL-encrypted HTTP. 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.UrlResourceLoader.Accept(System.Uri)">
            <summary>
            Check if this loader accepts the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:MyBatis.Common.Resources.UrlResourceLoader.Create(System.Uri)">
            <summary>
            Return an <see cref="!:Apache.Ibatis.Common.Utilities.Resources.IResource"/> handle for the
            specified URI.
            </summary>
            <param name="resource">The resource.</param>
            <returns>
            An appropriate <see cref="!:Apache.Ibatis.Common.Utilities.Resources.IResource"/> handle.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Exceptions.ResourceException">
            <summary>
            A ResourceException is thrown when an error occurs in resource loading.
            </summary>
            <remarks>
            When this exception occurs check the .xml or .config file.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ResourceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ResourceException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error. 
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ResourceException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ResourceException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ResourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ResourceException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ResourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ResourceException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:MyBatis.Common.Contracts.ContractMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.ContractMessage.#ctor(System.String,MyBatis.Common.Contracts.ThrowException,MyBatis.Common.Contracts.IsSatisfied,MyBatis.Common.Contracts.GetErrorMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.ContractMessage"/> class.
            </summary>
            <param name="messagePrefix">The message prefix.</param>
            <param name="throwException">The throw exception.</param>
            <param name="isSatisfied">The is failed.</param>
            <param name="getErrorMessage">The get error message.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.ContractMessage.When(System.String)">
            <summary>
            Whens the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.OrConstraint.#ctor(MyBatis.Common.Contracts.Constraints.BaseConstraint,MyBatis.Common.Contracts.Constraints.BaseConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.OrConstraint"/> class.
            </summary>
            <param name="left">The left side.</param>
            <param name="right">The right side.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.OrConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified obj].
            </summary>
            <param name="obj">The obj.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.ContainsConstraint">
            <summary>
            Checks that the string contains the specified string.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.ContainsConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.ContainsConstraint"/> class.
            </summary>
            <param name="expected">The expected string.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.ContainsConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified obj].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.StringHandler.Replace(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            This could be made an extension method...
            </summary>
            <param name="buffer"></param>
            <param name="find"></param>
            <param name="replace"></param>
        </member>
        <member name="T:MyBatis.Common.Utilities.ReadOnlyDictionary`2">
            <summary>
            Represents a read only wrapper around a generic IDictionary. The design pattern
            mirrors ReadOnlyCollection, and follows the apparent pattern that write operations
            do not throw an exception, but simply make no change to the underlying collection.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.ReadOnlyDictionary`2.dict">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.ReadOnlyDictionary`2.idict">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionaryToWrap">The dictionary to wrap.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.AsReadOnly(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Returns a read only dictionary.
            </summary>
            <param name="dictionaryToWrap">The dictionary to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Remove does not change a read only Dictionary
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Clear">
            <summary>
            Clear does not change a read only Dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove does not change a read only Dictionary
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Remove(System.Object)">
            <summary>
            Remove does not affect a read only Dictionary
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a read only <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the <see cref="!:TValue"/> with the specified key. Set
            does not change a read only Dictionary
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.Item(System.Object)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key. Set
            does not affect a ReadOnlyDictionary
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor"/> class provides an IL-based get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the property value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitPropertyGetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Contracts.Exceptions.AssertionException">
            <summary>
            Design By Contract Exception raised when an assertion fails.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.AssertionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.AssertionException"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.AssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.AssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.AssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor"/> class provides an IL-based get access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.
            </summary>
            <param name="target">Object to retrieve the field from.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.EmitFieldGetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Logging.LogLevel">
            <summary>
            The logging levels used by Log are (in order): 
            </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.Trace">
             <summary>
            
             </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.Warn">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.Fatal">
             <summary>
            
             </summary>
        </member>
        <member name="F:MyBatis.Common.Logging.LogLevel.Off">
            <summary>
            Do not log anything.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Exceptions.ForeignKeyException">
            <summary>
            A DALForeignKeyException is thrown when foreign key error occured in a sql statement.
            </summary>
            <remarks>
            This exception is not used by the framework.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ForeignKeyException.#ctor">
            <summary>
            Initializes a new instance of the <b>DalException</b> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ForeignKeyException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ForeignKeyException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ForeignKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ForeignKeyException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ForeignKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Exceptions.ForeignKeyException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:MyBatis.Common.Exceptions.ForeignKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:MyBatis.Common.Resources.AssemblyResource">
            <summary>
            An <see cref="T:MyBatis.Common.Resources.IResource"/> implementation for
            resources stored within assemblies.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.AssemblyResource.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Resources.AssemblyResource"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:MyBatis.Common.Resources.AssemblyResource.CreateRelative(System.String)">
            <summary>
            Creates a resource relative to this resource.
            </summary>
            <param name="relativePath">The path (always resolved as relative to this resource).</param>
            <returns>The relative resource.</returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied
            path.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the resource does not support the notion of a relative path.
            </exception>
        </member>
        <member name="M:MyBatis.Common.Resources.AssemblyResource.GetResourceNameWithoutProtocol(System.Uri)">
            <summary>
            Strips any protocol name from the supplied
            <paramref name="uriParam"/>.
            </summary>
            <param name="uriParam">An Uri resource.</param>
            <returns>
            The name of the resource without the protocol name.
            </returns>
            <remarks>
            	<p>
            If the supplied <paramref name="uriParam"/> does not
            have any protocol associated with it, then the supplied
            <paramref name="uriParam"/> will be returned as-is.
            </p>
            </remarks>
            <example>
            	<code language="C#">
            GetResourceNameWithoutProtocol("http://www.mycompany.com/resource.txt");
            // returns www.mycompany.com/resource.txt
            </code>
            </example>
        </member>
        <member name="P:MyBatis.Common.Resources.AssemblyResource.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified ?
            </summary>
        </member>
        <member name="P:MyBatis.Common.Resources.AssemblyResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Resources.AssemblyResource.FileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <value>The <see cref="T:System.IO.FileInfo"/> handle for this resource.</value>
            <remarks>
            	<p>
            For safety, always check the value of the
            <see cref="P:System.Uri.IsFile"/> property prior to
            accessing this property; resources that cannot be exposed as
            a <see cref="T:System.IO.FileInfo"/> will typically return
            <see langword="false"/> from a call to this property.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the resource is not available on a filesystem, or cannot be
            exposed as a <see cref="T:System.IO.FileInfo"/> handle.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.AssemblyResource.Stream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>An <see cref="T:System.IO.Stream"/>.</value>
            <remarks>
            <note type="caution">
            Clients of this interface must be aware that every access of this
            property will create a <i>fresh</i>
            		<see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such
            <see cref="T:System.IO.Stream"/>.
            </note>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.AssemblyResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>A description for this resource.</value>
            <remarks>
            	<p>
            The description is typically used for diagnostics and other such
            logging when working with the resource.
            </p>
            	<p>
            Implementations are also encouraged to return this value from their
            <see cref="M:System.Object.ToString"/> method.
            </p>
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory">
            <summary>
            A factory to build <see cref="T:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ISetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.CreateDynamicPropertySetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.CreateDynamicFieldSetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.CreateReflectionPropertySetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.CreateReflectionFieldSetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.SetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.FactoryBuilder">
            <summary>
            Build IFactory object via IL 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryBuilder.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryBuilder.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a factory which build class of type typeToCreate
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryBuilder.CreateFactoryType(System.Type,System.Type[])">
            <summary>
            Creates a <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/>.
            </summary>
            <param name="typeToCreate">The type instance to create.</param>
            <param name="types">The types.</param>
            <returns>The <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryBuilder.ImplementCreateInstance(System.Reflection.Emit.TypeBuilder,System.Type,System.Type[])">
            <summary>
            Implements the create instance.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="typeToCreate">The type to create.</param>
            <param name="argumentTypes">The argument types.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.FactoryBuilder.EmitArgsIL(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>   
            Emit parameter IL for a method call.   
            </summary>   
            <param name="il">IL generator.</param>   
            <param name="argumentTypes">Arguments type defined for a the constructor.</param>   
        </member>
        <member name="T:MyBatis.Common.Resources.UrlResource">
            <summary>
            A <see cref="T:System.Uri"/> backed resource 
            on top of <see cref="T:System.Net.WebRequest"/>
            </summary>
            <remarks>
            <example>
            <p>
            Some examples of the strings that can be used to initialize a new
            instance of the <see cref="T:MyBatis.Common.Resources.UrlResource"/> class
            include...
            <list type="bullet">
            <item>
            <description>ftp://Config/SqlMap.config</description>
            </item>
            <item>
            <description>http://www.mycompany.com/SqlMap.config</description>
            </item>
            </list>
            </p>
            </example>
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Resources.UrlResource.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Resources.UrlResource"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:MyBatis.Common.Resources.UrlResource.CreateRelative(System.String)">
            <summary>
            Creates a resource relative to this resource.
            </summary>
            <param name="relativePath">The path (always resolved as relative to this resource).</param>
            <returns>The relative resource.</returns>
            <exception cref="T:System.IO.IOException">
            If the relative resource could not be created from the supplied
            path.
            </exception>
            <exception cref="T:System.NotSupportedException">
            If the resource does not support the notion of a relative path.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.UrlResource.Uri">
            <summary>
            Returns the <see cref="T:System.Uri"/> handle for this resource.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Resources.UrlResource.FileInfo">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
            <value>The <see cref="T:System.IO.FileInfo"/> handle for this resource.</value>
            <remarks>
            	<p>
            For safety, always check the value of the
            <see cref="P:System.Uri.IsFile"/> property prior to
            accessing this property; resources that cannot be exposed as
            a <see cref="T:System.IO.FileInfo"/> will typically return
            <see langword="false"/> from a call to this property.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the resource is not available on a filesystem, or cannot be
            exposed as a <see cref="T:System.IO.FileInfo"/> handle.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.UrlResource.Stream">
            <summary>
            Return an <see cref="T:System.IO.Stream"/> for this resource.
            </summary>
            <value>An <see cref="T:System.IO.Stream"/>.</value>
            <remarks>
            	<note type="caution">
            Clients of this interface must be aware that every access of this
            property will create a <i>fresh</i>
            		<see cref="T:System.IO.Stream"/>;
            it is the responsibility of the calling code to close any such
            <see cref="T:System.IO.Stream"/>.
            </note>
            </remarks>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="P:MyBatis.Common.Resources.UrlResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>A description for this resource.</value>
            <remarks>
            	<p>
            The description is typically used for diagnostics and other such
            logging when working with the resource.
            </p>
            	<p>
            Implementations are also encouraged to return this value from their
            <see cref="M:System.Object.ToString"/> method.
            </p>
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Resources.FileResourceLoader">
            <summary>
            File resource loader implementation of the
            <see cref="T:MyBatis.Common.Resources.IResourceLoader"/> interface.
            </summary>
            <remarks>
            <p>
            This <see cref="T:MyBatis.Common.Resources.IResourceLoader"/> implementation
            allows the creation of file resource.
            </p>
            <p>
            URI must be format as file://'filename.text' ...
            </p>
            </remarks>
        </member>
        <member name="F:MyBatis.Common.Resources.FileResourceLoader.Scheme">
            <summary>
            The resource is a file on the local computer. 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.FileResourceLoader.Accept(System.Uri)">
            <summary>
            Check if this loader accepts the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:MyBatis.Common.Resources.FileResourceLoader.Create(System.Uri)">
            <summary>
            Return an <see cref="T:MyBatis.Common.Resources.IResource"/> handle for the
            specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            An appropriate <see cref="T:MyBatis.Common.Resources.IResource"/> handle.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory">
            <summary>
            A factory to build <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.IGetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.CreateDynamicPropertyGetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.CreateDynamicFieldGetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.CreateReflectionPropertyGetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.CreateReflectionFieldGetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.GetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.ActivatorObjectFactory">
            <summary>
            A <see cref="T:MyBatis.Common.Utilities.Objects.IObjectFactory"/> implementation that can create objects 
            via Activator.CreateInstance
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ActivatorObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new see <see cref="T:MyBatis.Common.Utilities.Objects.IObjectFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:MyBatis.Common.Utilities.Objects.IObjectFactory"/> instance.</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.HashCodeProvider">
            <summary>
            Summary description for HashCodeProvider.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.HashCodeProvider.GetIdentityHashCode(System.Object)">
            <summary>
            Supplies a hash code for an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A hash code</returns>
            <remarks>
            Buggy in .NET V1.0
            .NET Fx v1.1 Update: 
            As of v1.1 of the framework, there is a method System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object) that does this as well.
            I will not use to Keep compatiblity with .NET V1.0
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Contracts.Require">
            <summary>
            Helper class for pre conditions checks
            will throw exception of type <typeparamref name="PreConditionException"/>
            with the specified message if the condition is false
            </summary>
            <example>
            Sample usage:
            <code>
            <![CDATA[
            Contract.Require.That(connectionString, Is.Not.Null & Is.Not.Empty).When("retrieving argument connectionString in DataSource constructor");
            
            Contract.Require.That<ArgumentException>(connectionString, Is.Not.Null).When("retrieving argument connectionString in DataSource constructor");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:MyBatis.Common.Contracts.Require.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Require"/> class.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.SameAsConstraint">
            <summary>
            Checks whether the actual value is the same object as the supplied
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.SameAsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.SameAsConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.SameAsConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified obj].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Assert">
            <summary>
            Helper class for assertion checks
            Will throw exception of type <typeparamref name="AssertionException"/>
            with the specified message if the condition is false
            </summary>
            <example>
            Sample usage:
            <code>
            <![CDATA[
            Contract.Assert.That(connectionString, Is.Not.Null & Is.Not.Empty).When("retrieving argument connectionString in DataSource constructor");
            
            Contract.Assert.That<ValidationException>(name, Is.Not.Null & Is.Not.Empty).When("validate order");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:MyBatis.Common.Contracts.Assert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Ensure"/> class.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor"/> class provides an reflection set access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionFieldSetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Logging.Impl.NoOpLoggerFA">
            <summary>
            Factory for creating "no operation" loggers that do nothing and whose Is*Enabled properties always 
            return false.
            </summary>
            <remarks>
            This factory creates a single instance of <see cref="T:MyBatis.Common.Logging.Impl.NoOpLogger"/> and always returns that 
            instance whenever an <see cref="T:MyBatis.Common.Logging.ILog"/> instance is requested.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLoggerFA.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLoggerFA.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by type 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLoggerFA.MyBatis#Common#Logging#ILoggerFactoryAdapter#GetLogger(System.String)">
            <summary>
            Get a ILog instance by type name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Data.SqlServerDbProvider">
            <summary>
            System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
            </summary>
        </member>
        <member name="M:MyBatis.Common.Data.SqlServerDbProvider.#ctor">
            <summary>
            Sets default values for connecting to SQL Server.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Data.ProviderSerializer.Serialize(MyBatis.Common.Data.IDbProvider)">
            <summary>
            Serializes the specified <see cref="T:MyBatis.Common.Data.IDbProvider"/> into an <see cred="IConfiguration"/> node.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.EventFromConstraint">
            <summary>
            Checks f the value is an event announced by a specific object.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.EventFromConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.EventFromConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.EventFromConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.TypesResolver.CachedTypeResolver">
            <summary>
            Resolves (instantiates) a <see cref="T:System.Type"/> by it's (possibly
            assembly qualified) name, and caches the <see cref="T:System.Type"/>
            instance against the type name.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.CachedTypeResolver._typeCache">
            <summary>
            The cache, mapping type names (<see cref="T:System.String"/> instances) against
            <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.CachedTypeResolver.#ctor(MyBatis.Common.Utilities.TypesResolver.ITypeResolver)">
            <summary>
            Creates a new instance of the <see cref="T:MyBatis.Common.Utilities.TypesResolver.CachedTypeResolver"/> class.
            </summary>
            <param name="typeResolver">
            The <see cref="T:MyBatis.Common.Utilities.TypesResolver.ITypeResolver"/> that this instance will delegate
            actual <see cref="T:System.Type"/> resolution to if a <see cref="T:System.Type"/>
            cannot be found in this instance's <see cref="T:System.Type"/> cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="typeResolver"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.CachedTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:MyBatis.Common.Utilities.ReadOnlyICollection`1">
            <summary>
            Wraps an existing ICollection as read only, following the pattern of 
            ReadOnlyCollection to simply no-op modifying functions intead of throwing
            Exceptions.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.ReadOnlyICollection`1.coll">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.ReadOnlyICollection`1"/> class.
            </summary>
            <param name="collectionToWrap">The collection to wrap.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.AsReadOnly(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returned a read only wrapper around the collectionToWrap.
            </summary>
            <param name="collectionToWrap">The collection to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.Add(`0)">
            <summary>
            Add does not change a ReadOnlyICollection
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.Clear">
            <summary>
            Clear does not change a ReadOnlyICollection
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.Remove(`0)">
            <summary>
            Remove does not change a ReadOnlyICollection
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.ReadOnlyICollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyICollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.ReadOnlyICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:MyBatis.Common.Resources.Resources">
            <summary>
            A class to simplify access to resources.
            
            The file can be loaded from the application root directory 
            (use the resource attribute) 
            or from any valid URL (use the url attribute). 
            For example,to load a fixed path file, use:
            &lt;properties url=攆ile:///c:/config/my.properties?/&gt;
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.Resources.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>
            true if the caller has the required permissions and path contains the name of an existing file
            false if the caller has the required permissions and path doesn't contain the name of an existing file
            else exception
            </returns>
        </member>
        <member name="M:MyBatis.Common.Resources.Resources.GetUriAsXmlDocument(System.String)">
            <returns>Return the Xml document load.</returns>
        </member>
        <member name="M:MyBatis.Common.Resources.Resources.GetStreamAsXmlDocument(System.IO.Stream)">
            <summary>
            Get XmlDocument from a stream resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Resources.Resources.GetUriAsXmlReader(System.String)">
            <summary>
            Gets the URI as XML reader.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Resources.Resources.GetStreamAsXmlReader(System.IO.Stream)">
            <summary>
            Gets the stream as XML reader.
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor"/> class provides an reflection get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the property for 
            the specified target.
            </summary>
            <param name="target">Object to retrieve the property from.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.ReflectionPropertyGetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor"/> class defines a get property accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor"/> class
            for get property access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the field value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegatePropertyGetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Logging.Impl.NoOpLogger">
            <summary>
            Silently ignores all log messages.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Debug(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Debug(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Error(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Error(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Fatal(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Info(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Info(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Warn(System.Object)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Warn(System.Object,System.Exception)">
            <summary>
            Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Trace(System.Object)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.NoOpLogger.Trace(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level including
            the stack trace of the <see cref="T:System.Exception"/> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.NoOpLogger.IsDebugEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.NoOpLogger.IsErrorEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.NoOpLogger.IsFatalEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.NoOpLogger.IsInfoEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.NoOpLogger.IsWarnEnabled">
            <summary>
            Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Logging.Impl.NoOpLogger.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:MyBatis.Common.Logging.LogLevel.Trace"/> level.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Contracts.Exceptions.InvariantException">
            <summary>
            Design By Contract Exception raised when an invariant fails.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.InvariantException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.InvariantException"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.InvariantException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.InvariantException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.InvariantException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.InvariantException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:MyBatis.Common.Utilities.StringTokenizer">
            <summary>
            A StringTokenizer java like object 
            Allows to break a string into tokens
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a StringTokenizer on the specified String, using the
            default delimiter set (which is " \t\n\r\f").
            </summary>
            <param name="str">The input String</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a StringTokenizer on the specified String, 
            using the specified delimiter set.
            </summary>
            <param name="str">The input String</param>
            <param name="delimiters">The delimiter String</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a StringTokenizer on the specified String, 
            using the specified delimiter set.
            </summary>
            <param name="str">The input String</param>
            <param name="delimiters">The delimiter String</param>
            <param name="returnDelimiters">Returns delimiters as tokens or skip them</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.StringTokenizer.TokenNumber">
            <summary>
            Returns the number of tokens in the String using
            the current deliminter set.  This is the number of times
            nextToken() can return before it will generate an exception.
            Use of this routine to count the number of tokens is faster
            than repeatedly calling nextToken() because the substrings
            are not constructed and returned for each token.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.ObjectProbe">
            <summary>
            Description r閟um閑 de ObjectProbe.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetReadablePropertyNames(System.Object)">
            <summary>
            Returns an array of the readable properties names exposed by an object
            </summary>
            <param name="obj">The object</param>
            <returns>The properties name</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetWriteableMemberNames(System.Object)">
            <summary>
            Returns an array of the writeable members name exposed by a object
            </summary>
            <param name="obj">The object</param>
            <returns>The members name</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForSetter(System.Object,System.String)">
            <summary>
             Returns the type that the set expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="obj">The object to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForSetter(System.Type,System.String)">
            <summary>
             Returns the type that the set expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="type">The class type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForGetter(System.Object,System.String)">
            <summary>
             Returns the type that the get expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="obj">The object to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetMemberTypeForGetter(System.Type,System.String)">
            <summary>
             Returns the type that the get expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="type">The type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetMemberInfoForSetter(System.Type,System.String)">
            <summary>
             Returns the MemberInfo of the set member on the specified type.
            </summary>
            <param name="type">The type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetArrayMember(System.Object,System.String,MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Gets the value of an array member on the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="indexedName">The array index.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>The member value.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.SetArrayMember(System.Object,System.String,System.Object,MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the array member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="indexedName">Name of the indexed.</param>
            <param name="value">The value.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetMemberValue(System.Object,System.String,MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Return the specified member on an object. 
            </summary>
            <param name="obj">The Object on which to invoke the specified property.</param>
            <param name="memberName">Name of the member.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>An Object representing the return value of the invoked property.</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.GetMember(System.Object,System.String,MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Gets the member's value on the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="memberName">Name of the member.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>The member's value</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.SetMemberValue(System.Object,System.String,System.Object,MyBatis.Common.Utilities.Objects.IObjectFactory,MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the member value.
            </summary>
            <param name="obj">he Object on which to invoke the specified mmber.</param>
            <param name="memberName">Name of the member.</param>
            <param name="memberValue">The member value.</param>
            <param name="objectFactory">The object factory.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.SetMember(System.Object,System.String,System.Object,MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="memberName">Name of the member.</param>
            <param name="memberValue">The member value.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.HasWritableProperty(System.Object,System.String)">
            <summary>
            Checks to see if a Object has a writable property/field be a given name
            </summary>
            <param name="obj"> The object to check</param>
            <param name="propertyName">The property to check for</param>
            <returns>True if the property exists and is writable</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.HasReadableProperty(System.Object,System.String)">
            <summary>
            Checks to see if the Object have a property/field be a given name.
            </summary>
            <param name="obj">The Object on which to invoke the specified property.</param>
            <param name="propertyName">The name of the property to check for.</param>
            <returns>
            True or false if the property exists and is readable.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectProbe.IsSimpleType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Data.DbProviderFactory">
            <summary>
            Create DbProviders based on configuration information from resource
            providers.config
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DbProviderFactory.DEFAULT_PROVIDER_NAME">
            <summary>
            Default provider name
            </summary>
        </member>
        <member name="M:MyBatis.Common.Data.DbProviderFactory.#ctor(MyBatis.Common.Configuration.IConfiguration[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Data.DbProviderFactory"/> class.
            </summary>
            <param name="providers">The providers.</param>
        </member>
        <member name="M:MyBatis.Common.Data.DbProviderFactory.GetDbProvider(System.String)">
            <summary>
            Gets the IDbProvider given an identifying name.
            </summary>
            <remarks>
            Familiar names for the .NET 2.0 provider model are supported, i.e.
            System.Data.SqlClient.  Refer to the documentation for a complete
            listing of supported DbProviders and their names.  
            </remarks>
            <param name="providerInvariantName">Name of the provider invariant.</param>
            <returns>An IDbProvider</returns>
        </member>
        <member name="T:MyBatis.Common.Data.DataConstants">
            <summary>
            Constants to identifies <see cref="T:MyBatis.Common.Data.IDataSource"/> or <see cref="T:MyBatis.Common.Data.IDbProvider"/> 
            configuration element
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_CONNECTIONSTRING">
            <summary>
            Token for attribute connectionString.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_NAME">
            <summary>
            Token for attribute name.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_ASSEMBLYNAME">
            <summary>
            Token for attribute assemblyName.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_COMMANDBUILDERCLASS">
            <summary>
            Token for attribute commandBuilderClass.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_COMMANDCLASS">
            <summary>
            Token for attribute commandClass.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_CONNECTIONCLASS">
            <summary>
            Token for attribute connectionClass.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_DESCRIPTION">
            <summary>
            Token for attribute description.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_DEFAULT">
            <summary>
            Token for attribute default.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_ENABLED">
            <summary>
            Token for attribute enabled.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_PARAMETERDBTYPECLASS">
            <summary>
            Token for attribute parameterDbTypeClass.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_PARAMETERDBTYPEPROPERTY">
            <summary>
            Token for attribute parameterDbTypeProperty.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_PARAMETERPREFIX">
            <summary>
            Token for attribute parameterPrefix.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_SETDBPARAMETERPRECISION">
            <summary>
            Token for attribute setDbParameterPrecision.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_SETDBPARAMETERSCALE">
            <summary>
            Token for attribute setDbParameterScale.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_SETDBPARAMETERSIZE">
            <summary>
            Token for attribute setDbParameterSize.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_USEDERIVEPARAMETERS">
            <summary>
            Token for attribute useDeriveParameters.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_USEPARAMETERPREFIXINPARAMETER">
            <summary>
            Token for attribute useParameterPrefixInParameter.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_USEPARAMETERPREFIXINSQL">
            <summary>
            Token for attribute useParameterPrefixInSql.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_USEPOSITIONALPARAMETERS">
            <summary>
            Token for attribute usePositionalParameters.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ATTRIBUTE_ALLOWMARS">
            <summary>
            Token for attribute allowMARS.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ELEMENT_PROVIDERS">
            <summary>
            Token for xml path to providers element.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ELEMENT_PROVIDER">
            <summary>
            Token for xml path to provider element.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Data.DataConstants.ELEMENT_DATASOURCE">
            <summary>
            Token for xml path to dataSource element.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Contracts.Exceptions.PreConditionException">
            <summary>
            Design By ContractException raised when a precondition fails.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.PreConditionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.PreConditionException"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.PreConditionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.PreConditionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Exceptions.PreConditionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Exceptions.PreConditionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.NegationBuilder">
            <summary>
            Resolve the Not constraint
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NegationBuilder.EqualTo(System.Object)">
            <summary>
            Check whether an object is Equals to the specified object.
            </summary>
            <param name="specified">The specified object.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NegationBuilder.TypeOf``1">
            <summary>
            Checks whether an object is of the specified type.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NegationBuilder.AssignableFrom``1">
            <summary>
            Checks whether an object is Assignables from the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NegationBuilder.Contains(System.String)">
            <summary>
            Checks whether a string contains the specified string.
            </summary>
            <param name="specified">The specified string.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NegationBuilder.Like(System.String)">
            <summary>
            Checks whether a string is validated according to regex pattern.
            </summary>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.NegationBuilder.SameAs(System.Object)">
            <summary>
            Checks whether an object is identical to the specified object 
            </summary>
            <param name="specified">The specified object.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.NegationBuilder.Empty">
            <summary>
            Check if it is Empty
            </summary>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.NegationBuilder.False">
            <summary>
            Check if it is False
            </summary>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.NegationBuilder.Null">
            <summary>
            Check if it is Null
            </summary>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.NegationBuilder.True">
            <summary>
            Check if it is True
            </summary>
        </member>
        <member name="P:MyBatis.Common.Contracts.Constraints.NegationBuilder.Not">
            <summary>
            Negate teh next constraint.
            </summary>
            <value>The not.</value>
        </member>
        <member name="T:MyBatis.Common.Utilities.TypesResolver.TypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this class is to centralise the
            resolution of type names to <see cref="T:System.Type"/> instances beyond that
            offered by the plain vanilla System.Type.GetType method call.
            </p>
            </remarks>
            <version>$Id: TypeResolver.cs 705306 2008-10-16 18:14:45Z gbayon $</version>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.ResolveGenericType(System.String)">
            <summary>
            Resolves the supplied generic <paramref name="typeName"/>,
            substituting recursively all its type parameters., 
            to a <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The (possibly generic) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.ResolveType(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.LoadTypeDirectlyFromAssembly(MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo)">
            <summary>
            Uses <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            to load an <see cref="T:System.Reflection.Assembly"/> and then the attendant
            <see cref="T:System.Type"/> referred to by the <paramref name="typeInfo"/>
            parameter.
            </summary>
            <remarks>
            <p>
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> is
            deprecated in .NET 2.0, but is still used here (even when this class is
            compiled for .NET 2.0);
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> will
            still resolve (non-.NET Framework) local assemblies when given only the
            display name of an assembly (the behaviour for .NET Framework assemblies
            and strongly named assemblies is documented in the docs for the
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> method).
            </p>
            </remarks>
            <param name="typeInfo">
            The assembly and type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
            <exception cref="T:System.Exception">
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            </exception>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.LoadTypeByIteratingOverAllLoadedAssemblies(MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo)">
            <summary>
            Check all assembly
            to load the attendant <see cref="T:System.Type"/> referred to by 
            the <paramref name="typeInfo"/> parameter.
            </summary>
            <param name="typeInfo">
            The type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo">
            <summary>
            Holder for the generic arguments when using type parameters.
            </summary>
            <remarks>
            <p>
            Type parameters can be applied to classes, interfaces, 
            structures, methods, delegates, etc...
            </p>
            </remarks>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GENERIC_ARGUMENTS_PREFIX">
            <summary>
            The generic arguments prefix.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GENERIC_ARGUMENTS_SUFFIX">
            <summary>
            The generic arguments suffix.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GENERIC_ARGUMENTS_SEPARATOR">
            <summary>
            The character that separates a list of generic arguments.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the GenericArgumentsInfo class.
            </summary>
            <param name="value">
            The string value to parse looking for a generic definition
            and retrieving its generic arguments.
            </param>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GetGenericArguments">
            <summary>
            Returns an array of unresolved generic arguments types.
            </summary>
            <remarks>
            <p>
            A empty string represents a type parameter that 
            did not have been substituted by a specific type.
            </p>
            </remarks>
            <returns>
            An array of strings that represents the unresolved generic 
            arguments types or an empty array if not generic.
            </returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GenericTypeName">
            <summary>
            The (unresolved) generic type name portion 
            of the original value when parsing a generic type.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.ContainsGenericArguments">
            <summary>
            Is the string value contains generic arguments ?
            </summary>
            <remarks>
            <p>
            A generic argument can be a type parameter or a type argument.
            </p>
            </remarks>
        </member>
        <member name="P:MyBatis.Common.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.IsGenericDefinition">
            <summary>
            Is generic arguments only contains type parameters ?
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.TYPE_ASSEMBLY_SEPARATOR">
            <summary>
            The string that separates a <see cref="T:System.Type"/> name
            from the name of it's attendant <see cref="T:System.Reflection.Assembly"/>
            in an assembly qualified type name.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeAssemblyInfo class.
            </summary>
            <param name="unresolvedTypeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="P:MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.TypeName">
            <summary>
            The (unresolved) type name portion of the original type name.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:MyBatis.Common.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="T:MyBatis.Common.Resources.AssemblyResourceLoader">
            <summary>
            Assembly resource loader implementation of the
            <see cref="T:MyBatis.Common.Resources.IResourceLoader"/> interface.
            </summary>
            <remarks>
            <p>
            This <see cref="T:MyBatis.Common.Resources.IResourceLoader"/> implementation
            allows the creation of embeded assembly resource.
            </p>
            <p>
            URI must be format as assembly://'AssemblyName'/'NameSpace'/'ResourceName'.
            </p>
            </remarks>
            <example>
            iBATIS V1 
            "Apache.Ibatis.Common.Test.properties.xml, MyBatis.Common.Test"
            
            iBATIS V2
            assembly://Apache.Ibatis.Common.Test/Apache.Ibatis.Common.Test/properties.xml
            
            "CompanyName.ProductName.Maps.ISCard.xml, OctopusService"
            assembly://OctopusService/CompanyName.ProductName.Maps/ISCard.xml
            </example>
        </member>
        <member name="F:MyBatis.Common.Resources.AssemblyResourceLoader.Scheme">
            <summary>
            The resource is accessed as embedded resource. 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Resources.AssemblyResourceLoader.Create(System.Uri)">
            <summary>
            Return an <see cref="T:MyBatis.Common.Resources.IResource"/> handle for the
            specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            An appropriate <see cref="T:MyBatis.Common.Resources.IResource"/> handle.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Resources.AssemblyResourceLoader.Accept(System.Uri)">
            <summary>
            Check if this loader accepts the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>True or false</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.ObjectFactory">
            <summary>
            A factory to create objects 
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectFactory.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="allowCodeGeneration"></param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.ObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new factory instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new instance factory</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor">
            <summary>
            The <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor"/> class defines a field get accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:MyBatis.Common.Utilities.Objects.Members.IGet"/>  
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor"/> class
            for field get access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the field value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.Common.Utilities.Objects.Members.DelegateFieldGetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.Common.Utilities.Objects.DelegateFactory">
            <summary>
            A <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> implementation that builds object via DynamicMethod.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.DelegateFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.DelegateFactory.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Utilities.Objects.DelegateFactory"/> class.
            </summary>
            <param name="typeToCreate">The instance type to create.</param>
            <param name="argumentTypes">The types argument.</param>
        </member>
        <member name="M:MyBatis.Common.Utilities.Objects.DelegateFactory.EmitArgsIL(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>   
            Emit parameter IL for a method call.   
            </summary>   
            <param name="il">IL generator.</param>   
            <param name="argumentTypes">Arguments type defined for a the constructor.</param>   
        </member>
        <member name="T:MyBatis.Common.Logging.Impl.TraceLogger">
            <summary>
            Logger that sends output to the <see cref="T:System.Diagnostics.Trace"/> sub-system.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.TraceLogger.#ctor(System.String,MyBatis.Common.Logging.LogLevel,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new instance of the TraceLogger.
            </summary>
            <param name="logName">The name for this instance (usually the fully qualified class name).</param>
            <param name="logLevel">
            The logging threshold. Log messages created with a <see cref="T:MyBatis.Common.Logging.LogLevel"/>
            beneath this threshold will not be logged.
            </param>
            <param name="showDateTime">Include the current time in the log message </param>
            <param name="showLogName">Include the instance name in the log message</param>
            <param name="dateTimeFormat">The date and time format to use in the log message </param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.TraceLogger.Write(MyBatis.Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Responsible for assembling and writing the log message to the tracing sub-system.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.TraceLogger.IsLevelEnabled(MyBatis.Common.Logging.LogLevel)">
            <summary>
            Is the given log level currently enabled ?
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Logging.Impl.ConsoleOutLoggerFA">
            <summary>
            Factory for creating <see cref="T:MyBatis.Common.Logging.ILog"/> instances that write data to <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.ConsoleOutLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties" /> for use when the GetLogger methods are called.
            </summary>
            <param name="properties">Contains user supplied configuration information.</param>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.ConsoleOutLoggerFA.GetLogger(System.Type)">
            <summary>
            Get a ILog instance by <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Usually the <see cref="T:System.Type"/> of the current class.</param>
            <returns>An ILog instance that will write data to <see cref="P:System.Console.Out"/>.</returns>
        </member>
        <member name="M:MyBatis.Common.Logging.Impl.ConsoleOutLoggerFA.GetLogger(System.String)">
            <summary>
            Get a ILog instance by name.
            </summary>
            <param name="name">Usually a <see cref="T:System.Type"/>'s Name or FullName property.</param>
            <returns>An ILog instance that will write data to <see cref="P:System.Console.Out"/>.</returns>
        </member>
        <member name="T:MyBatis.Common.Data.DataSourceDeSerializer">
            <summary>
            Summary description for DataSourceDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Data.DataSourceDeSerializer.Deserialize(MyBatis.Common.Data.IDbProvider,System.Int32,MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserialize a DataSource object
            </summary>
            <param name="dbProvider">The db provider.</param>
            <param name="commandTimeOut">The command time out.</param>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.LikeConstraint">
            <summary>
            Checks to validate according to regex pattern
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.LikeConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Contracts.Constraints.LikeConstraint"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.LikeConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified obj].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified obj]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Configuration.MutableConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBatis.Common.Configuration.MutableConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:MyBatis.Common.Configuration.MutableConfiguration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:MyBatis.Common.Configuration.MutableConfiguration.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MyBatis.Common.Configuration.MutableConfiguration.CreateAttribute(System.String,System.String)">
            <summary>
            Create an attributes the specified name, value on the <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>The <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/></returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.MutableConfiguration.CreateAttributes(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create attributes on the <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/>.
            </summary>
            <param name="attr">The Attributes.</param>
            <returns>The <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/></returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.MutableConfiguration.CreateChild(System.String)">
            <summary>
            Creates the child on the <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/>.
            </summary>
            <param name="name">The name.</param>
            <returns>The <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/></returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.MutableConfiguration.CreateChild(System.String,System.String)">
            <summary>
            Creates the child on the <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>The <see cref="T:MyBatis.Common.Configuration.MutableConfiguration"/></returns>
        </member>
        <member name="P:MyBatis.Common.Configuration.MutableConfiguration.Value">
            <summary>
            Gets the value of <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.
            </summary>
            <value>The Value of the <see cref="T:MyBatis.Common.Configuration.IConfiguration"/>.</value>
        </member>
        <member name="T:MyBatis.Common.Configuration.ConfigurationUtils">
            <summary>
             Various utility methods relating to attribute configuration reading.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationUtils.GetMandatoryStringAttribute(MyBatis.Common.Configuration.IConfiguration,System.String)">
            <summary>
            Gets the string value of the attribute with the specified name.
            </summary>
            <param name="config">The config.</param>
            <param name="name">The key</param>
            <returns>
            If the attribute exists, its value otherwise string.Empty
            </returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationUtils.GetStringAttribute(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Gets the string value of the attribute with the specified name.
            </summary>
            <param name="attributes">The list of attributes</param>
            <param name="name">The key</param>
            <returns>If the attribute exists, its value otherwise string.Empty</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationUtils.GetStringAttribute(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Gets the string value of the attribute with the specified name.
            </summary>
            <param name="attributes">The list of attributes</param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns>If the attribute exists its value otherwise the default value</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationUtils.GetByteAttribute(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Byte)">
            <summary>
            Gets the Byte value of the attribute with the specified name.
            </summary>
            <param name="attributes">The list of attributes</param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns>If the attribute exists its value otherwise the default value</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationUtils.GetIntAttribute(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            Gets the int value of the attribute with the specified name.
            </summary>
            <param name="attributes">The list of attributes</param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns>If the attribute exists its value otherwise the default value</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationUtils.GetLongAttribute(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int64)">
            <summary>
            Gets the long value of the attribute with the specified name.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="name">The name.</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns>If the attribute exists its value otherwise the default value</returns>
        </member>
        <member name="M:MyBatis.Common.Configuration.ConfigurationUtils.GetBooleanAttribute(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Gets the bool value of the attribute with the specified name.
            </summary>
            <param name="attributes">The list of attributes</param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns>If the attribute exists its value otherwise the default value</returns>
        </member>
        <member name="T:MyBatis.Common.Utilities.TypesResolver.TypeRegistry">
            <summary> 
            Provides access to a central registry of aliased <see cref="T:System.Type"/>s.
            </summary>
            <remarks>
            <p>
            Simplifies configuration by allowing aliases to be used instead of
            fully qualified type names.
            </p>
            <p>
            Comes 'pre-loaded' with a number of convenience alias' for the more
            common types; an example would be the '<c>int</c>' (or '<c>Integer</c>'
            for Visual Basic.NET developers) alias for the <see cref="T:System.Int32"/>
            type.
            </p>
            </remarks>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.ArrayListAlias1">
            <summary>
            The alias around the 'list' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.ArrayListAlias2">
            <summary>
            Another alias around the 'list' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.BoolAlias">
            <summary>
            Another alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.BooleanAlias">
            <summary>
            The alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.ByteAlias">
            <summary>
            The alias around the 'byte' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.CharAlias">
            <summary>
            The alias around the 'char' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.DateAlias1">
            <summary>
            The alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.DateAlias2">
            <summary>
            Another alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.DecimalAlias">
            <summary>
            The alias around the 'decimal' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.DoubleAlias">
            <summary>
            The alias around the 'double' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.FloatAlias">
            <summary>
            The alias around the 'float' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.SingleAlias">
            <summary>
            Another alias around the 'float' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.GuidAlias">
            <summary>
            The alias around the 'guid' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.HashtableAlias1">
            <summary>
            The alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.HashtableAlias2">
            <summary>
            Another alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.HashtableAlias3">
            <summary>
            Another alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.DataRowAlias1">
            <summary>
            The alias around the 'DataRow' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.DataRowAlias2">
            <summary>
            Another alias around the 'DataRow' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.DataRowAlias3">
            <summary>
            Another alias around the 'DataRow' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.Int16Alias1">
            <summary>
            The alias around the 'short' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.Int16Alias2">
            <summary>
            Another alias around the 'short' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.Int32Alias1">
            <summary>
            The alias around the 'int' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.Int32Alias2">
            <summary>
            Another alias around the 'int' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.Int32Alias3">
            <summary>
            Another alias around the 'int' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.Int64Alias1">
            <summary>
            The alias around the 'long' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.Int64Alias2">
            <summary>
            Another alias around the 'long' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.UInt16Alias1">
            <summary>
            The alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.UInt16Alias2">
            <summary>
            Another alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.UInt32Alias1">
            <summary>
            The alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.UInt32Alias2">
            <summary>
            Another alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.UInt64Alias1">
            <summary>
            The alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.UInt64Alias2">
            <summary>
            Another alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.SByteAlias">
            <summary>
            The alias around the 'SByte' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.StringAlias">
            <summary>
            The alias around the 'string' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.TimeSpanAlias">
            <summary>
            The alias around the 'TimeSpan' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableInt32Alias">
            <summary>
            The alias around the 'int?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableInt32ArrayAlias">
            <summary>
            The alias around the 'int?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableDateAlias1">
            <summary>
            The alias around the nullable 'DateTime' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableDateAlias2">
            <summary>
            Another alias around nullable the 'DateTime' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableDecimalAlias">
            <summary>
            The alias around the 'decimal?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableDecimalArrayAlias">
            <summary>
            The alias around the 'decimal?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableCharAlias">
            <summary>
            The alias around the 'char?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableCharArrayAlias">
            <summary>
            The alias around the 'char?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableInt64Alias">
            <summary>
            The alias around the 'long?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableInt64ArrayAlias">
            <summary>
            The alias around the 'long?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableInt16Alias">
            <summary>
            The alias around the 'short?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableInt16ArrayAlias">
            <summary>
            The alias around the 'short?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableUInt32Alias">
            <summary>
            The alias around the 'unsigned int?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableUInt64Alias">
            <summary>
            The alias around the 'unsigned long?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableUInt64ArrayAlias">
            <summary>
            The alias around the 'ulong?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableUInt32ArrayAlias">
            <summary>
            The alias around the 'uint?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableUInt16Alias">
            <summary>
            The alias around the 'unsigned short?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableUInt16ArrayAlias">
            <summary>
            The alias around the 'ushort?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableDoubleAlias">
            <summary>
            The alias around the 'double?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableDoubleArrayAlias">
            <summary>
            The alias around the 'double?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableFloatAlias">
            <summary>
            The alias around the 'float?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableFloatArrayAlias">
            <summary>
            The alias around the 'float?[]' array type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableBoolAlias">
            <summary>
            The alias around the 'bool?' type.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.NullableBoolArrayAlias">
            <summary>
            The alias around the 'bool?[]' array type.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:MyBatis.Common.Utilities.TypesResolver.TypeRegistry"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.Common.Utilities.TypesResolver.TypeRegistry"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.TypesResolver.TypeRegistry.ResolveType(System.String)">
            <summary> 
            Resolves the supplied <paramref name="alias"/> to a <see cref="T:System.Type"/>. 
            </summary> 
            <param name="alias">
            The alias to resolve.
            </param>
            <returns>
            The <see cref="T:System.Type"/> the supplied <paramref name="alias"/> was
            associated with, or <see lang="null"/> if no <see cref="T:System.Type"/> 
            was previously registered for the supplied <paramref name="alias"/>.
            </returns>
            <remarks>The alis name will be convert in lower character before the resolution.</remarks>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="alias"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="T:MyBatis.Common.Utilities.ConfigureHandler">
            <summary>
            Represents the method that handles calls from Configure.
            </summary>
            <remarks>
            obj is a null object in a DaoManager context.
            obj is the reconfigured sqlMap in a SqlMap context.
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Utilities.StateConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.StateConfig.FileName">
            <summary>
            Master Config File name.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.StateConfig.ConfigureHandler">
            <summary>
            Delegate called when a file is changed, use it to rebuild.
            </summary>
        </member>
        <member name="T:MyBatis.Common.Utilities.ConfigWatcherHandler">
            <summary>
            Class used to watch config files.
            </summary>
            <remarks>
            Uses the <see cref="T:System.IO.FileSystemWatcher"/> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for the specified time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher"/>
            change notifications arrive while the timer is waiting it
            is reset and waits again for the specified time to
            elapse.
            </remarks>
        </member>
        <member name="F:MyBatis.Common.Utilities.ConfigWatcherHandler.TIMEOUT_MILLISECONDS">
            <summary>
            The default amount of time to wait after receiving notification
            before reloading the config file.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.ConfigWatcherHandler._timer">
            <summary>
            The timer used to compress the notification events.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.ConfigWatcherHandler._filesToWatch">
            <summary>
            A list of configuration files to watch.
            </summary>
        </member>
        <member name="F:MyBatis.Common.Utilities.ConfigWatcherHandler._filesWatcher">
            <summary>
            The list of FileSystemWatcher.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.ConfigWatcherHandler.#ctor(System.Threading.TimerCallback,MyBatis.Common.Utilities.StateConfig)">
             <summary>
            -
             </summary>
             <param name="state">
             Represent the call context of the SqlMap or DaoManager ConfigureAndWatch method call.
             </param>
             <param name="onWhatchedFileChange"></param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ConfigWatcherHandler.AddFileToWatch(System.IO.FileInfo)">
            <summary>
            Add a file to be monitored.
            </summary>
            <param name="configFile"></param>
        </member>
        <member name="M:MyBatis.Common.Utilities.ConfigWatcherHandler.ClearFilesMonitored">
            <summary>
            Reset the list of files being monitored.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Utilities.ConfigWatcherHandler.ConfigWatcherHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:MyBatis.Common.Utilities.ConfigWatcherHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Utilities.ConfigWatcherHandler.ConfigWatcherHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="T:MyBatis.Common.Utilities.ConfigWatcherHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="T:MyBatis.Common.Logging.ConfigurationSectionHandler">
            <summary>
            Used in an application's configuration file (App.Config or Web.Config) to configure the logging subsystem.
            </summary>
            <remarks>
            <example>
            An example configuration section that writes IBatisNet messages to the Console using the built-in Console Logger.
            <code lang="XML" escaped="true">
            <configuration>
            	<configSections>
            		<sectionGroup name="iBATIS">
            			<section name="logging" type="MyBatis.Common.Logging.ConfigurationSectionHandler, MyBatis.Common" />
            		</sectionGroup>	
            	</configSections>
            	<iBATIS>
            		<logging>
            			<logFactoryAdapter type="MyBatis.Common.Logging.Impl.ConsoleOutLoggerFA, MyBatis.Common">
            				<arg key="showLogName" value="true" />
            				<arg key="showDataTime" value="true" />
            				<arg key="level" value="ALL" />
            				<arg key="dateTimeFormat" value="yyyy/MM/dd HH:mm:ss:SSS" />
            			</logFactoryAdapter>
            		</logging>
            	</iBATIS>
            </configuration>
            </code> 
            </example>
            <para>
            The following aliases are recognized for the type attribute of logFactoryAdapter: 
            </para>
            <list type="table">
            <item><term>CONSOLE</term><description>Alias for Apache.Ibatis.Common.Logging.Impl.ConsoleOutLoggerFA, MyBatis.Common</description></item>
            <item><term>TRACE</term><description>Alias for Apache.Ibatis.Common.Logging.Impl.TraceLoggerFA, MyBatis.Common</description></item>
            <item><term>NOOP</term><description>Alias Apache.Ibatis.Common.Logging.Impl.NoOpLoggerFA, MyBatis.Common</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MyBatis.Common.Logging.ConfigurationSectionHandler.ReadConfiguration(System.Xml.XmlNode)">
            <summary>
            Retrieves the <see cref="T:System.Type"/> of the logger the use by looking at the logFactoryAdapter element
            of the logging configuration element.
            </summary>
            <param name="section"></param>
            <returns>
            A <see cref="T:MyBatis.Common.Logging.LogSetting"/> object containing the specified type that implements 
            <see cref="T:MyBatis.Common.Logging.ILoggerFactoryAdapter"/> along with zero or more properties that will be 
            passed to the logger factory adapter's constructor as an <see cref="T:System.Collections.IDictionary"/>.
            </returns>
        </member>
        <member name="M:MyBatis.Common.Logging.ConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Verifies that the logFactoryAdapter element appears once in the configuration section.
            </summary>
            <param name="parent">The parent of the current item.</param>
            <param name="configContext">Additional information about the configuration process.</param>
            <param name="section">The configuration section to apply an XPath query too.</param>
            <returns>
            A <see cref="T:MyBatis.Common.Logging.LogSetting"/> object containing the specified logFactoryAdapter type
            along with user supplied configuration properties.
            </returns>
        </member>
        <member name="T:MyBatis.Common.Contracts.Constraints.AnythingConstraint">
            <summary>
            A constraint that always returns <code>true</code>.
            </summary>
        </member>
        <member name="M:MyBatis.Common.Contracts.Constraints.AnythingConstraint.IsSatisfiedBy(System.Object,MyBatis.Common.Contracts.AppendErrorMessage)">
            <summary>
            Determines whether [is satisfied by] [the specified actual].
            </summary>
            <param name="actual">The actual.</param>
            <param name="appendErrorMessage">The append error message.</param>
            <returns>
            	<c>true</c> if [is satisfied by] [the specified actual]; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
