<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyBatis.DataMapper</name>
    </assembly>
    <members>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler">
            <summary>
            TypeHandler for Nullable UInt64 Type
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler">
            <summary>
            Summary description for BaseTypeHandler.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.ITypeHandler">
            <summary>
            Summary description for ITypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandler.Equals(System.Object,System.String)">
            <summary>
             Compares two values (that this handler deals with) for equality
            </summary>
            <param name="obj">one of the objects</param>
            <param name="str">the other object as a String</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ITypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ITypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.Equals(System.Object,System.String)">
            <summary>
             Compares two values (that this handler deals with) for equality
            </summary>
            <param name="obj">one of the objects</param>
            <param name="str">the other object as a String</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.BaseTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler">
            <summary>
            TypeHandler for Nullable decimal Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
            <remarks>
            value decimal must be  in format ######.##
             where . is separator for decimal
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler">
            <summary>
            
            </summary>
            <remarks>System.TimeSpan is map to DbType.Int64 </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.DoubleTypeHandler">
            <summary>
            Description r閟um閑 de Double.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DoubleTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DoubleTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DoubleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DoubleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.DoubleTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Stores.WebSessionStore">
            <summary>
            Provides an implementation of <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            which relies on <c>HttpContext</c>. Suitable for web projects.
            This implementation will get the current session from the current 
            request.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Stores.AbstractSessionStore">
            <summary>
            Base class for session store
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Session.ISessionStore">
            <summary>
            Provides the contract for implementors who want to store session.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISessionStore.Store(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="P:MyBatis.DataMapper.Session.ISessionStore.CurrentSession">
            <summary>
            Get the current session
            </summary>
            <value>The current session.</value>
        </member>
        <member name="F:MyBatis.DataMapper.Session.Stores.AbstractSessionStore.sessionName">
            <summary>
            session name
            </summary>	    
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.AbstractSessionStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.Stores.AbstractSessionStore"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.AbstractSessionStore.Store(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.AbstractSessionStore.Dispose">
            <summary>
            Remove the local session from the storage.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Stores.AbstractSessionStore.CurrentSession">
            <summary>
            Get the local session
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.WebSessionStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.Stores.WebSessionStore"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.WebSessionStore.Store(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.WebSessionStore.Dispose">
            <summary>
            Remove the local session.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Stores.WebSessionStore.CurrentSession">
            <summary>
            Get the local session
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Stores.HybridWebThreadSessionStore">
            <summary>
            This implementation of <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>will first try 
            to get the currentrequest, and if not found, will use a thread local.
            </summary>
            <remarks>
            This is used for scenarios where most of the you need per request session, but you also does some work outside a 
            request (in a thread pool thread, for instance).
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.HybridWebThreadSessionStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.Stores.WebSessionStore"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.HybridWebThreadSessionStore.Store(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.HybridWebThreadSessionStore.Dispose">
            <summary>
            Remove the local session.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Stores.HybridWebThreadSessionStore.CurrentSession">
            <summary>
            Get the local session
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.LazyFactoryBuilder">
            <summary>
            Gets <see cref="T:MyBatis.DataMapper.Proxy.ILazyFactory"/> instance.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyFactoryBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Proxy.LazyFactoryBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyFactoryBuilder.Register(System.Type,System.String,MyBatis.DataMapper.Proxy.ILazyFactory)">
            <summary>
            Register (add) a lazy load Proxy for a type and member type
            </summary>
            <param name="type">The target type which contains the member proxyfied</param>
            <param name="memberName">The member name the proxy must emulate</param>
            <param name="factory">The <see cref="T:MyBatis.DataMapper.Proxy.ILazyFactory"/>.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyFactoryBuilder.GetLazyFactory(System.Type)">
            <summary>
            Get a ILazyLoadProxy for a type, member name
            </summary>
            <param name="type">The target type which contains the member proxyfied</param>
            <returns>Return the ILazyLoadProxy instance</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.ISqlChild">
            <summary>
            Summary description for ISqlChild.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ISqlTagHandler">
            <summary>
            Summary description for ISqlTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ISqlTagHandler.DoStartFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ISqlTagHandler.DoEndFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ISqlTagHandler.DoPrepend(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ISqlTagHandler.IsPostParseRequired">
            <summary>
            
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEqual">
            <summary>
            Represent an isNotEqual sql tag element.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Conditional">
            <summary>
            Summary description for Conditional.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.BaseTag">
            <summary>
            Summary description for BaseTag.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag">
            <summary>
            SqlTag is a children element of dynamic Sql element.
            SqlTag represent any binary unary/conditional element (like isEmpty, isNull, iEquall...) 
            or other element as isParameterPresent, isNotParameterPresent, iterate.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IDynamicParent">
            <summary>
            Summary description for DynamicParent.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IDynamicParent.AddChild(MyBatis.DataMapper.Model.Sql.Dynamic.ISqlChild)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag.GetChildrenEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag.AddChild(MyBatis.DataMapper.Model.Sql.Dynamic.ISqlChild)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag.Parent">
            <summary>
            Parent tag element
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag.Prepend">
            <summary>
            Prepend attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag.Handler">
            <summary>
            Handler for this sql tag
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag.IsPrependAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.BaseTag.BindName">
            <summary>
            Property attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.BaseTag.Property">
            <summary>
            Property attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Conditional.CompareProperty">
            <summary>
            CompareProperty attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Conditional.CompareValue">
            <summary>
            CompareValue attribute
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEqual.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap">
            <summary>
            This is a grouping of ResultMapping objects used to map results back to objects
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.IResultMapEvents">
            <summary>
            Defines the contract for events generated during <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> analyse.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.IResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.IResultMap.SetValueOfProperty(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.IResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            Resolves the sub map.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <example>GetProduct</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties name.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.KeyPropertyNames">
            <summary>
            The Key Properties name (used for resolved circular reference).
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.KeysProperties">
            <summary>
            The Keys Properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.IResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement">
            <summary>
            Summary description for UpdateMappedStatement.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.MappedStatement">
            <summary>
            Base implementation of <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport">
            <summary>
            Base implementation for <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatementEvents"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.IMappedStatementEvents">
            <summary>
            Defines the contract for events generated during statement execution.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.RaisePreEvent(System.Object,System.Object)">
            <summary>
            Raises the pre event.
            </summary>
            <param name="key">The key.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>Returns is used as the parameter object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.RaisePostEvent``1(System.Object,System.Object,``0,System.Boolean)">
            <summary>
            Raises the post event.
            </summary>
            <param name="key">The key.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="resultObject">The result object.</param>
            <param name="cacheHit">Did the ResultObject come from cache?</param>
            <returns>Returns is used as the result object</returns>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.PreInsert">
            <summary>
            Will handle an <see cref="T:MyBatis.DataMapper.Model.Events.PreStatementEventArgs"/>. 
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.PreSelect">
            <summary>
            Will handle an <see cref="T:MyBatis.DataMapper.Model.Events.PreStatementEventArgs"/>. 
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.PreUpdateOrDelete">
            <summary>
            Will handle an <see cref="T:MyBatis.DataMapper.Model.Events.PreStatementEventArgs"/>. 
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.PostInsert">
            <summary>
            Will handle an <see cref="T:MyBatis.DataMapper.Model.Events.PostStatementEventArgs"/>. 
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.PostSelect">
            <summary>
            Will handle an <see cref="T:MyBatis.DataMapper.Model.Events.PostStatementEventArgs"/>. 
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.MappedStatementEventSupport.PostUpdateOrDelete">
            <summary>
            Will handle an <see cref="T:MyBatis.DataMapper.Model.Events.PostStatementEventArgs"/>. 
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.IMappedStatement">
            <summary>
            Summary description for IMappedStatement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForMap(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForDictionary``2(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForDictionary``2(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method</param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteUpdate(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Execute an update statement. Also used for delete statement.
            Return the number of row effected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The number of row effected.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteInsert(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Execute an insert statement. Fill the parameter object with 
            the ouput parameters if any, also could return the insert generated key
            </summary>
            <param name="session">The session</param>
            <param name="parameterObject">The parameter object used to fill the statement.</param>
            <returns>Can return the insert generated key.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.IList)">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. 
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList``1(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList``1(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. 
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForObject(MyBatis.DataMapper.Session.ISession,System.Object,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForObject``1(MyBatis.DataMapper.Session.ISession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForMapWithRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate"></param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForRowDelegate``1(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForDataTable(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes an SQL statement that returns DataTable.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.IMappedStatement.Executed">
            <summary>
            Event launch on exceute query
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.IMappedStatement.PreparedCommand">
            <summary>
            The IPreparedCommand to use
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.IMappedStatement.Id">
            <summary>
            Name used to identify the MappedStatement amongst the others.
            This the name of the SQL statment by default.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.IMappedStatement.Statement">
            <summary>
            The SQL statment used by this MappedStatement
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.IMappedStatement.ModelStore">
            <summary>
            The <see cref="T:MyBatis.DataMapper.Model.IModelStore"/> used by this MappedStatement
            </summary>
            <value>The model store.</value>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForDataTable(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes an SQL statement that returns DataTable.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForDataTable(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Runs the query for for data table.
            </summary>
            <param name="request">The request.</param>
            <param name="session">The session.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.#ctor(MyBatis.DataMapper.Model.IModelStore,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.MappedStatement"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RetrieveOutputParameters(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,System.Data.IDbCommand,System.Object)">
            <summary>
            Retrieve the output parameter and map them on the result object.
            This routine is only use is you specified a ParameterMap and some output attribute
            or if you use a store procedure with output parameter...
            </summary>
            <param name="request"></param>
            <param name="session">The current session.</param>
            <param name="result">The result object.</param>
            <param name="command">The command sql.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteDelayedLoad(MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RaiseExecuteEvent">
            <summary>
            Raise an event ExecuteEventArgs
            (Used when a query is executed)
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.Execute``1(System.Object,System.Object,MyBatis.DataMapper.Session.ISession,System.Object,System.Func{MyBatis.DataMapper.Scope.RequestScope,System.Object,``0})">
            <summary>
            Ensures all the related Execute methods are run in a consistent manner with pre and post events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteUpdate(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Execute an update statement. Also used for delete statement.
            Return the number of row effected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The number of row effected.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteInsert(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Execute an insert statement. Fill the parameter object with 
            the ouput parameters if any, also could return the insert generated key
            </summary>
            <param name="session">The session</param>
            <param name="parameterObject">The parameter object used to fill the statement.</param>
            <returns>Can return the insert generated key.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForMap(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForDictionary``2(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForDictionary``2(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForMapWithRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForMap(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="request">The request scope.</param>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForMapWithRowDelegate method</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForDictionary``2(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="request">The request scope.</param>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForMapWithRowDelegate method</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForRowDelegate``1(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. 
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.IList)">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList``1(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. 
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList``1(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForList(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.IList,MyBatis.DataMapper.RowDelegate)">
            <summary>
            Executes the SQL and retuns a List of result objects.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForList``1(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.Generic.IList{``0},MyBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Executes the SQL and retuns a List of result objects.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForObject(MyBatis.DataMapper.Session.ISession,System.Object,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForObject``1(MyBatis.DataMapper.Session.ISession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForObject``1(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.MappedStatement.Executed">
            <summary>
            Event launch on execute query
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.MappedStatement.PreparedCommand">
            <summary>
            The IPreparedCommand to use
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.MappedStatement.Id">
            <summary>
            Name used to identify the MappedStatement amongst the others.
            This the name of the SQL statement by default.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.MappedStatement.Statement">
            <summary>
            The SQL statment used by this MappedStatement
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.MappedStatement.ModelStore">
            <summary>
            The <see cref="T:MyBatis.DataMapper.Model.IModelStore"/> used by this MappedStatement
            </summary>
            <value>The model store.</value>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.#ctor(MyBatis.DataMapper.Model.IModelStore,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForMap(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="keyProperty"></param>
            <param name="valueProperty"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteInsert(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="rowDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForMapWithRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForObject(MyBatis.DataMapper.Session.ISession,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Collections.IList"/> <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> contract to set value object on <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
            Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The ResultProperty.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an <see cref="T:System.Collections.IList"/> property
             on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The current <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.InsertMappedStatement">
            <summary>
            Summary description for InsertMappedStatement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.#ctor(MyBatis.DataMapper.Model.IModelStore,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.InsertMappedStatement"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForMap(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="keyProperty"></param>
            <param name="valueProperty"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteUpdate(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="rowDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForMapWithRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForObject(MyBatis.DataMapper.Session.ISession,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.DefaultStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when no 'select' or
            'resultMapping' attribute exists on a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> contract to get the value of an argument constructor.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.DefaultStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Data.InMemoryDataReader">
            <summary>
            An implementation of <see cref="T:System.Data.IDataReader"/> that will copy the contents
            of the an open <see cref="T:System.Data.IDataReader"/> to an in-memory <see cref="T:MyBatis.DataMapper.Data.InMemoryDataReader"/> if the 
            session <see cref="!:IDbProvider"/> doesn't allow multiple open <see cref="T:System.Data.IDataReader"/> with
            the same <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.#ctor(System.Data.IDataReader)">
            <summary>
             Creates an InMemoryDataReader from a <see cref="T:System.Data.IDataReader"/>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> which holds the records from the Database.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.Close">
            <summary>
            Closes the IDataReader 0bject.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.Read">
            <summary>
            Advances the IDataReader to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the IDataReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="fieldIndex">The index of the field to find. </param>
            <returns>The object which will contain the field value upon return.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, 
            starting at the given buffer offset.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <param name="dataIndex">The index within the field from which to begin the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferIndex">The index for buffer to begin the read operation.</param>
            <param name="length">The number of bytes to read. </param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type information corresponding to the type of Object that would be returned from GetValue.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetDateTime(System.Int32)">
            <summary>
            Returns the value of the specified column as a DateTime object.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetOrdinal(System.String)">
            <summary>
            Returns the column ordinal, given the name of the column.
            </summary>
            <param name="colName">The name of the column. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the database type information for the specified field.
            </summary>
            <param name="fieldIndex">The index of the field to find.</param>
            <returns>The database type information for the specified field.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetFloat(System.Int32)">
            <summary>
            Returns the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetData(System.Int32)">
            <summary>
            Gets an IDataReader to be used when the field points to more remote structured data.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, 
            starting at the given buffer offset.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <param name="dataIndex">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferIndex">The index for buffer to begin the read operation. </param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.FieldCount">
            <summary>
            Indicates the number of fields within the current record. This property is read-only.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.CurrentResultSet">
            <summary>
            Gets the current result set.
            </summary>
            <value>The current result set.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet">
            <summary>
            Represent an in-memory result set
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
             Creates an in-memory ResultSet from a <see cref="T:System.Data.IDataReader"/>
            </summary>
            <param name="isMidstream">
            <c>true</c> if the <see cref="T:System.Data.IDataReader"/> is already positioned on the record
            to start reading from.
            </param>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> which holds the records from the Database.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.GetValue(System.Int32,System.Int32)">
            <summary>
            Get a column value in a row
            </summary>
            <param name="rowIndex">The row index</param>
            <param name="colIndex">The column index</param>
            <returns>The column value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the field.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <returns>The type of the field.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.GetName(System.Int32)">
            <summary>
            Gets the name of the field.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.GetOrdinal(System.String)">
            <summary>
            Gets the ordinal.
            </summary>
            <param name="colName">Name of the column.</param>
            <returns>The ordinal of the column</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the database type.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <returns>The name of the database type</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.GetValues(System.Int32,System.Object[])">
            <summary>
            Gets the values.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value>The number of columns in the current row.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Data.InMemoryDataReader.InMemoryResultSet.RecordCount">
            <summary>
            The number of record contained in the ResultSet.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.IDataExchange">
            <summary>
            Interface for exchanging data between a parameter map/result map and the related objects
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.IDataExchange.GetData(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.IDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.IDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.UpdateDeSerializer">
            <summary>
            Summary description for UpdateDeSerializer.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.BaseStatementDeSerializer">
            <summary>
            Base class for StatementDeserializer
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.BaseStatementDeSerializer.BaseDeserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a Statement object.
            </summary>
            <param name="modelStore"></param>
            <param name="config">The config.</param>
            <param name="configurationSetting">Default settings.</param>
            <returns></returns>
            <remarks>
            Updated By: Richard Beacroft
            Updated Date: 11\10\2013
            Description: configurationSetting can be null and therefore references to it have to assume that it could be null.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.BaseStatementDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a Statement object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.BaseStatementDeSerializer.ApplyNamespace(System.String,System.String)">
            <summary>
            Register under Statement Name or Fully Qualified Statement Name
            </summary>
            <param name="nameSpace">The name space.</param>
            <param name="id">An Identity</param>
            <returns>The new Identity</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.UpdateDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a <see cref="T:MyBatis.DataMapper.Model.Statements.Update"/> object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <param name="configurationSetting"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.ResultMapDeSerializer">
            <summary>
            Summary description for ResultMapDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ResultMapDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Configuration.WaitResultPropertyResolution,MyBatis.DataMapper.Configuration.WaitDiscriminatorResolution)">
            <summary>
            Deserializes the specified config.
            </summary>
            <param name="config">The config.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="waitResultPropertyResolution">The wait result property resolution delegate.</param>
            <param name="waitDiscriminatorResolution">The wait discriminator resolution.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ResultMapDeSerializer.GetConstructor(System.String,System.Type,System.String[])">
            <summary>
            Finds the constructor that takes the parameters.
            </summary>
            <param name="resultMapId">The result map id.</param>
            <param name="type">The <see cref="T:System.Type"/> to find the constructor in.</param>
            <param name="parametersName">The parameters name to use to find the appropriate constructor.</param>
            <returns>
            An <see cref="T:System.Reflection.ConstructorInfo"/> that can be used to create the type with
            the specified parameters.
            </returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">
            Thrown when no constructor with the correct signature can be found.
            </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ResultMapDeSerializer.BuildResultProperties(System.String,MyBatis.Common.Configuration.IConfiguration,System.Type,System.String,System.String,MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Configuration.WaitResultPropertyResolution)">
            <summary>
            Builds the result properties.
            </summary>
            <param name="resultMapId">The result map id.</param>
            <param name="resultMapConfig">The result map config.</param>
            <param name="resultClass">The result class.</param>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="waitResultPropertyResolution">The wait result property resolution.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ResultMapDeSerializer.BuildDiscriminator(MyBatis.Common.Configuration.IConfiguration,System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Configuration.WaitDiscriminatorResolution)">
            <summary>
            Builds the discriminator and his subMaps
            </summary>
            <param name="resultMapConfig">The result map config.</param>
            <param name="resultClass">The result class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="waitDiscriminatorResolution">The wait discriminator resolution.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsNotNullDeSerializer">
            <summary>
            Summary description for IsNotNullDeSerializer.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.BaseDynamicDeSerializer">
            <summary>
            Summary description for DynamicDeSerializer.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IDeSerializer">
            <summary>
            Summary description for IDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration.
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.BaseDynamicDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.BaseDynamicDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Dynamic"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotNullDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsNotNullDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotNullDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotNull"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.InsertDeSerializer">
            <summary>
            Summary description for InsertDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.InsertDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a <see cref="T:MyBatis.DataMapper.Model.Statements.Insert"/> object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <param name="configurationSetting"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.ISessionFactory">
            <summary>
            A factory for <c>ISession</c> instances.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISessionFactory.OpenSession(System.Data.IDbConnection,System.Boolean)">
            <summary>
            Open a <c>ISession</c> on the given connection
            </summary>
            <param name="conn">A connection provided by the application</param>
            <param name="autoClose">if set to <c>true</c> [auto close].</param>
            <returns>A session</returns>
            <remarks>
            The <c>ISession</c> is save in the <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISessionFactory.OpenSession">
            <summary>
            Create a database connection and open a <c>ISession</c> on it.
            </summary>
            <returns>A session</returns>
            <remarks>
            The <c>ISession</c> is save in the <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISessionFactory.Dispose">
            <summary>
            Remove the specified session from the <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.ISessionFactory.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ParameterMapping.InlineParemeterMapBuilder">
            <summary>
            Inline Paremeter MapBuilder
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.InlineParemeterMapBuilder.#ctor(MyBatis.DataMapper.Model.IModelStore)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ParameterMapping.InlineParemeterMapBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.InlineParemeterMapBuilder.BuildInlineParemeterMap(MyBatis.DataMapper.Model.Statements.IStatement,System.String,System.String@)">
            <summary>
            Build inline paremeterMap
            </summary>
            <param name="statement">The statement.</param>
            <param name="sqlCommandText">The SQL command text.</param>
            <param name="newSqlCommandText">The newsql command text.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Events.PreCreateEventArgs">
            <summary>
            Event lauchs before creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.PreCreateEventArgs.Parameters">
            <summary>
            Gets or sets the parameters used for create the instance 
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Events.PostStatementEventArgs">
            <summary>
            Base class for post <see cref="T:MyBatis.DataMapper.Model.Events.BaseStatementEventArgs"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Events.BaseStatementEventArgs">
            <summary>
            Base class for event statement
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.BaseStatementEventArgs.ParameterObject">
            <summary>
            Gets or sets the parameter object.
            </summary>
            <value>The parameter object.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.PostStatementEventArgs.ResultObject">
            <summary>
            Gets or sets the result object.
            </summary>
            <value>The result object.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.PostStatementEventArgs.CacheHit">
            <summary>
            Was the ResultObject populated from cache?
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Data.DBHelperParameterCache">
            <summary>
            DBHelperParameterCache provides functions to leverage a 
            static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.DiscoverSpParameterSet(MyBatis.DataMapper.Session.ISession,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of Parameters for a stored procedure
            </summary>
            <param name="session">The session.</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.InternalDiscoverSpParameterSet(MyBatis.DataMapper.Session.ISession,System.String,System.Boolean)">
            <summary>
            Discover at run time the appropriate set of Parameters for a stored procedure
            </summary>
            <param name="session">An IDalSession object</param>
            <param name="?">The ?.</param>
            <param name="spName">Name of the stored procedure.</param>
            <param name="includeReturnValueParameter">if set to <c>true</c> [include return value parameter].</param>
            <returns>The stored procedure parameters.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.DeriveParameters(MyBatis.Common.Data.IDbProvider,System.Data.IDbCommand)">
            <summary>
            Derives the parameters.
            </summary>
            <param name="provider">The provider.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.CloneParameters(System.Data.IDataParameter[])">
            <summary>
            Deep copy of cached IDataParameter array.
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an IDbConnection</param>
            <param name="commandText">the stored procedure name or SQL command</param>
            <param name="commandParameters">an array of IDataParameters to be cached</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.Clear">
            <summary>
            Clear the parameter cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for an IDbConnection</param>
            <param name="commandText">the stored procedure name or SQL command</param>
            <returns>an array of IDataParameters</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.GetSpParameterSet(MyBatis.DataMapper.Session.ISession,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <param name="session">The session.</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of IDataParameters</returns>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DBHelperParameterCache.GetSpParameterSet(MyBatis.DataMapper.Session.ISession,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <param name="session">The session.</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of IDataParameters</returns>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
        </member>
        <member name="T:MyBatis.DataMapper.DataMapper">
            <summary>
            The default implementation of the <see cref="T:MyBatis.DataMapper.IDataMapper"/>  
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.IDataMapper">
            <summary>
             Main interface the the dataMapper
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.Delete(System.String,System.Object)">
            <summary>
             Executes a Sql DELETE statement.
             Delete returns the number of rows effected.
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.Insert(System.String,System.Object)">
            <summary>
            Executes a Sql INSERT statement.
            Insert is a bit different from other update methods, as it
            provides facilities for returning the primary key of the
            newly inserted row (rather than the effected rows).  This
            functionality is of course optional.
            <p/>
            The parameter object is generally used to supply the input
            data for the INSERT values.
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns> The primary key of the newly inserted row.  
            This might be automatically generated by the RDBMS, 
            or selected from a sequence table or other source.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForDictionary(System.String,System.Object,System.String,System.String)">
             <summary>
             Alias to QueryForMap, .NET spirit.
              Feature idea by Ted Husted.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForDictionary(System.String,System.Object,System.String)">
            <summary>
             Alias to QueryForMap, .NET spirit.
             Feature idea by Ted Husted.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForList(System.String,System.Object,System.Collections.IList)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForList(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForMap(System.String,System.Object,System.String)">
            <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForMap(System.String,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForMapWithRowDelegate(System.String,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance to deal 
             with each row as it is processed.
             <p/>
              The parameter object is generally used to supply the input
             data for the WHERE clause parameter(s) of the SELECT statement.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForObject(System.String,System.Object,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An object of the type to be returned.</param>
            <returns>The single result object populated with the result set data.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForObject(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data 
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns> The single result object populated with the result set data.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryWithRowDelegate(System.String,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal 
            with each row as it is processed.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.Update(System.String,System.Object)">
            <summary>
            Executes a Sql UPDATE statement.
            Update can also be used for any other update statement type,
            such as inserts and deletes.  Update returns the number of
            rows effected.
            <p/>
            The parameter object is generally used to supply the input
            data for the UPDATE values as well as the WHERE clause parameter(s).
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForDictionary``2(System.String,System.Object,System.String)">
            <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
             <summary>
             Runs a query with a custom object that gets a chance to deal 
             with each row as it is processed.
             <p/>
              The parameter object is generally used to supply the input
             data for the WHERE clause parameter(s) of the SELECT statement.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method&gt;</param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForObject``1(System.String,System.Object,``0)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="instanceObject">An object of the type to be returned.</param>
            <returns>The single result object populated with the result set data.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForObject``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data 
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns> The single result object populated with the result set data.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForList``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForList``1(System.String,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryWithRowDelegate``1(System.String,System.Object,MyBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal 
            with each row as it is processed.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.IDataMapper.QueryForDataTable(System.String,System.Object)">
            <summary>
            Executes a SQL SELECT statement that returns  data 
            to populate a DataTable.
            If a resultMap is specified, the column name will be the result property name.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>A DataTable</returns>
        </member>
        <member name="T:MyBatis.DataMapper.IModelStoreAccessor">
            <summary>
            Provides access to the underlying <see cref="T:MyBatis.DataMapper.Model.IModelStore"/>
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.IModelStoreAccessor.ModelStore">
            <summary>
            Gets the model store.
            </summary>
            <value>The model store.</value>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.#ctor(MyBatis.DataMapper.Model.IModelStore)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.DataMapper"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.Insert(System.String,System.Object)">
            <summary>
            Executes a Sql INSERT statement.
            Insert is a bit different from other update methods, as it
            provides facilities for returning the primary key of the
            newly inserted row (rather than the effected rows).  This
            functionality is of course optional.
            <p/>
            The parameter object is generally used to supply the input
            data for the INSERT values.
            </summary>
            <param name="statementId">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>
            The primary key of the newly inserted row.
            This might be automatically generated by the RDBMS,
            or selected from a sequence table or other source.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForDictionary(System.String,System.Object,System.String,System.String)">
            <summary>
            Alias to QueryForMap, .NET spirit.
            Feature idea by Ted Husted.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <returns>
            A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.
            </returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForDictionary(System.String,System.Object,System.String)">
            <summary>
            Alias to QueryForMap, .NET spirit.
            Feature idea by Ted Husted.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>
            A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForList(System.String,System.Object,System.Collections.IList)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForList(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForMap(System.String,System.Object,System.String)">
            <summary>
            Executes the SQL and retuns all rows selected in a map that is keyed on the property named
            in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>
            A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForMap(System.String,System.Object,System.String,System.String)">
            <summary>
            Executes the SQL and retuns all rows selected in a map that is keyed on the property named
            in the keyProperty parameter.  The value at each key will be the value of the property specified
            in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <returns>
            A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.
            </returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForMapWithRowDelegate(System.String,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance to deal
            with each row as it is processed.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate">The row delegate.</param>
            <returns>
            A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.
            </returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForObject(System.String,System.Object,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An object of the type to be returned.</param>
            <returns>
            The single result object populated with the result set data.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForObject(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>
            The single result object populated with the result set data.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryWithRowDelegate(System.String,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal
            with each row as it is processed.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate">The row delegate.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.Update(System.String,System.Object)">
            <summary>
            Executes a Sql UPDATE statement.
            Update can also be used for any other update statement type,
            such as inserts and deletes.  Update returns the number of
            rows effected.
            <p/>
            The parameter object is generally used to supply the input
            data for the UPDATE values as well as the WHERE clause parameter(s).
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String)">
            <summary>
            Executes the SQL and retuns all rows selected in a map that is keyed on the property named
            in the keyProperty parameter.  The value at each key will be the value of the property specified
            in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <returns>
            A IDictionary of object containing the rows keyed by keyProperty.
            </returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForDictionary``2(System.String,System.Object,System.String)">
            <summary>
            Executes the SQL and retuns all rows selected in a map that is keyed on the property named
            in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>
            A IDictionary of object containing the rows keyed by keyProperty.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
            <summary>
            Runs a query with a custom object that gets a chance to deal
            with each row as it is processed.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method&gt;</param>
            <returns>
            A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.
            </returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForObject``1(System.String,System.Object,``0)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="instanceObject">An object of the type to be returned.</param>
            <returns>
            The single result object populated with the result set data.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForObject``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>
            The single result object populated with the result set data.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForList``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForList``1(System.String,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryWithRowDelegate``1(System.String,System.Object,MyBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal
            with each row as it is processed.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate">The row delegate.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.Delete(System.String,System.Object)">
            <summary>
            Executes a Sql DELETE statement.
            Delete returns the number of rows effected.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataMapper.QueryForDataTable(System.String,System.Object)">
            <summary>
            Executes a SQL SELECT statement that returns  data
            to populate a DataTable.
            If a resultMap is specified, the column name will be the result property name.
            </summary>
            <param name="statementId">The statement id.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>A DataTable</returns>
        </member>
        <member name="P:MyBatis.DataMapper.DataMapper.MyBatis#DataMapper#IModelStoreAccessor#ModelStore">
            <summary>
            Gets the <see cref="T:MyBatis.DataMapper.Model.IModelStore"/>
            </summary>
            <value>The model store.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.DefaultModelBuilder">
            <summary>
            Default implementation of the <see cref="T:MyBatis.DataMapper.Model.IModelBuilder"/> contract. 
            </summary>
            <summary>
            This implementation of <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>, builds all statement.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.IModelBuilder">
            <summary>
            The contract used by the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/> to build
            all the iBATIS core model (statement, alias, resultMap, parameterMap, dataSource)
            from an <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/> 
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelBuilder.BuildModel(MyBatis.DataMapper.Configuration.ConfigurationSetting,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the the iBATIS core model (statement, alias, resultMap, parameterMap, dataSource)
            from an <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/> and store all the refrences in an <see cref="T:MyBatis.DataMapper.Model.IModelStore"/> .
            </summary>
            <param name="configurationSetting">The configuration setting.</param>
            <param name="store">The configurationS store.</param>
            <returns>The model store</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildTypeAlias(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the type alias.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildCacheModels(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the cache model.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.GetProperties(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Gets the cacheModel properties.
            </summary>
            <param name="cacheModelConfiguration">The cache model configuration.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildProviders(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the providers.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildParameterMaps(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the parameter maps.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildParameterProperties(MyBatis.DataMapper.Model.ParameterMapping.ParameterMap,MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Builds the parameter properties.
            </summary>
            <param name="parameterMap">The parameter map.</param>
            <param name="parameterMapConfig">The parameter map config.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildTypeHandlers(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the type handlers.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildResultMaps(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the result maps.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.#ctor(MyBatis.DataMapper.Model.IModelStore)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.DefaultModelBuilder"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildModel(MyBatis.DataMapper.Configuration.ConfigurationSetting,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the the iBATIS core model (statement, alias, resultMap, parameterMap, dataSource)
            from an <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/> and store all the refrences in an <see cref="T:MyBatis.DataMapper.Model.IModelStore"/> .
            </summary>
            <param name="configurationSetting">The configuration setting.</param>
            <param name="store">The configuration store.</param>
            <returns>The model store</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.WaitResultPropertyResolution(MyBatis.DataMapper.Model.ResultMapping.ResultProperty)">
            <summary>
            Stores ResultProperty from which the NestedResultMap property must be resolved
            Delay resolution until all the ResultMap are processed.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.WaitDiscriminatorResolution(MyBatis.DataMapper.Model.ResultMapping.Discriminator)">
            <summary>
            Stores Discriminator from which the subMaps property must be resolved
            Delay resolution until all the ResultMap are processed.
            ///
            </summary>
            <param name="discriminator">The discriminator.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.ApplyNamespace(System.String,System.String)">
            <summary>
            Register under Statement Name or Fully Qualified Statement Name
            </summary>
            <param name="nameSpace">The name space.</param>
            <param name="id">An Identity</param>
            <returns>The new Identity</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.LoadSetting(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Loads the setting.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildMappedStatements(MyBatis.DataMapper.Configuration.IConfigurationStore,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Builds the mapped statements.
            </summary>
            <param name="store">The store.</param>
            <param name="configurationSetting"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildCachingStatement(MyBatis.DataMapper.Model.Statements.IStatement,MyBatis.DataMapper.MappedStatements.MappedStatement)">
            <summary>
            Builds a Mapped Statement for a statement.
            </summary>
            <param name="statement">The statement.</param>
            <param name="mappedStatement">The mapped statement.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildStatement(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Builds a <see cref="T:MyBatis.DataMapper.Model.Statements.Statement"/> for a statement configuration.
            </summary>
            <param name="statementConfig">The statement config.</param>
            <param name="configurationSetting"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildInsert(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Builds an <see cref="T:MyBatis.DataMapper.Model.Statements.Insert"/> for a insert configuration.
            </summary>
            <param name="statementConfig">The statement config.</param>
            <param name="configurationSetting"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildUpdate(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Builds an <see cref="T:MyBatis.DataMapper.Model.Statements.Statement"/> for a statement configuration.
            </summary>
            <param name="statementConfig">The statement config.</param>
            <param name="configurationSetting"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildDelete(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Builds an <see cref="T:MyBatis.DataMapper.Model.Statements.Delete"/> for a delete configuration.
            </summary>
            <param name="statementConfig">The statement config.</param>
            <param name="configurationSetting"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildSelect(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Builds an <see cref="T:MyBatis.DataMapper.Model.Statements.Select"/> for a select configuration.
            </summary>
            <param name="statementConfig">The statement config.</param>
            <param name="configurationSetting"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildProcedure(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Builds an <see cref="T:MyBatis.DataMapper.Model.Statements.Procedure"/> for a procedure configuration.
            </summary>
            <param name="statementConfig">The statement config.</param>
            <param name="configurationSetting"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.ProcessSqlStatement(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Process the Sql cpmmand text statement (Build ISql)
            </summary>
            <param name="statementConfiguration">The statement configuration.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.ParseDynamicTags(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IDynamicParent,System.Text.StringBuilder,System.Boolean,System.Boolean,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Parse dynamic tags
            </summary>
            <param name="statementConfig">The statement config.</param>
            <param name="dynamic">The dynamic.</param>
            <param name="sqlBuffer">The SQL buffer.</param>
            <param name="isDynamic">if set to <c>true</c> [is dynamic].</param>
            <param name="postParseRequired">if set to <c>true</c> [post parse required].</param>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultModelBuilder.BuildDataSource(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Builds the data source model.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor">
            <summary>
            Analyse XML mapping file and import their configurations in the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor">
            <summary>
            Base class for XmlProcessor
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor.RegisterElementHandler(System.String,MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlTagHandler)">
            <summary>
            Registers the element handler.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor.RegisterElementHandlers">
            <summary>
            Registers the element handlers.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor.Process(System.Xml.XmlTextReader,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor.ProcessTextElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the text element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.BaseXmlProcessor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessTextElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the text element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessResultMapElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the result map element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessResultElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the result element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessDefaultElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the discriminator/default element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessCaseElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the discriminator/case element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessCacheModelElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes a cache model element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessIncludeElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the Include element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessStatementElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the statement element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessSqlElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the Sql element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessFlushIntervallElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the flush intervall element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessDiscriminatorElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the discriminator element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessFlushOnExecuteElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the flush on execute element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.RegisterElementHandlers">
            <summary>
            Registers the element handlers.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessSqlMapElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the SQL map element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessTypeAliasElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the type alias element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessPropertyElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the property element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ApplyNamespace(System.String)">
            <summary>
            Register under Name or Fully Qualified Statement Name
            </summary>
            <param name="ids">The Identities</param>
            <returns>The new Identity</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessParameterMapElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes a parameter map element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessConstructorElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the constructor element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessParameterElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the parameter element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessDynamicElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the dynamic elements.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlMappingProcessor.ProcessArgumentElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the argument element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.AbstractInterpreter">
            <summary>
            Provides common methods for those who wants 
            to implement <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter">
            <summary>
            <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter"/> is reponsible for translating the DataMapper configuration 
            from what is being read to what the IConfigurationEngine expects
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter.ProcessResource(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter.Resource">
            <summary>
            Exposes the reference to <see cref="T:MyBatis.Common.Resources.IResource"/>
            which the interpreter is likely to hold
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.AbstractInterpreter.#ctor(MyBatis.Common.Resources.IResource)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.AbstractInterpreter"/> class
            from an The <see cref="T:MyBatis.Common.Resources.IResource"/>.
            </summary>
            <param name="source">The <see cref="T:MyBatis.Common.Resources.IResource"/>.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.AbstractInterpreter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.AbstractInterpreter"/> class
            from a file path.
            </summary>
            <param name="fileName">The filename.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.AbstractInterpreter.ProcessResource(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.AbstractInterpreter.Resource">
            <summary>
            Exposes the reference to <see cref="T:MyBatis.Common.Resources.IResource"/>
            which the interpreter is likely to hold
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind" -->
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind.Name">
            <summary>
            Name attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind.Value">
            <summary>
            Value attribute
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.ParameterMapExpression">
            <summary>
            Handles fluent configuration for ParameterMap childs
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterMapExpression.#ctor(MyBatis.DataMapper.Configuration.Module.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ParameterMapExpression"/> class.
            </summary>
            <param name="builder">The module builder.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterMapExpression.Extends(System.String)">
            <summary>
            Extendses the specified parameter map.
            </summary>
            <param name="extend">The extend id.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterMapExpression.MappingMember(System.String)">
            <summary>
            Mappings to the specified Parameter.
            </summary>
            <param name="id">The name.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.ITypeHandlerCallback">
            <summary>
            A simple interface for implementing custom type handlers.
            <p/>
            Using this interface, you can implement a type handler that
            will perform customized processing before parameters are set
            on a IDbCommand and after values are retrieved from
            a IDataReader.  Using a custom type handler you can extend
            the framework to handle types that are not supported, or
            handle supported types in a different way.  For example,
            you might use a custom type handler to implement proprietary
            BLOB support (e.g. Oracle), or you might use it to handle
            booleans using "Y" and "N" instead of the more typical 0/1.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.SetParameter(MyBatis.DataMapper.TypeHandlers.IParameterSetter,System.Object)">
            <summary>
            Performs processing on a value before it is used to set
            the parameter of a IDbCommand.
            </summary>
            <param name="setter">The interface for setting the value on the IDbCommand.</param>
            <param name="parameter">The value to be set</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.GetResult(MyBatis.DataMapper.TypeHandlers.IResultGetter)">
            <summary>
            Performs processing on a value before after it has been retrieved
            from a IDataReader.
            </summary>
            <param name="getter">The interface for getting the value from the IDataReader.</param>
            <returns>The processed value.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.ValueOf(System.String)">
            <summary>
            Casts the string representation of a value into a type recognized by
            this type handler.  This method is used to translate nullValue values
            into types that can be appropriately compared.  If your custom type handler
            cannot support nullValues, or if there is no reasonable string representation
            for this type (e.g. File type), you can simply return the String representation
            as it was passed in.  It is not recommended to return null, unless null was passed
            in.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.NullValue">
            <summary>
            The null value for this type
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.DecimalTypeHandler">
            <summary>
            DecimalTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DecimalTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DecimalTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DecimalTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
            <remarks>
            value decimal must be  in format ######.##
            where . is separator for decimal
            </remarks> 
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DecimalTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.DecimalTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.LazyListGenericFactory">
            <summary>
               /// Implementation of <see cref="T:MyBatis.DataMapper.Proxy.ILazyFactory"/> to create proxy for an generic IList element.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.ILazyFactory">
            <summary>
            Contract of an <see cref="T:MyBatis.DataMapper.Proxy.ILazyFactory"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.ILazyFactory.CreateProxy(MyBatis.DataMapper.IDataMapper,MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,MyBatis.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Create a new proxy instance.
            </summary>
            <param name="dataMapper">The data mapper.</param>
            <param name="mappedStatement">The mapped statement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
            <returns>Returns a new proxy.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGenericFactory.CreateProxy(MyBatis.DataMapper.IDataMapper,MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,MyBatis.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Create a new proxy instance.
            </summary>
            <param name="dataMapper">The data mapper.</param>
            <param name="mappedStatement">The mapped statement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
            <returns>Returns a new proxy.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext">
            <summary>
            Summary description for IterateContext.
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dncscol/html/csharp01212002.asp
            http://www.microsoft.com/mspress/books/sampchap/6173.asp
            http://www.dur.ac.uk/barry.cornelius/java/a.taste.of.csharp/onefile/
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.Reset">
            <summary>
            Sets the enumerator to its initial position,
             which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.MoveNext">
             <summary>
             Advances the enumerator to the next element of the collection.
             </summary>
             <returns>
             True if the enumerator was successfully advanced to the next element;
             False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="F:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.IsCompleted">
            <summary>
            Updated By: Richard Beacroft
            Updated Date: 11\10\2013
            Description: This is used to determine when all items within an iteration has completed.
            The "iterate" tag handler has been re-worked to ensure we read the next iterate context item
            before the child tag elements are processed.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.Remove">
            <summary>
            Removes from the underlying collection the last element returned by the iterator.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.Index">
            <summary>
            Gets the index of the current element in the collection.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.IsFirst">
            <summary>
            Return true if the current element is the first.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.IsLast">
            <summary>
             Return true if the current element is the last.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateContext.HasNext">
            <summary>
            Returns true if the iteration has more elements. (In other words, returns true
            if next would return an element rather than throwing an exception.)
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler">
            <summary>
            Summary description for IsNotParameterPresentTagHandler.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsParameterPresentTagHandler">
            <summary>
            Summary description for IsParameterPresentTagHandler.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler">
            <summary>
            Description r閟um閑 de ConditionalTagHandler.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler">
            <summary>
            Description r閟um閑 de BaseTagHandler.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.SKIP_BODY">
            <summary>
            BODY TAG
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.INCLUDE_BODY">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.REPEAT_BODY">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.DoStartFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.DoEndFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.DoPrepend(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.AccessorFactory">
            <summary>
            The factory which build <see cref="T:MyBatis.Common.Utilities.Objects.Members.IAccessor"/>
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BaseTagHandler.IsPostParseRequired">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.NOT_COMPARABLE">
             <summary>
            
             </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.DoEndFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <param name="bodyContent"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.DoStartFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.CompareValues(System.Type,System.Object,System.Object)">
             <summary>
            
             </summary>
             <param name="type"></param>
             <param name="value1"></param>
             <param name="value2"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.ConvertValue(System.Type,System.String)">
             <summary>
            
             </summary>
             <param name="type"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.Compare(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="sqlTag"></param>
             <param name="parameterObject"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.GetMemberComparePropertyValue(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.BaseTag,System.Object)">
            <summary>
            This class is responsible for getting the current iterate item object within an iteration. i.e. The compare property name starts with "[]."
            We do this by navigating up through the parent nodes to determine which of them are iterate elements.
            Once found we get the current iteration context item.
            If "[]." is not specified, the original approach is used of reflecting the parameterObject to the reflection path specified in the compareProperty
            </summary>
            <param name="ctx"></param>
            <param name="baseTag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
            <remarks>
            Created By: Richard Beacroft
            Created Date: 11\10\2013
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler.GetMemberPropertyValue(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.BaseTag,System.Object)">
            <summary>
            This class is responsible for getting the current iterate item object within an iteration. i.e. The property name starts with "[]."
            We do this by navigating up through the parent nodes to determine which of them are iterate elements.
            Once found we get the current iteration context item.
            If "[]." is not specified, the original approach is used of reflecting the parameterObject to the reflection path specified in the property
            </summary>
            <param name="ctx"></param>
            <param name="baseTag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
            <remarks>
            Created By: Richard Beacroft
            Created Date: 11\10\2013
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsParameterPresentTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsParameterPresentTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsParameterPresentTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNull">
            <summary>
            Represent an isNull sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNull.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Dynamic">
            <summary>
            Summary description for DynamicTag.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Dynamic.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamic"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Alias.TypeAlias">
            <summary>
            Represent a type alias
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Alias.TypeAlias.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Alias.TypeAlias"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Alias.TypeAlias.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Alias.TypeAlias"/> class.
            </summary>
            <param name="alias">The alias.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Alias.TypeAlias.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Alias.TypeAlias.Id">
            <summary>
            Gets the alias identifier.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Alias.TypeAlias.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy">
            <summary>
            Delegates on the <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy"/>  or on the 
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.GroupByStrategy"/> implementation if a grouBy attribute is specify on the resultMap tag.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> contract to process the <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'resultMapping' attribute exists
            on a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.BaseStrategy">
            <summary>
            BaseStrategy.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.MappedStatements.BaseStrategy.SKIP">
            <summary>
            Used by N+1 Select solution
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.BaseStrategy.GetUniqueKey(MyBatis.DataMapper.Model.ResultMapping.IResultMap,System.Data.IDataReader)">
            <summary>
            Calculte a unique key which identify the resukt object build by this <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/>
            </summary>
            <param name="resultMap"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.BaseStrategy.FillObjectWithReaderAndResultMap(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader,MyBatis.DataMapper.Model.ResultMapping.IResultMap,System.Object@)">
            <summary>
            Fills the object with reader and result map.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultMap">The result map.</param>
            <param name="resultObject">The result object.</param>
            <returns>Indicates if we have found a row.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
            Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
            when a 'resultMapping' attribute exists
            on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The ResultProperty.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.GenericListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query generic list.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> contract to excute a 'select' <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>
            after the process of the main <see cref="T:System.Data.IDataReader"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy.Execute(MyBatis.DataMapper.MappedStatements.PostBindind,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.GenericListStrategy.Execute(MyBatis.DataMapper.MappedStatements.PostBindind,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectGenericListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on an <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/> and the object property is 
            different from an <see cref="T:System.Array"/> or an <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectGenericListStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Transaction.DefaultTransactionManager">
            <summary>
            Default implementation of the <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransactionManager"/> interface. 
            Defines the methods to manage transaction boundaries. 
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Transaction.ITransactionManager">
            <summary>
            The <c>TransactionManager</c> interface defines the methods to manage transaction boundaries. 
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransactionManager.BeginTransaction(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Begin a transaction and return the associated <c>ITransaction</c> instance
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransactionManager.BeginTransaction(MyBatis.DataMapper.Session.ISession,System.Data.IsolationLevel)">
            <summary>
            Begin a transaction with the specified isolation level and return
            the associated <c>ITransaction</c> instance
            </summary>
            <param name="session"></param>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.DefaultTransactionManager.#ctor(MyBatis.DataMapper.Session.Transaction.ITransactionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.Transaction.DefaultTransactionManager"/> class.
            </summary>
            <param name="transactionFactory">The transaction factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.DefaultTransactionManager.BeginTransaction(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Begin a transaction and return the associated <c>ITransaction</c> instance
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.DefaultTransactionManager.BeginTransaction(MyBatis.DataMapper.Session.ISession,System.Data.IsolationLevel)">
            <summary>
            Begin a transaction with the specified isolation level and return
            the associated <c>ITransaction</c> instance
            </summary>
            <param name="session"></param>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.ModuleBuilder">
            <summary>
            Handles fluent configuration for TypeHandler element
            </summary>
            <summary>
            Handles fluent configuration for ParameterMap
            </summary>
            <summary>
            Handles fluent configuration for ResultMap
            </summary>
            <summary>
            Used to incrementally build <see cref="T:MyBatis.Common.Configuration.IConfiguration"/> element.
            </summary>
            <summary>
            Handles fluent configuration for TypeAlias element
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.RegisterTypeHandler``2">
            <summary>
            Registers a TypeHandler.
            </summary>
            <returns>The TypeHandler identifiant</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.RegisterTypeHandler``2(System.String)">
            <summary>
            Registers a TypeHandler.
            </summary>
            <param name="dbType">Type of the db.</param>
            <returns>The TypeHandler identifiant</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.RegisterParameterMap``1(System.String)">
            <summary>
            Registers a ParameterMap.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.RegisterResultMap``1(System.String)">
            <summary>
            Registers a ResultMap.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ModuleBuilder"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ModuleBuilder"/> class.
            </summary>
            <param name="nameSpace">The name space.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.Build(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Create new <see cref="T:MyBatis.Common.Configuration.IConfiguration"/> elements with the registration.
            </summary>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.ApplyNamespace(System.String)">
            <summary>
            Register under Name or Fully Qualified Statement Name
            </summary>
            <param name="ids">The Identities</param>
            <returns>The new Identity</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.RegisterConfiguration">
            <summary>
            Registers the current configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.RegisterAlias``1(System.String)">
            <summary>
            Registers a type alias.
            </summary>
            <param name="id">The id.</param>
            <returns>The alias identifiant</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.RegisterAlias``1">
            <summary>
            Registers a type alias.
            The class name will be the id.
            </summary>
            <returns>The alias identifiant</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Module.ModuleBuilder.CurrentConfiguration">
            <summary>
            Gets or sets the current configuration.
            </summary>
            <value>The current configuration.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.ResultMapExpression">
            <summary>
            Handles fluent configuration for ResultMap childs
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultMapExpression.#ctor(MyBatis.DataMapper.Configuration.Module.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ResultMapExpression"/> class.
            </summary>
            <param name="builder">The module builder.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultMapExpression.Extends(System.String)">
            <summary>
            Extendses the specified result map.
            </summary>
            <param name="extend">The extend id.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultMapExpression.MappingMember(System.String)">
            <summary>
            Mappings to the specified member.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultMapExpression.WithDiscriminator``1(System.String)">
            <summary>
            With a discriminator on the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultMapExpression.WithDiscriminator``2(System.String)">
            <summary>
            With a discriminator on the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Module.ResultMapExpression.UsingConstructor">
            <summary>
            Using the constructor.
            </summary>
            <value>The using constructor.</value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.ObjectTypeHandler">
            <summary>
            Description r閟um閑 de ObjectTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ObjectTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ObjectTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ObjectTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ObjectTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ObjectTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Scope.RequestScope">
            <summary>
            Hold data during the process of a mapped statement.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Scope.IScope">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.IScope.ErrorContext">
            <summary>
             Get the error context
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.IScope.DataExchangeFactory">
            <summary>
            The factory for DataExchange objects
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.GetCirularKeys(MyBatis.DataMapper.Model.ResultMapping.IResultMap)">
            <summary>
            Gets the circular keys.
            </summary>
            <param name="map">The ResultMap.</param>
            <returns>
            Returns [string key, object result] which holds the result objects that have
            already been build during this request with this <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/>
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.SetCirularKeys(MyBatis.DataMapper.Model.ResultMapping.IResultMap,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the cirular keys.
            </summary>
            <param name="map">The map.</param>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.GetUniqueKeys(MyBatis.DataMapper.Model.ResultMapping.IResultMap)">
            <summary>
            Gets the unique keys, used to resolve groupBy
            </summary>
            <param name="map">The ResultMap.</param>
            <returns>
            Returns [string key, object result] which holds the result objects that have  
            already been build during this request with this <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/>
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.SetUniqueKeys(MyBatis.DataMapper.Model.ResultMapping.IResultMap,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the unique keys.
            </summary>
            <param name="map">The map.</param>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.MoveNextResultMap">
            <summary>
            Moves to the next result map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/> class.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="session">The session.</param>
            <param name="statement">The statement</param>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.Equals(System.Object)">
            <summary>
            Check if the specify object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.GetHashCode">
            <summary>
            Get the HashCode for this RequestScope
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.RequestScope.GetNextId">
            <summary>
            Method to get a unique ID
            </summary>
            <returns>The new ID</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.MappedStatement">
            <summary>
             The current <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.Statement">
            <summary>
            Gets the current <see cref="T:MyBatis.DataMapper.Model.Statements.IStatement"/>.
            </summary>
            <value>The statement.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.Session">
            <summary>
             The current <see cref="T:MyBatis.DataMapper.Session.ISession"/>.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.IDbCommand">
            <summary>
             The <see cref="P:MyBatis.DataMapper.Scope.RequestScope.IDbCommand"/> to execute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.IsRowDataFound">
            <summary>
             Indicate if the statement have find data
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.DelayedLoad">
            <summary>
            The 'select' result property to process after having process the main properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.CurrentResultMap">
            <summary>
            The current <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> used by this request.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.ParameterMap">
            <summary>
            The <see cref="P:MyBatis.DataMapper.Scope.RequestScope.ParameterMap"/> used by this request.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.PreparedStatement">
            <summary>
            The <see cref="P:MyBatis.DataMapper.Scope.RequestScope.PreparedStatement"/> used by this request.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.DataExchangeFactory">
            <summary>
            A factory for DataExchange objects
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.RequestScope.ErrorContext">
            <summary>
             Get the request's error context
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.Update">
            <summary>
            Summary description for Update.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.Statement">
            <summary>
            Summary description for Statement.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.IStatement">
            <summary>
            Summary description for ISql.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.IStatement.CreateInstanceOfListClass">
            <summary>
            Create an instance of 'IList' class.
            </summary>
            <returns>An object which implement IList.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.IStatement.CreateInstanceOfGenericListClass``1">
            <summary>
            Create an instance of a generic 'IList' class.
            </summary>
            <returns>An object which implement IList.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.AllowRemapping">
            <summary>
            Gets a value indicating whether [allow remapping].
            </summary>
            <value><c>true</c> if [allow remapping]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.Id">
            <summary>
            Identifier used to identify the statement amongst the others.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.CommandType">
            <summary>
            Gets the  type of the statement (text or procedure).
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.ExtendStatement">
            <summary>
            Gets the extend statement name.
            </summary>
            <value>The extend statement.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.Sql">
            <summary>
            Gets the sql statement to execute.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.ResultsMap">
            <summary>
            The ResultMaps used by the statement.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.ParameterMap">
            <summary>
            The parameterMap used by the statement.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.CacheModel">
            <summary>
            Gets the cache model used by this statement.
            </summary>
            <value>The cache model.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.ParameterClass">
            <summary>
            Gets the parameter class type.
            </summary>
            <value>The parameter class.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.ResultClass">
            <summary>
            Gets the result class type.
            </summary>
            <value>The result class.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.ListClass">
            <summary>
            Gets the list class type.
            </summary>
            <value>The list class.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.SqlSource">
            <summary>
            Gets or sets the SQL source.
            </summary>
            <value>The SQL source.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.IStatement.PreserveWhitespace">
            <summary>
            Gets or sets a value indicating whether whitespace within &lt;statement&gt; nodes should be preserved.
            </summary>
            <remarks>
            Using the default value of false may cause single line SQL comments '--' to comment out more than expected. A 
            safer commenting syntax is to always use the multi-line comments supported by most vendors: '/* ... */'
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Statement.#ctor(System.String,System.Type,MyBatis.DataMapper.Model.ParameterMapping.ParameterMap,System.Type,MyBatis.DataMapper.Model.ResultMapping.ResultMapCollection,System.Type,MyBatis.Common.Utilities.Objects.IFactory,MyBatis.DataMapper.Model.Cache.CacheModel,System.Boolean,System.String,MyBatis.DataMapper.ISqlSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.Statement"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="parameterMap">The parameter map.</param>
            <param name="resultClass">The result class.</param>
            <param name="resultMaps">The result maps.</param>
            <param name="listClass">The list class.</param>
            <param name="listClassFactory">The list class factory.</param>
            <param name="cacheModel">The cache model.</param>
            <param name="remapResults">if set to <c>true</c> [remap results].</param>
            <param name="extends">The extends.</param>
            <param name="sqlSource">The SQL source.</param>
            <param name="preserveWhitespace">Preserve whitespace.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Statement.CreateInstanceOfListClass">
            <summary>
            Create an instance of 'IList' class.
            </summary>
            <returns>An object which implment IList.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Statement.CreateInstanceOfGenericListClass``1">
            <summary>
            Create an instance of a generic 'IList' class.
            </summary>
            <returns>An object which implment IList.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.ResultClass">
            <summary>
            Gets the result class type.
            </summary>
            <value>The result class.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.ListClass">
            <summary>
            Gets the list class type.
            </summary>
            <value>The list class.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.AllowRemapping">
            <summary>
            Gets a value indicating whether [allow remapping].
            </summary>
            <value><c>true</c> if [allow remapping]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.ExtendStatement">
            <summary>
            Gets the extend statement name.
            </summary>
            <value>The extend statement.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.HasCacheModel">
            <summary>
            Tell us if a cacheModel is attached to this statement.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.CacheModel">
            <summary>
            Gets the cache model used by this statement.
            </summary>
            <value>The cache model.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.ParameterClass">
            <summary>
            Gets the parameter class type.
            </summary>
            <value>The parameter class.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.Id">
            <summary>
            Gets the name used to identify the statement amongst the others.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.Sql">
            <summary>
            The sql statement
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.ResultsMap">
            <summary>
            The ResultMap used by the statement.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.ParameterMap">
            <summary>
            The parameterMap used by the statement.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.CommandType">
            <summary>
            The type of the statement (text or procedure)
            Default Text.
            </summary>
            <example>Text or StoredProcedure</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.SqlSource">
            <summary>
            Gets the SQL source.
            </summary>
            <value>The SQL source.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Statement.PreserveWhitespace">
            <summary>
            Gets or sets a value indicating whether whitespace within &lt;statement&gt; nodes should be preserved.
            </summary>
            <remarks>
            Using the default value of false may cause single line SQL comments '--' to comment out more than expected. A 
            safer commenting syntax is to always use the multi-line comments supported by most vendors: '/* ... */'
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Update.#ctor(System.String,System.Type,MyBatis.DataMapper.Model.ParameterMapping.ParameterMap,System.Boolean,System.String,MyBatis.DataMapper.ISqlSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.Update"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="parameterMap">The parameter map.</param>
            <param name="remapResults">if set to <c>true</c> [remap results].</param>
            <param name="extends">The extends.</param>
            <param name="sqlSource">The SQL source.</param>
            <param name="preserveWhitespace">Preserve whitespace.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory">
            <summary>
            Summary description for PreparedStatementFactory.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory.#ctor(MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Data.DBHelperParameterCache,MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.Statements.IStatement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="dbHelperParameterCache">The db helper parameter cache.</param>
            <param name="request">The request.</param>
            <param name="statement">The statement.</param>
            <param name="commandText">The command text.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory.Prepare(System.Boolean)">
            <summary>
            Create a list of IDataParameter for the statement and build the sql string.
            </summary>
            <param name="isDynamic">if set to <c>true</c> this statement is dynamic.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory.DiscoverParameter(MyBatis.DataMapper.Model.ParameterMapping.ParameterMap)">
            <summary>
            For store procedure, auto discover IDataParameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory.CreateParametersForTextCommand">
            <summary>
            Create IDataParameters for command text statement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory.CreateParametersForProcedureCommand">
            <summary>
            Create IDataParameters for procedure statement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.PreparedStatementFactory.EvaluateParameterMap">
            <summary>
            Parse sql command text.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Data.DataReaderDecorator">
            <summary>
            Decorate an <see cref="T:System.Data.IDataReader"></see>
            to auto move to next ResultMap on NextResult call. 
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.#ctor(System.Data.IDataReader,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Data.DataReaderDecorator"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="request">The request scope</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataReader#Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader"></see> 0bject.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataReader#GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"></see> that describes the column metadata of the <see cref="T:System.Data.IDataReader"></see>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"></see> that describes the column metadata.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.IDataReader"></see> is closed. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataReader#NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataReader#Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader"></see> to the next record.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The character value of the specified column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            Gets an <see cref="T:System.Data.IDataReader"></see> to be used when the field points to more remote structured data.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            An <see cref="T:System.Data.IDataReader"></see> to be used when the field points to more remote structured data.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The data type information for the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The date and time data value of the spcified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"></see> information corresponding to the type of <see cref="T:System.Object"></see> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"></see>.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Type"></see> information corresponding to the type of <see cref="T:System.Object"></see> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"></see>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>The index of the named field.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Object"></see> which will contain the field value upon return.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            true if the specified field is set to null. Otherwise, false.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataReader#Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value></value>
            <returns>The level of nesting.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataReader#IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
            <value></value>
            <returns>true if the data reader is closed; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value></value>
            <returns>When not positioned in a valid recordset, 0; otherwise the number of columns in the current record. The default is -1.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DataReaderDecorator.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified i.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.BaseDataExchange">
            <summary>
            Summary description for BaseDataExchange.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.BaseDataExchange.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Constructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.BaseDataExchange.GetData(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.BaseDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.BaseDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="P:MyBatis.DataMapper.DataExchange.BaseDataExchange.DataExchangeFactory">
            <summary>
            Getter for the factory that created this object
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.ResultPropertyDeSerializer">
            <summary>
            Summary description for ResultPropertyDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ResultPropertyDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration,System.Type,System.String,System.String,MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Deserialize the specified config in a ResultProperty object
            </summary>
            <param name="config">The config.</param>
            <param name="resultClass">The result class.</param>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IterateSerializer">
            <summary>
            Summary description for IterateSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IterateSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IterateSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IterateSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Events.PostCreateEventArgs">
            <summary>
            Event launchs after creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.PostCreateEventArgs.Instance">
            <summary>
            Gets or sets the newly created instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.SelectKeyDeSerializer">
            <summary>
            Deserializes a selectKey element
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.SelectKeyDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a <see cref="T:MyBatis.DataMapper.Model.Statements.Select"/> object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <param name="configurationSetting"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor">
            <summary>
            Analyse the iBATIS XML configuration and import their configurations in the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessProvidersElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the providers element in the SqlMap.config file.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessPropertyElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the property element in the SqlMap.config file.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessDataSourceElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the DataSource element in the SqlMap.config file. 
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessAddElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the add element in external properties file
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessTypeHandlerElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the type handler element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessSqlMapElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the SQL map element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessProviderElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the provider element in the providers.config file.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessDatabaseElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the database element in the SqlMap.config file.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessTypeAliasElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the type alias element.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessSettingElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the setting element in the SqlMap.config file.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.ProcessPropertiesElement(MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Processes the properties element in the SqlMap.config file.
            </summary>
            <param name="element">The element.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlConfigProcessor.RegisterElementHandlers">
            <summary>
            Registers the element handlers.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache">
            <summary>
            Cache decorator that uses serialization to return different instances (copies) of 
            the cached object to each session.
            Therefore each session can safely modify the instance returned.
            </summary>
            <remarks>
            eq. to SHARED_READ_WRITE
            </remarks>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.BaseCache">
            <summary>
            Base Cache class implements a template method pattern for subclasses.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.ICache">
            <summary>
            Summary description for ICache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.ICache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.ICache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.ICache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.ICache.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.ICache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.ICache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.BaseCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.BaseCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.BaseCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.BaseCache.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.BaseCache.GetHashCode">
            <summary>
            Get the HashCode for this CacheKey
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.BaseCache.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.BaseCache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.BaseCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache.#ctor(MyBatis.DataMapper.Model.Cache.ICache)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache"/> class.
            </summary>
            <param name="delegateCache">The delegate cache.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.SharedCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.ArgumentExpression">
            <summary>
            Handles fluent configuration for Argument element
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.ConstructorExpression">
            <summary>
            Handles fluent configuration for ResultMap constructor
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ConstructorExpression.#ctor(MyBatis.DataMapper.Configuration.Module.ModuleBuilder,MyBatis.Common.Configuration.MutableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ResultMapExpression"/> class.
            </summary>
            <param name="builder">The module builder.</param>
            <param name="parentConfiguration">The parent configuration.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ConstructorExpression.MappingArgument(System.String)">
            <summary>
            Mappings to the specified Argument.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.#ctor(MyBatis.DataMapper.Configuration.Module.ModuleBuilder,MyBatis.Common.Configuration.MutableConfiguration,MyBatis.Common.Configuration.MutableConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ResultExpression"/> class.
            </summary>
            <param name="builder">The module builder.</param>
            <param name="parentConfiguration">The parent configuration.</param>
            <param name="currentArgument">The current argument.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.ToColumnName(System.String)">
            <summary>
            To the Column name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.ToColumnIndex(System.Int32)">
            <summary>
            To the Column index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.UsingResultMap(System.String)">
            <summary>
            Uses the result map.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.WithTypeHandler``1">
            <summary>
            With the type handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.UsingDbType(System.String)">
            <summary>
            Uses the dbtype.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.UsingType(System.String)">
            <summary>
            Uses the type.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.UsingNullValue(System.String)">
            <summary>
            Uses the null value.
            </summary>
            <param name="val">The null value.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ArgumentExpression.UsingSelect(System.String)">
            <summary>
            Uses the select statment.
            </summary>
            <param name="id">The id statement.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine">
            <summary>
            The default <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/> implementation.
            </summary>
            <example>
            Use:
            
            IConfigurationEngine engine = 
                new DefaultConfigurationEngine( 
                        new XmlConfigurationInterpreter(
                            new new FileResource("SqlMap.config") ) );
            </example>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.IConfigurationEngine">
            <summary>
            The <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/> defines the contract used to build
            an <see cref="T:MyBatis.DataMapper.IMapperFactory"/>.    
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationEngine.BuildMapperFactory">
            <summary>
            Builds the mapper factory.
            </summary>
            <returns>The mapper factory</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationEngine.RegisterModule(MyBatis.DataMapper.Configuration.Module.IModule)">
            <summary>
            Add a module to the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/>.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationEngine.RegisterInterpreter(MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter)">
            <summary>
            Registers an <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter"/>.
            </summary>
            <param name="interpreter">The interpreter.</param>
        </member>
        <member name="E:MyBatis.DataMapper.Configuration.IConfigurationEngine.FileResourceLoad">
            <summary>
            Event launch on processing file resource
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationEngine.ModelStore">
            <summary>
            Gets the model store.
            </summary>
            <value>The model store.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationEngine.ConfigurationStore">
            <summary>
            Gets the configuration store.
            </summary>
            <value>The configuration store.</value>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.#ctor(MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine"/> class.
            </summary>
            <param name="configurationSetting">The configuration setting.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.RegisterInterpreter(MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter)">
            <summary>
            Registers the <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.IConfigurationInterpreter"/>.
            </summary>
            <param name="interpreter">The interpreter.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.RegisterModule(MyBatis.DataMapper.Configuration.Module.IModule)">
            <summary>
            Add a module to the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/>.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.BuildMapperFactory">
            <summary>
            Builds the mapper factory.
            </summary>
            <returns>the mapper factory</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.TryGetSettingBoolean(System.String,System.Boolean)">
            <summary>
            Used by BuildMapperFactory to retrieve configuration values from configurationStore. 
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.FileResourceLoad">
            <summary>
            Event launch on processing file resource
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.ModelStore">
            <summary>
            Gets the model store.
            </summary>
            <value>The model store.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationEngine.ConfigurationStore">
            <summary>
            Gets the configuration store.
            </summary>
            <value>The configuration store.</value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.SByteTypeHandler">
            <summary>
            SByteTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SByteTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SByteTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.SByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler">
            <summary>
            TypeHandler for SByte TimeSpan Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler">
            <summary>
            TypeHandler for Nullable Int32 Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.DateTimeTypeHandler">
            <summary>
            Description r閟um閑 de DateTimeTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Scope.ErrorContext">
            <summary>
            An error context to help us create meaningful error messages.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.ErrorContext.Reset">
            <summary>
            Clear the error context
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Scope.ErrorContext.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.ErrorContext.Resource">
            <summary>
            The resource causing the problem
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.ErrorContext.Activity">
            <summary>
            The activity that was happening when the error happened
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.ErrorContext.ObjectId">
            <summary>
            The object ID where the problem happened
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Scope.ErrorContext.MoreInfo">
            <summary>
            More information about the error
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.LazyLoadInterceptor">
            <summary>
            Default implementation of the interceptor reponsible of load the lazy element
            Could load collections and single objects
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyLoadInterceptor.#cctor">
            <summary>
            Static Constructor for a lazy list loader
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyLoadInterceptor.#ctor(MyBatis.DataMapper.IDataMapper,MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,MyBatis.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Constructor for a lazy list loader
            </summary>
            <param name="dataMapper">The data mapper.</param>
            <param name="mappedSatement">The mapped statement used to build the list</param>
            <param name="param">The parameter object used to build the list</param>
            <param name="target">The target object which contains the property proxydied.</param>
            <param name="setAccessor">The proxified member accessor.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyLoadInterceptor.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Intercepts the specified invocation., params object[] arguments
            </summary>
            <param name="invocation">The invocation.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.ISql">
            <summary>
            Summary description for ISql.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.ISql.GetRequestScope(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,MyBatis.DataMapper.Session.ISession)">
            <summary>
            Builds a new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/> and the <see cref="T:System.Data.IDbCommand"/> text to execute.
            </summary>
            <param name="mappedStatement">The <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <param name="parameterObject">The parameter object (used by DynamicSql/SimpleDynamicSql).
            Use to complete the sql statement.</param>
            <param name="session">The current session</param>
            <returns>A new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotNullTagHandler">
            <summary>
            Summary description for IsNotNullTagHandler.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNullTagHandler">
            <summary>
            Summary description for IsNullTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNullTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNullTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNullTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotNullTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotNullTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotNullTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotNull">
            <summary>
            Represent an isNotNull sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotNull.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotNull"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEmpty">
            <summary>
            Represent an isEmpty sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEmpty.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEmpty"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Collections.IList"/> <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an <see cref="T:System.Collections.IList"/> property
             on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The current <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.CachingStatement">
            <summary>
            Acts as a decorator arounf an <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/> to add cache functionality
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.#ctor(MyBatis.DataMapper.MappedStatements.MappedStatement)">
            <summary>
            Constructor
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForDataTable(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes an SQL statement that returns DataTable.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForMap(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForDictionary``2(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForDictionary``2(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate"></param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteUpdate(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Execute an update statement. Also used for delete statement.
            Return the number of row effected.
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The number of row effected.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteInsert(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Execute an insert statement. Fill the parameter object with 
            the ouput parameters if any, also could return the insert generated key
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session</param>
            <param name="parameterObject">The parameter object used to fill the statement.</param>
            <returns>Can return the insert generated key.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.IList)">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. 
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList``1(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList``1(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. 
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForObject(MyBatis.DataMapper.Session.ISession,System.Object,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForObject``1(MyBatis.DataMapper.Session.ISession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForRowDelegate``1(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForMapWithRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String,MyBatis.DataMapper.DictionaryRowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <remarks>
            This method always bypasses the cache.
            </remarks>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate"></param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:MyBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.GetCacheKey(MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Gets the cache key.
            </summary>
            <param name="request">The request.</param>
            <returns>the cache key</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.CachingStatement.CachingStatementExecute``1(System.Object,System.Object,MyBatis.DataMapper.Session.ISession,System.Object,System.String,MyBatis.DataMapper.MappedStatements.CachingStatement.RequestRunner{``0})">
            <summary>
            Ensures all the related Execute methods are run in a consistent manner with pre and post events.
            </summary>
            <remarks>
            Based off of MappedStatement.Execute
            </remarks>
        </member>
        <member name="E:MyBatis.DataMapper.MappedStatements.CachingStatement.Executed">
            <summary>
            Event launch on Execute query
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.CachingStatement.PreparedCommand">
            <summary>
            The IPreparedCommand to use
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.CachingStatement.Id">
            <summary>
            Name used to identify the MappedStatement amongst the others.
            This the name of the SQL statment by default.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.CachingStatement.Statement">
            <summary>
            The SQL statment used by this MappedStatement
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.CachingStatement.ModelStore">
            <summary>
            The <see cref="T:MyBatis.DataMapper.Model.IModelStore"/> used by this MappedStatement
            </summary>
            <value>The model store.</value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory">
            <summary>
            Factory to get <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory.Get(MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty)">
            <summary>
            Finds the <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/>.
            </summary>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/>.</param>
            <returns>The <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.StatementDeSerializer">
            <summary>
            Summary description for StatementDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.StatementDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a <see cref="T:MyBatis.DataMapper.Model.Statements.Statement"/> object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <param name="configurationSetting"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertStrategy.CircularStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when the resulMap have a keys attribute.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertStrategy.CircularStrategy.#ctor(MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>
            Initializes the <see cref="T:MyBatis.DataMapper.MappedStatements.PropertStrategy.CircularStrategy"/> class.
            </summary>
            <param name="resultMapStrategy">The result map strategy.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertStrategy.CircularStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
            Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The ResultProperty.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertStrategy.CircularStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertStrategy.CircularStrategy.GetCircularKey(MyBatis.DataMapper.Model.ResultMapping.IResultMap,System.Data.IDataReader)">
            <summary>
            Gets the circular key.
            </summary>
            <param name="resultMap">The result map.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.TextPropertyProbe">
            <summary>
            This is called within DynamicSql and SimpleDynamicSql. It is responsible for finding all occurrences of
            content surrounded with dollar symbols.
            Each "token" found is then passed of to an appropriate implementation of TextTokenHandlerBase which is responsible
            for performing some action against the token. 
            These actions are the handling of bind (variable) usage and property name conversions to a full property reflection name.
            Property reflection works by converting a relative reflection path denoted by "[]." to a 
            full reflection that indicates the current item within a list, or list of lists.
            This is done by working out the parent tag for each tag. If the parent tag is an iterate item, then the current iterate
            item is used in building up the property name.
            The logic associated with binding all happens within the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql"/>.ProcessBodyChildren method.
            For a description on how the "bind" element can be used, please see: <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind"/>.
            Deserialization of the "bind" element takes place by class: <see cref="T:MyBatis.DataMapper.Configuration.Serializers.BindDeSerializer"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BindTagHandler" -->
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BindTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.ConditionalTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BindTagHandler.DoEndFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <param name="bodyContent"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.BindTagHandler.DoStartFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Implementation.WeakCache">
            <summary>
            Weak Cache implementation.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.WeakCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.WeakCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.WeakCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.WeakCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Implementation.WeakCache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Implementation.WeakCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache">
            <summary>
            Cache decorator specifying that each cache method of the delegate cache can only 
            be executed by only one thread at a time.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache.#ctor(MyBatis.DataMapper.Model.Cache.ICache)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache"/> class.
            </summary>
            <param name="delegateCache">The delegate cache.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.SynchronizedCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.SingleTypeHandler">
            <summary>
            Description r閟um閑 de SingleTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SingleTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SingleTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SingleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.SingleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.SingleTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Int32TypeHandler">
            <summary>
            Summary description for Int32TypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int32TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int32TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Int32TypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.CharTypeHandler">
            <summary>
            Description r閟um閑 de CharTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CharTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CharTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CharTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CharTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.CharTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Stores.CallContextSessionStore">
            <summary>
            Provides an implementation of <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            which relies on <c>CallContext</c>.
            This implementation will first get the current session from the current 
            thread. Do NOT use on web scenario (web applications or web services).
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.CallContextSessionStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.Stores.CallContextSessionStore"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.CallContextSessionStore.Store(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.CallContextSessionStore.Dispose">
            <summary>
            Remove the local session.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Stores.CallContextSessionStore.CurrentSession">
            <summary>
            Get the local session
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.LazyListGeneric`1">
            <summary>
            A lazy generic list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.#ctor(MyBatis.DataMapper.IDataMapper,MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,MyBatis.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Initializes a new instance of the LazyListGeneric class.
            </summary>
            <param name="dataMapper">The data mapper.</param>
            <param name="mappedSatement">The mapped satement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Load(System.String)">
            <summary>
            Resolve the lazy loading.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IEnumerator"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.Insert">
            <summary>
            Represent an insert statement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Insert.#ctor(System.String,System.Type,MyBatis.DataMapper.Model.ParameterMapping.ParameterMap,System.Type,MyBatis.DataMapper.Model.ResultMapping.ResultMapCollection,System.Type,MyBatis.Common.Utilities.Objects.IFactory,MyBatis.DataMapper.Model.Cache.CacheModel,System.Boolean,System.String,MyBatis.DataMapper.Model.Statements.SelectKey,MyBatis.DataMapper.ISqlSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.Insert"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="parameterMap">The parameter map.</param>
            <param name="resultClass">The result class.</param>
            <param name="resultMaps">The result maps.</param>
            <param name="listClass">The list class.</param>
            <param name="listClassFactory">The list class factory.</param>
            <param name="cacheModel">The cache model.</param>
            <param name="remapResults">if set to <c>true</c> [remap results].</param>
            <param name="extends">The extends.</param>
            <param name="selectKey">The select key.</param>
            <param name="sqlSource">The SQL source.</param>
            <param name="preserveWhitespace">Preserve whitespace.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Insert.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Insert.SelectKey">
            <summary>
            The selectKey statement used by an insert statement.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterThanTagHandler">
            <summary>
            Summary description for IsGreaterThanTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterThanTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterThanTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterThanTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsPropertyAvailable">
            <summary>
            Represent an isPropertyAvailable sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsPropertyAvailable.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsPropertyAvailable"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotPropertyAvailable">
            <summary>
            Represent an isEmpty sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotPropertyAvailable.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotPropertyAvailable"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterEqual">
            <summary>
            Represent an isGreaterEqual sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterEqual.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.Case">
            <summary>
            Summary description for Case.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.Case.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.Case"/> class.
            </summary>
            <param name="discriminatorValue">The discriminator value.</param>
            <param name="resultMapName">Name of the result map.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Case.DiscriminatorValue">
            <summary>
            Discriminator value
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Case.ResultMapName">
            <summary>
            The name of the ResultMap used if the column value is = to the Discriminator Value
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Case.ResultMap">
            <summary>
            The resultMap used if the column value is = to the Discriminator Value
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.CacheKey">
            <summary>
             Hash value generator for cache keys
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheKey.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheKey.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.CacheKey"/> class.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheKey.Update(System.Object)">
            <summary>
            Updates this object with new information based on an object
            </summary>
            <param name="obj">the object</param>
            <returns>the cachekey</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheKey.UpdateAll(System.Object[])">
            <summary>
            Updates all.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheKey.GetHashCode">
            <summary>
            Get the HashCode for this CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheKey.ToString">
            <summary>
            ToString implementation.
            </summary>
            <returns>A string that give the CacheKey HashCode.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory">
            <summary>
            Factory to get <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory.Get(MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod)">
            <summary>
            Gets the <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/>.
            </summary>
            <param name="method">The <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod"/>.</param>
            <returns>The <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/></returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.ResultMapStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'resultMapping' attribute exists
            on a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.ResultMapStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.ExecuteEventArgs">
            <summary>
            Summary description for ExecuteEventArgs.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.ExecuteEventArgs.StatementName">
            <summary>
            Set or get the statement name
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.External.ExternalSql">
            <summary>
            Represents ths SQL of a mapped statement with an external <see cref="T:MyBatis.DataMapper.ISqlSource"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.External.ExternalSql.#ctor(MyBatis.DataMapper.Model.IModelStore,MyBatis.DataMapper.Model.Statements.IStatement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.External.ExternalSql"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="statement">The statement.</param>
            <param name="commandText">The command text.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.External.ExternalSql.GetRequestScope(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,MyBatis.DataMapper.Session.ISession)">
            <summary>
            Builds a new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/> and the <see cref="T:System.Data.IDbCommand"/> text to execute.
            </summary>
            <param name="mappedStatement">The <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <param name="parameterObject">The parameter object (used by DynamicSql/SimpleDynamicSql).
            Use to complete the sql statement.</param>
            <param name="session">The current session</param>
            <returns>A new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.External.ExternalSql.BuildPreparedStatement(MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Scope.RequestScope,System.String)">
            <summary>
            Builds the prepared statement.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.External.ExternalSql.CommandText">
            <summary>
            Gets the command text.
            </summary>
            <value>The command text.</value>
        </member>
        <member name="T:MyBatis.DataMapper.DefaultMapperFactory">
            <summary>
            The default implementation of the <see cref="T:MyBatis.DataMapper.IMapperFactory"/>  
            Responsible to build mapper interface instance
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.IMapperFactory">
            <summary>
            Responsible to build mapper interface instance
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.IMapperFactory.GetMapper``1">
            <summary>
            Gets the mapper.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <returns>An implementation of the interface that delegates database call to the DataMapper</returns>
        </member>
        <member name="T:MyBatis.DataMapper.IDataMapperAccessor">
            <summary>
            Provides access to the underlying <see cref="T:MyBatis.DataMapper.IDataMapper"/>
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.IDataMapperAccessor.DataMapper">
            <summary>
            Gets the <see cref="T:MyBatis.DataMapper.IDataMapper"/>
            </summary>
            <value>The data mapper.</value>
        </member>
        <member name="M:MyBatis.DataMapper.DefaultMapperFactory.#ctor(MyBatis.DataMapper.IDataMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.DefaultMapperFactory"/> class.
            </summary>
            <param name="dataMapper">The data mapper.</param>
        </member>
        <member name="M:MyBatis.DataMapper.DefaultMapperFactory.GetMapper``1">
            <summary>
            Gets the mapper.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <returns>
            An implementation of the interface that delegates database call to the DataMapper
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.DefaultMapperFactory.DataMapper">
            <summary>
            Gets the <see cref="T:MyBatis.DataMapper.IDataMapper"/>
            </summary>
            <value>The data mapper.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache">
            <summary>
            Cache decorator which clears the delegate cache on interval
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache.#ctor(MyBatis.DataMapper.Model.Cache.ICache,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache"/> class.
            </summary>
            <param name="delegateCache">The delegate cache.</param>
            <param name="flushIntervalInMinute">The flush interval in minute.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.ScheduledCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.StringTypeHandler">
            <summary>
            Description r閟um閑 de SByteTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.StringTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.StringTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.StringTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.StringTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.StringTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.ParameterSetterImpl">
            <summary>
            A ParameterSetter implementation
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.IParameterSetter">
            <summary>
            Allows parameters to be set on the underlying prepared IDbCommand.
            TypeHandlerCallback implementations use this interface to
            process values before they are set on the IDbCommand.
            </summary>
            <remarks>
            There is no need to implement this.  The implementation
            will be passed into the TypeHandlerCallback automatically.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.IParameterSetter.DataParameter">
            <summary>
            Returns the underlying IDataParameter
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.IParameterSetter.Value">
            <summary>
            Get the parameter value
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ParameterSetterImpl.#ctor(System.Data.IDataParameter)">
            <summary>
            Default Constructor
            </summary>
            <param name="dataParameter"></param>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ParameterSetterImpl.DataParameter">
            <summary>
            Returns the underlying DataParameter
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ParameterSetterImpl.Value">
            <summary>
            Set the parameter value
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler">
            <summary>
            Summary description for Int32TypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler">
            <summary>
            TypeHandler for Nullable char Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.LazyLoadProxyFactory">
            <summary>
            This class is responsible of create lazy load proxies for a concrete class with virtual method.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyLoadProxyFactory.CreateProxy(MyBatis.DataMapper.IDataMapper,MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,MyBatis.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Builds the specified lazy load proxy for a concrete class with virtual method.
            </summary>
            <param name="dataMapper">The data mapper.</param>
            <param name="selectStatement">The mapped statement used to build the lazy loaded object.</param>
            <param name="param">The parameter object used to build lazy loaded object.</param>
            <param name="target">The target object which contains the property proxydied..</param>
            <param name="setAccessor">The proxified member accessor.</param>
            <returns>Return a proxy object</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateTagHandler">
            <summary>
            Summary description for IterateTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateTagHandler.DoEndFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <param name="bodyContent"></param>
             <returns></returns>
             <remarks>
             Updated By: Richard Beacroft
             Updated Date: 11\10\2013
             Description: Enables property iterate item paths to be replaced with full property paths, which will later be reflected.
             </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateTagHandler.DoPrepend(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <param name="bodyContent"></param>
             <remarks>
             Updated By: Richard Beacroft
             Updated Date: 11\10\2013
             Description: Changed the index to check for.
             The "iterate" tag handler has been re-worked to ensure we read the next iterate context item
             before the child tag elements are processed. We need to do this to ensure that we can parse 
             property expressions within tag elements nested within the iterate element.
             </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateTagHandler.DoStartFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <returns></returns>
             Updated By: Richard Beacroft
             Updated Date: 11\10\2013
             Description: Enables one to be able to have sql text within an iterate element that references the current item as "[]."
             This is then parsed, along with any reflection path suffix to get the object instance the used is interested in.
             and add it to an attributes collection for later use.
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IterateTagHandler.IsPostParseRequired">
             <summary>
            
             </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessThanTagHandler">
            <summary>
            Summary description for IsLessThanTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessThanTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessThanTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessThanTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEqualTagHandler">
            <summary>
            Summary description for IsEqualTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEqualTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEqualTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.DynamicTagHandler">
            <summary>
            Summary description for DynamicTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.DynamicTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.DynamicTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.DynamicTagHandler.DoStartFragment(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate">
            <summary>
            Represent an iterate sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate.Conjunction">
            <summary>
            Conjonction attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate.Close">
            <summary>
            Close attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate.Open">
            <summary>
            Open attribute
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap">
            <summary>
            Implementation of <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> interface for auto mapping
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.#ctor(System.Type,MyBatis.Common.Utilities.Objects.IFactory,MyBatis.DataMapper.DataExchange.IDataExchange,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap"/> class.
            </summary>
            <param name="resultClass">The result class.</param>
            <param name="resultClassFactory">The result class factory.</param>
            <param name="dataExchange">The data exchange.</param>
            <param name="isSimpleType">if set to <c>true</c> [is simple type].</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.SetValueOfProperty(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <value></value>
            <example>GetProduct</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.KeyPropertyNames">
            <summary>
            The Key (used for resolved circular reference).
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.KeysProperties">
            <summary>
            The Keys Properties.
            </summary>
            <value></value>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.PreCreate">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PreCreateEventArgs"/> generated before creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap.PostCreate">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PostCreateEventArgs"/> generated after creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.DefaultModelStore">
            <summary>
            The default implementation of <see cref="T:MyBatis.DataMapper.Model.IModelStore"/> contract.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.IModelStore">
            <summary>
            Holds all the iBATIS core model (statement, alias, resultMap, parameterMap, dataSource).
            Used by the <see cref="T:MyBatis.DataMapper.IMapperFactory"/> to build Mapper.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.GetParameterMap(System.String)">
            <summary>
            Get a ParameterMap by name
            </summary>
            <param name="name">The name of the ParameterMap</param>
            <returns>The ParameterMap</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.AddParameterMap(MyBatis.DataMapper.Model.ParameterMapping.ParameterMap)">
            <summary>
            Adds a (named) ParameterMap.
            </summary>
            <param name="parameterMap">the ParameterMap to add</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.GetResultMap(System.String)">
            <summary>
            Gets a ResultMap by name
            </summary>
            <param name="name">The name of the result map</param>
            <returns>The ResultMap</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.AddResultMap(MyBatis.DataMapper.Model.ResultMapping.IResultMap)">
            <summary>
            Adds a (named) ResultMap
            </summary>
            <param name="resultMap">The ResultMap to add</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.AddMappedStatement(MyBatis.DataMapper.MappedStatements.IMappedStatement)">
            <summary>
            Adds a (named) MappedStatement.
            </summary>
            <param name="mappedStatement">The statement to add</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.GetMappedStatement(System.String)">
            <summary>
            Gets a MappedStatement by id
            </summary>
            <param name="id"> The id of the statement</param>
            <returns> The MappedStatement</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.AddCacheModel(MyBatis.DataMapper.Model.Cache.CacheModel)">
            <summary>
            Adds a (named) cache model.
            </summary>
            <param name="cacheModel">The cache model.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.GetCacheModel(System.String)">
            <summary>
            Gets a cache model by id
            </summary>
            <param name="id">The id of the cache model</param>
            <returns>The cache model</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.IModelStore.FlushCaches">
            <summary>
            Flushes the caches.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.IModelStore.Id">
            <summary>
            Name used to identify the <see cref="T:MyBatis.DataMapper.Model.IModelStore"/>
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.IModelStore.DataMapper">
            <summary>
            Gets or sets the data mapper.
            </summary>
            <value>The data mapper.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.IModelStore.DataExchangeFactory">
            <summary>
            Gets or sets the data exchange factory.
            </summary>
            <value>The data exchange factory.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.IModelStore.SessionStore">
            <summary>
            Gets or sets the session store.
            </summary>
            <value>The session store.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.IModelStore.DBHelperParameterCache">
            <summary>
            Gets the DB helper parameter cache.
            </summary>
            <value>The DB helper parameter cache.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.IModelStore.SessionFactory">
            <summary>
            Gets the session factory.
            </summary>
            <value>The session factory.</value>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.DefaultModelStore"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.GetResultMap(System.String)">
            <summary>
            Gets a ResultMap by Id
            </summary>
            <param name="resultMapId">The ResultMap id.</param>
            <returns>The ResultMap</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.AddResultMap(MyBatis.DataMapper.Model.ResultMapping.IResultMap)">
            <summary>
            Adds a (named) ResultMap
            </summary>
            <param name="resultMap">The ResultMap to add</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.GetParameterMap(System.String)">
            <summary>
            Get a ParameterMap by id
            </summary>
            <param name="parameterMapId">The id of the ParameterMap</param>
            <returns>The ParameterMap</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.AddParameterMap(MyBatis.DataMapper.Model.ParameterMapping.ParameterMap)">
            <summary>
            Adds a (named) ParameterMap.
            </summary>
            <param name="parameterMap">the ParameterMap to add</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.GetMappedStatement(System.String)">
            <summary>
            Gets a MappedStatement by name
            </summary>
            <param name="mappedStatementId"> The id of the statement</param>
            <returns> The MappedStatement</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.AddMappedStatement(MyBatis.DataMapper.MappedStatements.IMappedStatement)">
            <summary>
            Adds a (named) MappedStatement.
            </summary>
            <param name="mappedStatement">The statement to add</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.GetCacheModel(System.String)">
            <summary>
            Gets a cache model by id
            </summary>
            <param name="cacheModelId">The id of the cache model</param>
            <returns>The cache model</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.AddCacheModel(MyBatis.DataMapper.Model.Cache.CacheModel)">
            <summary>
            Adds a (named) cache model.
            </summary>
            <param name="cacheModel">The cache model.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.FlushCaches">
            <summary>
            Flushes all cached objects that belong to this <see cref="T:MyBatis.DataMapper.Model.IModelStore"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.DefaultModelStore.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.DefaultModelStore.Id">
            <summary>
            Name used to identify the <see cref="T:MyBatis.DataMapper.Model.IModelStore"/>
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.DefaultModelStore.DataMapper">
            <summary>
            Gets or sets the data mapper.
            </summary>
            <value>The data mapper.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.DefaultModelStore.SessionStore">
            <summary>
            Gets or sets the session store.
            </summary>
            <value>The session store.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.DefaultModelStore.SessionFactory">
            <summary>
            Gets the session factory.
            </summary>
            <value>The session factory.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.DefaultModelStore.DBHelperParameterCache">
            <summary>
            Gets the DB helper parameter cache.
            </summary>
            <value>The DB helper parameter cache.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.DefaultModelStore.DataExchangeFactory">
            <summary>
            Gets or sets the data exchange factory.
            </summary>
            <value>The data exchange factory.</value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy.#ctor(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy"/> class.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="selectArrayStrategy">The select array strategy.</param>
            <param name="selectGenericListStrategy">The select generic list strategy.</param>
            <param name="selectListStrategy">The select list strategy.</param>
            <param name="selectObjectStrategy">The select object strategy.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists
             on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The reader.</param>
             <param name="selectKeys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.ListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for list.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.ListStrategy.Execute(MyBatis.DataMapper.MappedStatements.PostBindind,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectObjectStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on an <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/> and the object property is 
            different from an <see cref="T:System.Array"/> or an <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectObjectStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Data.DefaultPreparedCommand">
            <summary>
            Summary description for DefaultPreparedCommand.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Data.IPreparedCommand">
            <summary>
            Summary description for IPreparedCommand.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.IPreparedCommand.Create(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Model.Statements.IStatement,System.Object)">
            <summary>
            Create an IDbCommand for the SqlMapSession and the current SQL Statement
            and fill IDbCommand IDataParameter's with the parameterObject.
            </summary>
            <param name="request"></param>
            <param name="session">The SqlMapSession</param>
            <param name="statement">The IStatement</param>
            <param name="parameterObject">
            The parameter object that will fill the sql parameter
            </param>
            <returns>An IDbCommand with all the IDataParameter filled.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DefaultPreparedCommand.Create(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Model.Statements.IStatement,System.Object)">
            <summary>
            Create an IDbCommand for the current session and statement then fill in its IDataParameters based on parameterObject.
            </summary>
            <param name="request"></param>
            <param name="session">The SqlMapSession</param>
            <param name="statement">The IStatement</param>
            <param name="parameterObject">
            The parameter object that will fill the sql parameter
            </param> 
            <remarks>
            The constructed IDbCommand is available from request.IDbCommand
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DefaultPreparedCommand.CreateCommand(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object)">
            <summary>
            Creates an IDbCommand fills its parameters based on the parameterObject.
            </summary>
            <param name="mappedStatement"></param>
            <param name="parameterObject"></param>
            <returns>An IDbCommand with all the IDataParameter filled.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DefaultPreparedCommand.CreateCommandAndEnlistTransaction(MyBatis.Common.Data.IDbProvider,System.Data.CommandType,MyBatis.DataMapper.Session.ISession)">
            <summary>
            Creates the command.
            </summary>
            <param name="dbProvider">The dbProvider.</param>
            <param name="session">If session is not null, attaches the session's Connection and Transaction to the command and sets the command's Timeout property.</param>
            <param name="commandType">Type of the command.</param>
            <returns>the command</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DefaultPreparedCommand.SetCommandTimeout(System.Data.IDbCommand,System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="commandTimeout">The command timeout.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DefaultPreparedCommand.ApplyParameterMap(MyBatis.Common.Data.IDbProvider,System.Data.IDbCommand,MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.Statements.IStatement,System.Object)">
            <summary>
            Applies the parameter map.
            </summary>
            <param name="dbProvider">The dbProvider.</param>
            <param name="command">The command.</param>
            <param name="request">The request.</param>
            <param name="statement">The statement.</param>
            <param name="parameterObject">The parameter object.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DefaultPreparedCommand.ApplyDbProviderParameterSettings(MyBatis.Common.Data.IDbProvider,System.Data.IDbDataParameter,System.Data.IDbDataParameter)">
            <summary>
            Applies IDbProvider specific settings to the dbParameter by first checking values on the templateParameter.
            </summary>
            <param name="dbProvider"></param>
            <param name="templateParameter">source</param>
            <param name="dbParameter">destination</param>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.PrimitiveDataExchange">
            <summary>
            DataExchange implementation for "primitive" objects.
            </summary>
            <remarks>
            The primitive types are Boolean, Byte, SByte, Int16, UInt16, Int32,
            UInt32, Int64, UInt64, Char, Double, and Single + string, Guid, Decimal, DateTime
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.PrimitiveDataExchange.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Cosntructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.PrimitiveDataExchange.GetData(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.PrimitiveDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.PrimitiveDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer">
            <summary>
            Summary description for DynamicDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Dynamic"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.ArgumentPropertyDeSerializer">
            <summary>
            Summary description for ArgumentPropertyDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ArgumentPropertyDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration,System.Type,System.Reflection.ConstructorInfo,MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Deserializes the specified config in an ArgumentProperty object
            </summary>
            <param name="config">The config.</param>
            <param name="resultClass">The result class.</param>
            <param name="constructorInfo">The constructor info.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.DiscriminatorExpression">
            <summary>
            Handles fluent configuration for Discriminator element
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.DiscriminatorExpression.#ctor(MyBatis.DataMapper.Configuration.Module.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.DiscriminatorExpression"/> class.
            </summary>
            <param name="builder">The module builder.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.DiscriminatorExpression.UsingResultMap(System.String)">
            <summary>
            Using as subMap the ResulMap with the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.DiscriminatorExpression.ForValue(System.String)">
            <summary>
            For the value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.DiscriminatorExpression.WithTypeHandler``1">
            <summary>
            With the type handler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler">
            <summary>
            TypeHandler for Nullable double Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.SelectKey">
            <summary>
            Represent a SelectKey tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.SelectKey.#ctor(System.String,System.String,System.Type,MyBatis.DataMapper.Model.ResultMapping.ResultMapCollection,MyBatis.DataMapper.SelectKeyType,MyBatis.DataMapper.ISqlSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.SelectKey"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="type">The type.</param>
            <param name="resultMaps">The result maps.</param>
            <param name="selectKeyType">Type of the select key.</param>
            <param name="sqlSource">The SQL source.</param>
            <param name="preserveWhitespace">Preserve whitespace.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.SelectKey.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.SelectKey.PropertyName">
            <summary>
            The property name object to fill with the key.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.SelectKey.SelectKeyType">
            <summary>
            The type of the selectKey tag : 'Pre' or 'Post'
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.SelectKey.isAfter">
            <summary>
            True if it is a post-generated key.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEmptyTagHandler">
            <summary>
            IsEmptyTagHandler represent a isEmpty tag element in a dynamic mapped statement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEmptyTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEmptyTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsEmptyTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
             <summary>
            
             </summary>
             <param name="ctx"></param>
             <param name="tag"></param>
             <param name="parameterObject"></param>
             <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql">
            <summary>
            DynamicSql represent the root element of a dynamic sql statement
            </summary>
            <example>
                 <dynamic prepend="where">...</dynamic>
            </example>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql.#ctor(System.Boolean,MyBatis.DataMapper.Data.DBHelperParameterCache,MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql"/> class.
            </summary>
            <param name="usePositionalParameters">if set to <c>true</c> [use positional parameters].</param>
            <param name="dbHelperParameterCache">The db helper parameter cache.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql.AddChild(MyBatis.DataMapper.Model.Sql.Dynamic.ISqlChild)">
             <summary>
            
             </summary>
             <param name="child"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql.GetRequestScope(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,MyBatis.DataMapper.Session.ISession)">
            <summary>
            Builds a new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/> and the <see cref="!:IDbCommand"/> text to execute.
            </summary>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <param name="mappedStatement">The <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <returns>A new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql.BuildPreparedStatement(MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Scope.RequestScope,System.String)">
            <summary>
            Builds the prepared statement.
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql.Process(MyBatis.DataMapper.Scope.RequestScope,System.Object)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="parameterObject"></param>
             <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql.ProcessBodyChildren(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,System.Object,System.Collections.Generic.IList{MyBatis.DataMapper.Model.Sql.Dynamic.ISqlChild})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="ctx"></param>
             <param name="parameterObject"></param>
             <param name="localChildren"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql.ProcessBodyChildren(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,System.Object,System.Collections.Generic.IEnumerator{MyBatis.DataMapper.Model.Sql.Dynamic.ISqlChild},System.Text.StringBuilder)">
            <summary>
            Processes the body children.
            </summary>
            <param name="request">The request.</param>
            <param name="ctx">The CTX.</param>
            <param name="parameterObject">The parameter object.</param>
            <param name="childEnumerator">The child enumerator.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ObjectStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            no 'resultClass' attribute is specified.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.ObjectStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>
            when no resultClass or resultMap attribute are specified.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.GroupByStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'groupBy' attribute is specified on the resultMap tag.
            </summary>
            <remarks>N+1 Select solution</remarks>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.GroupByStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
            <returns>The result object</returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when no 'select' or
            'resultMapping' attribute exists on a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
             when the 'select' and 'resultMap' attributes 
             on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The reader.</param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.StrongTypedListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for 
            strong typed list.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.StrongTypedListStrategy.Execute(MyBatis.DataMapper.MappedStatements.PostBindind,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.TypeHandlerDeSerializer">
            <summary>
            Summary description for TypeHandlerDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.TypeHandlerDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified config.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.DiscriminatorDeSerializer">
            <summary>
            Summary description for DiscriminatorDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.DiscriminatorDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration,System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory,System.Collections.Generic.IList{MyBatis.DataMapper.Model.ResultMapping.Case})">
            <summary>
            Build a Discriminator object
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="resultClass">The result class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="cases">The case element.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty">
            <summary>
            Summary description for ParameterProperty.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Byte,System.Byte,System.Int32,System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="columnName">Name of the column.</param>
            <param name="callBackName">Name of the call back.</param>
            <param name="clrType">Type of the CLR.</param>
            <param name="dbType">Type of the db.</param>
            <param name="directionAttribute">The direction attribute.</param>
            <param name="nullValue">The null value.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="size">The size.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.CallBackName">
            <summary>
            Specify the custom type handlers to used.
            </summary>
            <remarks>Will be an alias to a class which implement ITypeHandlerCallback</remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.CLRType">
            <summary>
            Specify the CLR type of the parameter.
            </summary>
            <remarks>
            The type attribute is used to explicitly specify the property type to be read.
            Normally this can be derived from a property through reflection, but certain mappings such as
            HashTable cannot provide the type to the framework.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.ColumnName">
            <summary>
            Column Name for output parameter
            in store proccedure.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.DbType">
            <summary>
            Give an entry in the 'DbType' enumeration
            </summary>
            <example >
            For Sql Server, give an entry of SqlDbType : Bit, Decimal, Money...
            <br/>
            For Oracle, give an OracleType Enumeration : Byte, Int16, Number...
            </example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.Direction">
            <summary>
            Indicate the direction of the parameter.
            </summary>
            <example> Input, Output, InputOutput</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.DirectionAttribute">
            <summary>
            The direction attribute of the XML parameter.
            </summary>
            <example> Input, Output, InputOutput</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.GetAccessor">
            <summary>
            Defines a field/property get accessor
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.HasNullValue">
            <summary>
            Tell if a nullValue is defined._nullValue!=null
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.IsComplexMemberName">
            <summary>
            Indicate if we have a complex member name as [avouriteLineItem.Id]
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.NullValue">
            <summary>
            Null value replacement.
            </summary>
            <example>"no_email@provided.com"</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.Precision">
            <summary>
            Column Precision.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.PropertyName">
            <summary>
            Property name used to identify the property amongst the others.
            </summary>
            <example>EmailAddress</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.Scale">
            <summary>
            Column Scale.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.Size">
            <summary>
            Column size.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty.TypeHandler">
            <summary>
            The typeHandler used to work with the parameter.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.IResultPropertySupportEvents">
            <summary>
            Defines the contract for events generated during <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> analyse.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.BindDeSerializer">
            <summary>
            This is the class responsible for de-serializing the "bind" element for usage within class <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql"/>.
            The logic associated with binding all happens within the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.DynamicSql"/>.ProcessBodyChildren method.
            For a description on how the "bind" element can be used, please see: <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind"/>.
            </summary>
            <remarks>
            Created By: Richard Beacroft
            Created Date: 11\10\2013
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.BindDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.BindDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.BindDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.ResultExpression">
            <summary>
            Handles fluent configuration for ResultMapping element
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.#ctor(MyBatis.DataMapper.Configuration.Module.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ResultExpression"/> class.
            </summary>
            <param name="builder">The module builder.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.ToColumnName(System.String)">
            <summary>
            To the Column name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.ToColumnIndex(System.Int32)">
            <summary>
            To the Column index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.UsingResultMap(System.String)">
            <summary>
            Uses the result map.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.WithTypeHandler``1">
            <summary>
            With the type handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.UsingDbType(System.String)">
            <summary>
            Uses the dbtype.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.UsingLazyLoad">
            <summary>
            Uses lazy loadind.
            </summary>
            <value>The using lazy load.</value>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.UsingType(System.String)">
            <summary>
            Uses the type.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.UsingNullValue(System.String)">
            <summary>
            Uses the null value.
            </summary>
            <param name="val">The null value.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ResultExpression.UsingSelect(System.String)">
            <summary>
            Uses the select statment.
            </summary>
            <param name="id">The id statement.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.IModule">
            <summary>
            Represents a set of mapping code configuration and related functionality
            packaged together.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.IModule.Configure(MyBatis.DataMapper.Configuration.IConfigurationEngine)">
            <summary>
            Build <see cref="T:MyBatis.Common.Configuration.IConfiguration"/> element.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.IModule.Load">
            <summary>
            Add code configuration mapping to the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/>.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory">
            <summary>
            Not much of a suprise, this is a factory class for TypeHandler objects.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetTypeHandler(System.Type)">
            <summary>
            Get a TypeHandler for a Type
            </summary>
            <param name="type">the Type you want a TypeHandler for</param>
            <returns>the handler</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetTypeHandler(System.Type,System.String)">
            <summary>
            Get a TypeHandler for a type
            </summary>
            <param name="type">the type you want a TypeHandler for</param>
            <param name="dbType">the database type</param>
            <returns>the handler</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetPrivateTypeHandler(System.Type,System.String)">
            <summary>
             Get a TypeHandler for a type and a dbType type
            </summary>
            <param name="type">the type</param>
            <param name="dbType">the dbType type</param>
            <returns>the handler</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.Register(System.Type,MyBatis.DataMapper.TypeHandlers.ITypeHandler)">
            <summary>
            Register (add) a type handler for a type
            </summary>
            <param name="type">the type</param>
            <param name="handler">the handler instance</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.Register(System.Type,System.String,MyBatis.DataMapper.TypeHandlers.ITypeHandler)">
            <summary>
            Register (add) a type handler for a type and dbType
            </summary>
            <param name="type">the type</param>
            <param name="dbType">the dbType (optional, if dbType is null the handler will be used for all dbTypes)</param>
            <param name="handler">the handler instance</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetUnkownTypeHandler">
            <summary>
            When in doubt, get the "unknown" type handler
            </summary>
            <returns>if I told you, it would not be unknown, would it?</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.IsSimpleType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.ResolveTypeHandler(System.Type,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Resolves the type handler for Get/Set members.
            </summary>
            <param name="classType">Type of the class.</param>
            <param name="memberName">Name of the member.</param>
            <param name="memberType">Type of the member.</param>
            <param name="dbType">Type of the db.</param>
            <param name="forSetter">if set to <c>true</c> [for setter].</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.ResolveTypeHandler(System.Type,System.String,System.String)">
            <summary>
            Resolves the type handler for constructor argument
            </summary>
            <param name="argumentType">Type of the argument.</param>
            <param name="clrType">Type of the CLR.</param>
            <param name="dbType">Type of the db.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetTypeAlias(System.String)">
            <summary>
            Gets a named TypeAlias from the list of available TypeAlias
            </summary>
            <param name="id">The id of the TypeAlias.</param>
            <returns>The TypeAlias.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetType(System.String)">
            <summary>
            Gets the type object from the specific class name.
            </summary>
            <param name="className">The supplied class name.</param>
            <returns>The correpsonding type.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory.AddTypeAlias(System.String,MyBatis.DataMapper.Model.Alias.TypeAlias)">
            <summary>
            Adds a named TypeAlias to the list of available TypeAlias.
            </summary>
            <param name="key">The key name.</param>
            <param name="typeAlias"> The TypeAlias.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Static.StaticSql">
            <summary>
            Represents a simple (not a procedure) mapped statement without any dynamic element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Static.StaticSql.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Data.DBHelperParameterCache,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Static.StaticSql"/> class.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="dbHelperParameterCache">The db helper parameter cache.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Static.StaticSql.GetRequestScope(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,MyBatis.DataMapper.Session.ISession)">
            <summary>
            Builds a new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/> and the sql command text to execute.
            </summary>
            <param name="mappedStatement">The <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <returns>A new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Static.StaticSql.BuildPreparedStatement(MyBatis.DataMapper.Session.ISession,System.String)">
            <summary>
            Build the PreparedStatement
            </summary>
            <param name="session">The session.</param>
            <param name="sql">The SQL.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.DictionaryStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified and
            the type of the result object is <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.DictionaryStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a 'resultClass' attribute is specified on the statement and
            the 'resultClass' attribute is a <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'resultMapping' attribute exists
            on a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> ant the resulMap have a groupBy attribute.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy.#ctor(MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>
            Initializes the <see cref="T:MyBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy"/> class.
            </summary>
            <param name="resultMapStrategy">The result map strategy.</param>
            <param name="circularResultMapStrategy">The circular result map strategy.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
            Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
            when a 'resultMapping' attribute exists
            on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The ResultProperty.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.Exceptions.DataMapperException">
            <summary>
            The DataMapperException is thrown when an error in the SqlMapper component occurs.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Exceptions.DataMapperException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Exceptions.DataMapperException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance 
            using the message parameter.
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:MyBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to 
            the Message property of the passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with a specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:MyBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. 
            </param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.ParameterMapDeSerializer">
            <summary>
            Summary description for ParameterMapDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ParameterMapDeSerializer.Deserialize(MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Model.IModelStore)">
            <summary>
            Deserializes a ParameterMap object
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="config">The config.</param>
            <param name="modelStore">The model store.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer">
            <summary>
            Summary description for IsNotEqualDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEqual"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.TagPropertyProbe">
            <summary>
            This class is responsible for getting the current iterate item object within an iteration. i.e. The property name starts with "[]."
            We do this by navigating up through the parent nodes to determine which of them are iterate elements.
            Once found we get the current iteration context item.
            </summary>
            <remarks>
            Created By: Richard Beacroft
            Created Date: 11\10\2013
            </remarks>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator">
            <summary>
            Cache decorator which deals with null value
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator.#ctor(MyBatis.DataMapper.Model.Cache.ICache)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator"/> class.
            </summary>
            <param name="delegateCache">The delegate cache.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.NullValueDecorator.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache">
            <summary>
            A cache decorator that logs all cache access
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.#ctor(MyBatis.DataMapper.Model.Cache.ICache)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache"/> class.
            </summary>
            <param name="delegateCache">The delegate cache.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Decorators.LoggingCache.HitRatio">
            <summary>
            Gets the hit ratio.
            </summary>
            <value>The hit ratio.</value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.UInt16TypeHandler">
            <summary>
            TypeHandler for UInt16 Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt16TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt16TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.UInt16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler">
            <summary>
            TypeHandler for Nullable TimeSpan Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.DBNullTypeHandler">
            <summary>
            DBNull TypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DBNullTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DBNullTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DBNullTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DBNullTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.DBNullTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.DBNullTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler">
            <summary>
            Custom type handler for adding a TypeHandlerCallback
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.#ctor(MyBatis.DataMapper.TypeHandlers.ITypeHandlerCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Performs processing on a value before it is used to set
            the parameter of a IDbCommand.
            </summary>
            <param name="dataParameter"></param>
            <param name="parameterValue">The value to be set</param>
            <param name="dbType">Data base type</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.CustomTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.ByteTypeHandler">
            <summary>
            Description r閟um閑 de ByteTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler">
            <summary>
            Description r閟um閑 de ByteArrayTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetValueByIndex(System.Int32,System.Data.IDataReader)">
            <summary>
            Gets the index of the value by.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEmpty">
            <summary>
            Represent an isNotEmpty sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEmpty.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEmpty"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty">
            <summary>
            Summary description for ArgumentProperty.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty">
            <summary>
            Summary description for ResultProperty.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyEventSupport">
            <summary>
            Base implementation for <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultPropertySupportEvents"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyEventSupport.RaisePrePropertyEvent(System.Object,System.Object)">
            <summary>
            Raises the <see cref="T:MyBatis.DataMapper.Model.Events.PreCreateEventArgs"/>.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <returns>Returns is used as databse value, to be set on the property</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyEventSupport.RaisePostPropertyEvent(System.Object)">
            <summary>
            Raises the <see cref="T:MyBatis.DataMapper.Model.Events.PostPropertyEventArgs"/>.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyEventSupport.PreProperty">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PrePropertyEventArgs"/> generated before setting the property value in an instance of a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyEventSupport.PostProperty">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PostCreateEventArgs"/> generated after setting the property value in an instance of a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.UNKNOWN_COLUMN_INDEX">
            <summary>
            Unknow Column Index
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.TypeHandlers.ITypeHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="columnName">Name of the column.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="clrType">Type of the CLR.</param>
            <param name="callBackName">Name of the call back.</param>
            <param name="dbType">Type of the db.</param>
            <param name="isLazyLoad">if set to <c>true</c> [is lazy load].</param>
            <param name="nestedResultMapName">Name of the nested result map.</param>
            <param name="nullValue">The null value.</param>
            <param name="select">The select.</param>
            <param name="resultClass">The result class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="typeHandler">The type handler.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field/property .
            </summary>
            <param name="target">Object to set the field/property on.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.GetValue(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets a result argument value.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.GetDataBaseValue(System.Data.IDataReader)">
            <summary>
            Gets the data base value.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.TranslateValue(System.Object)">
            <summary>
            Translates the value tu null value if need
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.IsGenericIList">
            <summary>
            Tell us if the member type implement generic Ilist interface.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.IsIList">
            <summary>
            Tell us if the member type implement Ilist interface.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.ListFactory">
            <summary>
            List factory for <see cref="T:System.Collections.IList"/> property
            </summary>
            <remarks>Used by N+1 Select solution</remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.LazyFactory">
            <summary>
            The lazy loader factory
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.ArgumentStrategy">
            <summary>
            Sets or gets the <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> used to fill the object property.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.PropertyStrategy">
            <summary>
            Sets or gets the <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> used to fill the object property.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.CallBackName">
            <summary>
            Specify the custom type handlers to used.
            </summary>
            <remarks>Will be an alias to a class wchic implement ITypeHandlerCallback</remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.IsLazyLoad">
            <summary>
            Tell us if we must lazy load this property..
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.TypeHandler">
            <summary>
            The typeHandler used to work with the result property.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.DbType">
            <summary>
            Give an entry in the 'DbType' enumeration
            </summary>
            <example >
            For Sql Server, give an entry of SqlDbType : Bit, Decimal, Money...
            <br/>
            For Oracle, give an OracleType Enumeration : Byte, Int16, Number...
            </example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.CLRType">
            <summary>
            Specify the CLR type of the result.
            </summary>
            <remarks>
            The type attribute is used to explicitly specify the property type of the property to be set.
            Normally this can be derived from a property through reflection, but certain mappings such as
            HashTable cannot provide the type to the framework.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.Select">
            <summary>
            The name of the statement to retrieve the property
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.NestedResultMapName">
            <summary>
            The name of a nested ResultMap to set the property
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.PropertyName">
            <summary>
            The property name used to identify the property amongst the others.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.SetAccessor">
            <summary>
            Defines a field/property <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor"/>
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.MemberType">
            <summary>
            Get the field/property type
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.HasNullValue">
            <summary>
            Tell if a nullValue is defined.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.NullValue">
            <summary>
            Null value replacement.
            </summary>
            <example>"noemail@provided.com"</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.NestedResultMap">
            <summary>
            A nested ResultMap use to set a property
            </summary>	
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.IsComplexMemberName">
            <summary>
            Indicate if we have a complex member name as [FavouriteLineItem.Id]
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.ColumnIndex">
            <summary>
            Column Index
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.ColumnName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.ArrayListFactory">
            <summary>
            <see cref="T:MyBatis.Common.Utilities.Objects.IFactory"/> that constructs <see cref="T:System.Collections.ArrayList"/> instance
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultProperty.ArrayListFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Type,System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.TypeHandlers.ITypeHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/> class.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="columnName">Name of the column.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="clrType">Type of the CLR.</param>
            <param name="callBackName">Name of the call back.</param>
            <param name="dbType">Type of the db.</param>
            <param name="nestedResultMapName">Name of the nested result map.</param>
            <param name="nullValue">The null value.</param>
            <param name="select">The select.</param>
            <param name="type">The argument type.</param>
            <param name="resultClass">The result class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="typeHandler">The type handler.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty.ArgumentStrategy">
            <summary>
            Sets or gets the <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> used to fill the object property.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty.ArgumentName">
            <summary>
            Specify the constructor argument name.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty.IsLazyLoad">
            <summary>
            Tell us if we must lazy load this property..
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty.MemberType">
            <summary>
            Get the argument type
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultMap' attribute is specified.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a ResultMap is specified on the statement.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation used when implicit 'ResultMap'.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy.InitializeAutoResultMap(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader,System.Object@)">
            <summary>
            Auto-map the reader to the result object.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
            <returns>The AutoResultMap use to map the resultset.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            a an auto result map is used.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement">
            <summary>
            Summary description for DeleteMappedStatement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement.#ctor(MyBatis.DataMapper.Model.IModelStore,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForMap(MyBatis.DataMapper.Session.ISession,System.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="keyProperty"></param>
            <param name="valueProperty"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteInsert(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForList(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForRowDelegate(MyBatis.DataMapper.Session.ISession,System.Object,MyBatis.DataMapper.RowDelegate)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="rowDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForObject(MyBatis.DataMapper.Session.ISession,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Data.DbCommandDecorator">
            <summary>
            Decorate an <see cref="T:System.Data.IDbCommand"></see>
            to auto move to next ResultMap on ExecuteReader call. 
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.#ctor(System.Data.IDbCommand,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Data.DbCommandDecorator"/> class.
            </summary>
            <param name="dbCommand">The db command.</param>
            <param name="request">The request scope</param>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#Cancel">
            <summary>
            Attempts to cancels the execution of an <see cref="T:System.Data.IDbCommand"></see>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#CreateParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.IDbDataParameter"></see> object.
            </summary>
            <returns>An IDbDataParameter object.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#ExecuteNonQuery">
            <summary>
            Executes an SQL statement against the Connection object of a .NET Framework data provider, and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.InvalidOperationException">The connection does not exist.-or- The connection is not open. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"></see> against the <see cref="P:System.Data.IDbCommand.Connection"></see>, and builds an <see cref="T:System.Data.IDataReader"></see> using one of the <see cref="T:System.Data.CommandBehavior"></see> values.
            </summary>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"></see> values.</param>
            <returns>
            An <see cref="T:System.Data.IDataReader"></see> object.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#ExecuteReader">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"></see> against the <see cref="P:System.Data.IDbCommand.Connection"></see> and builds an <see cref="T:System.Data.IDataReader"></see>.
            </summary>
            <returns>
            An <see cref="T:System.Data.IDataReader"></see> object.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>
            The first column of the first row in the resultset.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#Prepare">
            <summary>
            Creates a prepared (or compiled) version of the command on the data source.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.OleDb.OleDbCommand.Connection"></see> is not set.-or- The <see cref="P:System.Data.OleDb.OleDbCommand.Connection"></see> is not <see cref="M:System.Data.OleDb.OleDbConnection.Open"></see>. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DbCommandDecorator.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
            <value></value>
            <returns>The text command to execute. The default value is an empty string ("").</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value></value>
            <returns>The time (in seconds) to wait for the command to execute. The default value is 30 seconds.</returns>
            <exception cref="T:System.ArgumentException">The property value assigned is less than 0. </exception>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#CommandType">
            <summary>
            Indicates or specifies how the <see cref="P:System.Data.IDbCommand.CommandText"></see> property is interpreted.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Data.CommandType"></see> values. The default is Text.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#Connection">
            <summary>
            Gets or sets the <see cref="T:System.Data.IDbConnection"></see> used by this instance of the <see cref="T:System.Data.IDbCommand"></see>.
            </summary>
            <value></value>
            <returns>The connection to the data source.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#Parameters">
            <summary>
            Gets the <see cref="T:System.Data.IDataParameterCollection"></see>.
            </summary>
            <value></value>
            <returns>The parameters of the SQL statement or stored procedure.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#Transaction">
            <summary>
            Gets or sets the transaction within which the Command object of a .NET Framework data provider executes.
            </summary>
            <value></value>
            <returns>the Command object of a .NET Framework data provider executes. The default value is null.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Data.DbCommandDecorator.System#Data#IDbCommand#UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow"></see> when used by the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)"></see> method of a <see cref="T:System.Data.Common.DbDataAdapter"></see>.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Data.UpdateRowSource"></see> values. The default is Both unless the command is automatically generated. Then the default is None.</returns>
            <exception cref="T:System.ArgumentException">The value entered was not one of the <see cref="T:System.Data.UpdateRowSource"></see> values. </exception>
        </member>
        <member name="T:MyBatis.DataMapper.Data.DataReaderTransformer">
            <summary>
            For <see cref="T:System.Data.IDataReader"/> which don't support M.A.R.S, wraps the current <see cref="T:System.Data.IDataReader"/>
            in an <see cref="T:MyBatis.DataMapper.Data.InMemoryDataReader"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.DataReaderTransformer.Transform(System.Data.IDataReader,MyBatis.Common.Data.IDbProvider)">
            <summary>
             Creates a DataReaderAdapter from a <see cref="T:System.Data.IDataReader"/>
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> which holds the records from the Database.</param>
            <param name="dbProvider">The databse provider <see cref="T:MyBatis.Common.Data.IDbProvider"/></param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.CaseDeSerializer">
            <summary>
            Summary description for CaseDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.CaseDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Build a Case object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>a Case object</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsNullDeSerializer">
            <summary>
            Summary description for IsNullDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNullDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsNullDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNullDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNull"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer">
            <summary>
            Summary description for IsNotEmptyDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotEmpty"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsEqualDeSerializer">
            <summary>
            Summary description for IsEqualDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsEqualDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsEqualDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsEqualDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEqual"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.DeleteDeSerializer">
            <summary>
            Summary description for DeleteDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.DeleteDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a <see cref="T:MyBatis.DataMapper.Model.Statements.Delete"/> object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <param name="configurationSetting"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ParameterMapping.InlineParameterMapParser">
            <summary>
            Builds Parameter property for Inline Parameter Map.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.InlineParameterMapParser.ParseInlineParameterMap(MyBatis.DataMapper.DataExchange.DataExchangeFactory,System.String,MyBatis.DataMapper.Model.Statements.IStatement,System.String)">
            <summary>
            Parse Inline ParameterMap
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="statementId">The statement id.</param>
            <param name="statement">The statement.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <returns>A new sql command text.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.InlineParameterMapParser.HasBindingExpression(System.String)">
            <summary>
            This is used to 
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.InlineParameterMapParser.NewParseMapping(System.String,System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory,System.String)">
            <summary>
            Parse inline parameter with syntax as
            #propertyName,type=string,dbtype=Varchar,direction=Input,nullValue=N/A,handler=string,column=null#
            </summary>
            <param name="token">The token.</param>
            <param name="parameterClassType">Type of the parameter class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="statementId">The statement id.</param>
            <returns></returns>
            <example>
            #propertyName,type=string,dbtype=Varchar,direction=Input,nullValue=N/A,handler=string#
            </example>
            <remarks>
            Updated By: Richard Beacroft
            Updated Date: 11\10\2013
            Description: Added ability to specify "null" as value for column want to ignore, just for completeness.
            </remarks>
            <example>
            The following will convert [].Equal to the appropriate full reflection name for the Equal field/property on the current iterate element,
            taking into consideration that the iterate element may be within another iterate element, etc...
            @{[].Equal,column=null,type=string,dbtype=Decimal,direction=Input,nullValue=null,handler=null}
            </example>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.InlineParameterMapParser.OldParseMapping(System.String,System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Parse inline parameter with syntax as
            </summary>
            <param name="token">The token.</param>
            <param name="parameterClassType">Type of the parameter class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <example>
            #propertyName:dbType:nullValue#
            </example>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.ISqlSource">
            <summary>
            Give access to the sql command text
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.ISqlSource.GetSql(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object)">
            <summary>
            Gets the SQL text.
            </summary>
            <param name="mappedStatement">The mapped statement.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag">
            <summary>
            Represents an Xml node
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.GetAttributeName(System.Int32)">
            <summary>
            Gets the name of the attribute.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.GetAttributeValue(System.Int32)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.#ctor(System.Xml.XmlTextReader,MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="tagParent">The tag parent. I</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.LoadAttributes(System.Xml.XmlTextReader,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Loads the attributes.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.ParsePropertyTokens(System.String,MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Replace properties by their values in the given string
            </summary>
            <param name="str">The string.</param>
            <param name="configStore">The config store.</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.Tag.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.Processor.XmlTagHandler">
            <summary>
            Processes a tag element.
            </summary>
            <param name="configurationStore">The configuration store.</param>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler">
            <summary>
            TypeHandler for  Nullable Byte Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Transaction.ITransactionFactory">
            <summary>
            A factory for <c>ITransaction</c> instances.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransactionFactory.Create(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Creates a new <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransaction"/> instance.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler">
            <summary>
            Summary description for IsNotPropertyAvailableTagHandler.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler">
            <summary>
            Summary description for IsPropertyAvailableTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
            <remarks>
            Updated By: Richard Beacroft
            Updated Date: 11\10\2013
            Description: Builds full property name and checks to see if the property is readable.
            Not sure why it doesn't also cater for class Fields?
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler">
            <summary>
            Summary description for IsGreaterEqualTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Alias.TypeHandler.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Alias.TypeHandler"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="dbType">Type of the db.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Alias.TypeHandler.DbType">
            <summary>
            Gets the type of the db.
            </summary>
            <value>The type of the db.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Alias.TypeHandler.Callback">
            <summary>
            Gets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Alias.TypeHandler.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory">
            <summary>
            Factory to get <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory.Get(MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Finds the <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/>.
            </summary>
            <param name="statement">The statement.</param>
            <returns>The <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/></returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy.#ctor(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy"/> class.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="selectArrayStrategy">The select array strategy.</param>
            <param name="selectGenericListStrategy">The select generic list strategy.</param>
            <param name="selectListStrategy">The select list strategy.</param>
            <param name="selectObjectStrategy">The select object strategy.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="selectKeys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsEmptyDeSerializer">
            <summary>
            Summary description for IsEmptyDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsEmptyDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsEmptyDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsEmptyDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEmpty"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.ISession">
            <summary>
            The DataMapper Session contract
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISession.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
            <returns>The connection provided by the DataMapper</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISession.Close">
            <summary>
            End the <c>ISession</c> by disconnecting from the ADO.NET connection and cleaning up.
            </summary>
            <returns>The connection provided by the DataMapper or <see langword="null" /></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISession.BeginTransaction">
            <summary>
            Begin a unit of work and return the associated <c>ITransaction</c> object.
            </summary>
            <returns>A transaction instance</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.ISession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begin a transaction with the specified <c>isolationLevel</c>
            </summary>
            <param name="isolationLevel">Isolation level for the new transaction</param>
            <returns>A transaction instance having the specified isolation level</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Session.ISession.SessionFactory">
            <summary>
            Get the <see cref="T:MyBatis.DataMapper.Session.ISessionFactory"/> that created this instance.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.ISession.Connection">
            <summary>
            Gets the ADO.NET connection.
            </summary>
            <remarks>
            Applications are responsible for calling commit/rollback upon the connection before
            closing the <c>ISession</c>.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Session.ISession.Transaction">
            <summary>
            Get the current associated <c>ITransaction</c> object.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Events.PostPropertyEventArgs">
            <summary>
            Lauchs after setting the property value in an instance of a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.PostPropertyEventArgs.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.SimpleDynamicSqlTextTokenHandler">
            <summary>
            This is used within simple dynamic sql processing to process bindings and property names.
            Please see <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.TextPropertyProbe"/> for more details.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.TextTokenHandlerBase">
            <summary>
            Abstract base class used to handle sql text token parsing.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.Module">
            <summary>
            Base class for code configuration modules. 
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.Module.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.Module"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.Module.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.Module"/> class.
            </summary>
            <param name="nameSpace">The name space.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.Module.Configure(MyBatis.DataMapper.Configuration.IConfigurationEngine)">
            <summary>
            Apply the module to the container.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.Module.Load">
            <summary>
            Override to add code configuration mapping to the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/>.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.CodeConfigurationInterpreter">
             <summary>
             Allows most of the XML normally contained in SqlMapConfig.xml to be expressed in code. SqlMap items 
             continue to be processed as XML resources.
             </summary>
             <remarks>
             Custom properties should be added to an instance of ConfigurationSettings passed into the engine.
             </remarks>
             <example>
             <code>
             
             &lt;sqlMapConfig xmlns="http://ibatis.apache.org/dataMapper" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" &gt;
               &lt;providers uri="file://providers.config"/&gt;	
               &lt;database&gt;
                &lt;provider name="SQLite3"/&gt;
                &lt;dataSource name="ibatisnet.sqlmap" connectionString="Data Source=ibatisnet.sqlite;Version=3;"/&gt;
               &lt;/database&gt;  
               &lt;alias&gt;
                &lt;typeAlias alias="Account" type="MyBatis.DataMapper.Sqlite.Test.Domain.Account, MyBatis.DataMapper.Sqlite.Test"/&gt;
               &lt;/alias&gt;  
               &lt;sqlMaps&gt;
                &lt;sqlMap uri="file://../../Maps/Account.xml"/&gt;
               &lt;/sqlMaps&gt;
             &lt;/sqlMapConfig>
            
             var codeConfig = new CodeConfigurationInterpreter(engine.ConfigurationStore);
             codeConfig.AddDatabase(new SqliteDbProvider(), "Data Source=ibatisnet.sqlite;Version=3;");
             codeConfig.AddAlias(typeof(Account), "Account");
             codeConfig.AddSqlMap("file://../../Maps/Account.xml");
             </code>
             </example>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.CodeConfigurationInterpreter.#ctor(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Allows adding items to the IConfigurationStore before ProcessResource is called.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.CodeConfigurationInterpreter.ProcessResource(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.CodeConfigurationInterpreter.AddAlias(System.Type,System.String)">
            <summary>
            Adds a Type alias to the store.
            </summary>
            <remarks>
            Uses ConfigConstants.ELEMENT_TYPEALIAS as the value for IConfiguration.Type.
            </remarks>
            <example>
            <code>
            &lt;alias&gt;
             &lt;typeAlias alias="Account" type="MyBatis.DataMapper.Sqlite.Test.Domain.Account, MyBatis.DataMapper.Sqlite.Test"/&gt;
            &lt;/alias&gt;
            </code>
            </example>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.CodeConfigurationInterpreter.AddDatabase(MyBatis.Common.Data.IDbProvider,System.String)">
            <summary>
            Adds a database configuration item to the store.
            </summary>
            <example>
            <code>
            &lt;database&gt;
             &lt;provider name="SQLite3"/&gt;
             &lt;dataSource name="ibatisnet.sqlmap" connectionString="Data Source=ibatisnet.sqlite;Version=3;"/&gt;
            &lt;/database&gt;  
            </code>
            </example>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.CodeConfigurationInterpreter.AddSqlMap(System.String,System.Boolean)">
            <summary>
            Adds an XML sql map configuration item.
            </summary>
            <param name="uri">A URI to XML data.</param>
            <param name="validate">Validate the XML sqlMap file using SqlMap.xsd</param>
            <example>
            <code>
            &lt;sqlMaps&gt;
             &lt;sqlMap uri="file://../../Maps/Account.xml"/&gt;
            &lt;/sqlMaps&gt;
            </code>
            </example>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.CodeConfigurationInterpreter.Resource">
            <summary>
            Unused. Always returns null.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler">
            <summary>
            Description r閟um閑 de TimespanTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.IsSimpleType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler">
            <summary>
            TypeHandler for Nullable Single type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql">
            <summary>
            Represents a sql commqnd text which contains $property$ (old syntax) or ${property}
            to be replace 
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Data.DBHelperParameterCache,System.String,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql"/> class.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="dbHelperParameterCache">The db helper parameter cache.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql.GetSql(System.Object)">
            <summary>
            Gets the SQL.
            </summary>
            <param name="parameterObject">The parameter object.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql.IsSimpleDynamicSql(System.String)">
            <summary>
            Determines whether the specified SQL statement is dynamic SQL.
            </summary>
            <param name="sqlStatement">The SQL statement.</param>
            <returns>
            	<c>true</c> if is dynamic SQL otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql.ProcessDynamicElements(System.Object)">
            <summary>
            Processes the dynamic elements, 
            replace $property$ (old syntax) or ${property} (V3 syntax) element by her value
            </summary>
            <param name="parameterObject">The parameter object.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql.ProcessDynamicElementsOldSyntax(System.Object)">
            <summary>
            Processes the dynamic elements with old syntax $property$
            </summary>
            <param name="parameterObject">The parameter object.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql.GetRequestScope(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,MyBatis.DataMapper.Session.ISession)">
            <summary>
            Builds a new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/> and the sql command text to execute.
            </summary>
            <param name="mappedStatement">The <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <returns>A new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.SimpleDynamic.SimpleDynamicSql.BuildPreparedStatement(MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Scope.RequestScope,System.String)">
            <summary>
            Build the PreparedStatement
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyCollection">
            <summary>
            A ResultProperty Collection.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyCollection.Contains(System.String)">
            <summary>
            Indicate if a ResultProperty is in the collection with the given property name
            </summary>
            <param name="propertyName">A property name</param>
            <returns>True if is in else false</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyCollection.FindByPropertyName(System.String)">
            <summary>
            Finds a property by his name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ResultMapCollection">
            <summary>
            Collection of <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on an <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> and the object property is 
            different from an <see cref="T:System.Array"/> or an <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an object property.
             on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The current <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ParameterMapping.ParameterPropertyCollection">
            <summary>
            A ParameterProperty Collection.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap">
            <summary>
            Summary description for ParameterMap.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.#ctor(System.String,System.String,System.String,System.Type,MyBatis.DataMapper.DataExchange.IDataExchange,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="className">Name of the class.</param>
            <param name="extendMap">The extend map.</param>
            <param name="type">The type.</param>
            <param name="dataExchange">The data exchange.</param>
            <param name="usePositionalParameters">if set to <c>true</c> [use positional parameters].</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.AddParameterProperty(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty)">
            <summary>
            Add a ParameterProperty to the ParameterProperty list.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.GetParameterIndex(System.String)">
            <summary>
            Retrieve the index for array property
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.GetProperty(System.Int32)">
            <summary>
            Get the ParameterProperty at index.
            </summary>
            <param name="index">Index</param>
            <returns>A ParameterProperty</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.GetProperty(System.String)">
            <summary>
            Get a ParameterProperty by his name.
            </summary>
            <param name="name">The name of the ParameterProperty</param>
            <returns>A ParameterProperty</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.GetPropertyNameArray">
            <summary>
            Get all Parameter Property Name
            </summary>
            <returns>A string array</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.InsertParameterProperty(System.Int32,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty)">
            <summary>
            Insert a ParameterProperty ine the ParameterProperty list at the specified index..
            </summary>
            <param name="index">
            The zero-based index at which ParameterProperty should be inserted.
            </param>
            <param name="property">The ParameterProperty to insert. </param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.SetOutputParameter(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Set output parameter value.
            </summary>
            <param name="target">The target.</param>
            <param name="mapping">The mapping.</param>
            <param name="dataBaseValue">The data base value.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.SetParameter(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Data.IDataParameter,System.Object)">
            <summary>
            Set parameter value, replace the null value if any.
            </summary>
            <param name="mapping"></param>
            <param name="dataParameter"></param>
            <param name="parameterValue"></param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.Class">
            <summary>
            The parameter type class.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.ClassName">
            <summary>
            The parameter class name.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.ExtendMap">
            <summary>
            Extend Parametermap attribute
            </summary>
            <remarks>The id of a ParameterMap</remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.HasOutputParameter">
            <summary>
            Gets or sets a value indicating whether this ParameterMap has output parameter.
            </summary>
            <value>
            	<c>true</c> if this instance has output parameter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.Id">
            <summary>
            Identifier used to identify the ParameterMap amongst the others.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.Properties">
            <summary>
            The collection of ParameterProperty
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ParameterMapping.ParameterMap.PropertiesList">
            <summary>
            Gets the properties list.
            </summary>
            <value>The properties list.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Transaction.ITransaction">
            <summary>
            Represents a transaction abstraction to be performed at a data source.
            </summary>
            <remarks>
            A transaction is associated with a <c>ISession</c> and is usually instanciated by a call to
            <c>ISession.BeginTransaction()</c>. 
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransaction.Begin(System.Data.IsolationLevel)">
            <summary>
            Begin the transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">Isolation level of the transaction</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransaction.Commit">
            <summary>
            Flush the associated <c>ISession</c> and end the unit of work.
            </summary>
            <remarks>
            This method will commit the underlying transaction if and only if the transaction
            was initiated by this object.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransaction.Rollback">
            <summary>
            Force the underlying transaction to roll back.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransaction.Enlist(System.Data.IDbCommand)">
            <summary>
            Enlist the <see cref="T:System.Data.IDbCommand"/> in the current Transaction.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to enlist.</param>
            <remarks>
            It is okay for this to be a no op implementation.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.ITransaction.Complete">
            <summary>
            Indicates that all operations within the scope are completed successfully. 
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.ITransaction.IsStarted">
            <summary>
            Gets a value indicating whether this instance is started.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransaction"/> is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.ITransaction.WasRollback">
            <summary>
            Was the transaction rolled back or set to rollback only?
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.ITransaction.WasCommit">
            <summary>
            Was the transaction successfully committed?
            </summary>
            <remarks>
            This method could return <see langword="false" /> even after successful invocation of <c>Commit()</c>
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.Begin(System.Data.IsolationLevel)">
            <summary>
            Begin the transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">Isolation level of the transaction</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.Commit">
            <summary>
            Flush the associated <c>ISession</c> and end the unit of work.
            </summary>
            <remarks>
            This method will commit the underlying transaction if and only if the transaction
            was initiated by this object.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.Rollback">
            <summary>
            Force the underlying transaction to roll back.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.Enlist(System.Data.IDbCommand)">
            <summary>
            Enlist the <see cref="T:System.Data.IDbCommand"/> in the current Transaction.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to enlist.</param>
            <remarks>
            It is okay for this to be a no op implementation.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.Complete">
            <summary>
            Indicates that all operations within the scope are completed successfully.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.IsStarted">
            <summary>
            Gets a value indicating whether this instance is started.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransaction"/> is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.WasRollback">
            <summary>
            Was the transaction rolled back or set to rollback only?
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.External.ExternalTransaction.WasCommit">
            <summary>
            Was the transaction successfully committed?
            </summary>
            <value></value>
            <remarks>
            This method could return <see langword="false"/> even after successful invocation of <c>Commit()</c>
            </remarks>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentPropertyCollection">
            <summary>
            An ArgumentProperty Collection.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ArgumentPropertyCollection.Contains(System.String)">
            <summary>
            Indicate if a ResultProperty is in the collection with the given property name
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <returns>True if is in else false</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ArgumentPropertyCollection.FindByPropertyName(System.String)">
            <summary>
            Finds an argument by his name.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.DataMapperLocalSessionScope">
            <summary>
            Local SessionScope management
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperLocalSessionScope.#ctor(MyBatis.DataMapper.Session.ISessionStore,MyBatis.DataMapper.Session.ISessionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.DataMapperLocalSessionScope"/> class.
            </summary>
            <param name="sessionStore">The session store.</param>
            <param name="sessionFactory">The session factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperLocalSessionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.DataMapperLocalSessionScope.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.DataRowStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified and
            the type of the result object is <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.DataRowStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler">
            <summary>
             Implementation of TypeHandler for dealing with unknown types
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.#ctor(MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory)">
            <summary>
            Constructor to create via a factory
            </summary>
            <param name="factory">the factory to associate this with</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Performs processing on a value before it is used to set
            the parameter of a IDbCommand.
            </summary>
            <param name="dataParameter"></param>
            <param name="parameterValue">The value to be set</param>
            <param name="dbType">Data base type</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.Equals(System.Object,System.String)">
            <summary>
             Compares two values (that this handler deals with) for equality
            </summary>
            <param name="obj">one of the objects</param>
            <param name="str">the other object as a String</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.UnknownTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.UInt64TypeHandler">
            <summary>
            Summary description for UInt64TypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt64TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt64TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.UInt64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.IResultGetter">
            <summary>
            Allows values to be retrieved from the underlying IDataReader.
            TypeHandlerCallback implementations use this interface to
            get values that they can subsequently manipulate before
            having them returned.  																																																														   * or index with these methods.
            </summary>
            <remarks>
            There is no need to implement this.  The implementation
            will be passed into the TypeHandlerCallback automatically.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.IResultGetter.DataReader">
            <summary>
            Returns the underlying IDataReader
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.IResultGetter.Value">
            <summary>
            Get the parameter value
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.GuidTypeHandler">
            <summary>
            Description r閟um閑 de GuidTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.GuidTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.GuidTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.GuidTypeHandler.GetValue(System.Int32,System.Data.IDataRecord)">
            <summary>
            Gets the value.
            </summary>
            <param name="index">The index.</param>
            <param name="dataRecord">The data record.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.GuidTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.GuidTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.GuidTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.PreparedStatement">
            <summary>
            Construct the list of IDataParameters for the statement and prepare the sql. 
            </summary>
            <remarks>
            This class is used as a template for filling the parameters
            on a real IDbCommand. The template is constructured once and its values are copied
            to the current command's parameter as appropriate.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.PreparedStatement.DbParametersName">
            <summary>
            The list of IDataParameter name used by the PreparedSql.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.PreparedStatement.DbParameters">
            <summary>
            The list of IDataParameter to use for the PreparedSql.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.PreparedStatement.PreparedSql">
            <summary>
            The prepared statement.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext">
            <summary>
            Summary description for SqlTagContext.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.AddAttribute(System.Object,System.Object)">
            <summary>
            Adds the attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.GetAttribute(System.Object)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.GetParameterMappings">
            <summary>
            Gets the parameter mappings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.GetWriter">
            <summary>
            Gets the writer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.RememberBinding(MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Bind)">
            <summary>
            NOTE: Seems as though this class was written to not have knowledge of BaseTag, I just don't understand why.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.RemoveAttibute(System.Object)">
            <summary>
            Removes the attribute.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.AddParameterMapping(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty)">
            <summary>
            Adds the parameter mapping.
            </summary>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.BodyText">
            <summary>
            Gets the body text.
            </summary>
            <value>The body text.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.FirstNonDynamicTagWithPrepend">
            <summary>
            Gets or sets the first non dynamic tag with prepend.
            </summary>
            <value>The first non dynamic tag with prepend.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext.IsOverridePrepend">
            <summary>
            Gets or sets a value indicating whether this instance is override prepend.
            </summary>
            <value>
            	<c>true</c> if this instance is override prepend; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.Discriminator">
            <summary>
            Summary description for Discriminator.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.ResultMapping.Discriminator.resultMaps">
            <summary>
            (discriminatorValue (string), ResultMap)
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.ResultMapping.Discriminator.cases">
            <summary>
            The case value who used this discriminator
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.Discriminator.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.Collections.Generic.IList{MyBatis.DataMapper.Model.ResultMapping.Case},System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Constructor
            </summary>
            <param name="callBackName">Name of the call back.</param>
            <param name="clrType">Type of the CLR.</param>
            <param name="columnIndex">Index of the column.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dbType">Type of the db.</param>
            <param name="nullValue">The null value.</param>
            <param name="cases">The cases.</param>
            <param name="resultClass">The result class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.Discriminator.Initialize(MyBatis.DataMapper.Model.IModelStore)">
            <summary>
            Initialize the Discriminator
            </summary>
            <param name="modelStore">The model store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.Discriminator.GetSubMap(System.String)">
            <summary>
            Find the Case to use.
            </summary>
            <param name="discriminatorValue">the discriminator value</param>
            <returns>The find ResultMap</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Discriminator.CallBackName">
            <summary>
            Specify the custom type handlers to used.
            </summary>
            <remarks>Will be an alias to a class wchic implement ITypeHandlerCallback</remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Discriminator.DbType">
            <summary>
            Give an entry in the 'DbType' enumeration
            </summary>
            <example >
            For Sql Server, give an entry of SqlDbType : Bit, Decimal, Money...
            <br/>
            For Oracle, give an OracleType Enumeration : Byte, Int16, Number...
            </example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Discriminator.CLRType">
            <summary>
            Specify the CLR type of the result.
            </summary>
            <remarks>
            The type attribute is used to explicitly specify the property type of the property to be set.
            Normally this can be derived from a property through reflection, but certain mappings such as
            HashTable cannot provide the type to the framework.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Discriminator.ColumnIndex">
            <summary>
            Column Index
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Discriminator.ColumnName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Discriminator.NullValue">
            <summary>
            Null value replacement.
            </summary>
            <example>"no_email@provided.com"</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.Discriminator.ResultProperty">
            <summary>
            The underlying ResultProperty
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Array"/> <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy.Set(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an Array property
             on the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy.Get(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.IResultMap,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.ArrayStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.ArrayStrategy.Execute(MyBatis.DataMapper.MappedStatements.PostBindind,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.ListDataExchange">
            <summary>
            IDataExchange implementation for IList objects
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ListDataExchange.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Cosntructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ListDataExchange.GetData(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ListDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ListDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.DotNetObjectDataExchange">
            <summary>
            IDataExchange implementation for .NET object
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DotNetObjectDataExchange.#ctor(System.Type,MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.DataExchange.DotNetObjectDataExchange"/> class.
            </summary>
            <param name="parameterClass">The parameter class.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DotNetObjectDataExchange.GetData(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DotNetObjectDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DotNetObjectDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.DictionaryDataExchange">
            <summary>
            DataExchange implementation for IDictionary objects
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DictionaryDataExchange.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.DataExchange.DictionaryDataExchange"/> class.
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DictionaryDataExchange.GetData(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DictionaryDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="target"></param>
            <param name="mapping"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DictionaryDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <param name="target"></param>
            <param name="mapping"></param>
            <param name="dataBaseValue"></param>
            <remarks>Use to set value on output parameter</remarks>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.ComplexDataExchange">
            <summary>
            A IDataExchange implemtation for working with .NET object
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ComplexDataExchange.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.DataExchange.ComplexDataExchange"/> class.
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ComplexDataExchange.GetData(MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ComplexDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.ComplexDataExchange.SetData(System.Object@,MyBatis.DataMapper.Model.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer">
            <summary>
            Summary description for IsNotParameterPresentDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotParameterPresent"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.DataMapperSession">
            <summary>
            Default implementation of the <see cref="T:MyBatis.DataMapper.Session.ISession"/> contract. 
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.#ctor(System.Data.IDbConnection,MyBatis.DataMapper.Session.ISessionFactory,MyBatis.DataMapper.Session.Transaction.ITransactionManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.DataMapperSession"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="factory">The factory.</param>
            <param name="transactionManager">The transaction manager.</param>
            <param name="autoClose">if set to <c>true</c> [auto close].</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
            <returns>The connection provided by the DataMapper</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.Close">
            <summary>
            End the <c>ISession</c> by disconnecting from the ADO.NET connection and cleaning up.
            </summary>
            <returns>
            The connection provided by the DataMapper or <see langword="null"/>
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.BeginTransaction">
            <summary>
            Begin a unit of work and return the associated <c>ITransaction</c> object.
            </summary>
            <returns>A transaction instance</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begin a transaction with the specified <c>isolationLevel</c>
            </summary>
            <param name="isolationLevel">Isolation level for the new transaction</param>
            <returns>
            A transaction instance having the specified isolation level
            </returns>
        </member>
        <member name="F:MyBatis.DataMapper.Session.DataMapperSession.isAlreadyDisposed">
            <summary>
            A flag to indicate if <c>Disose()</c> has been called.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MyBatis.DataMapper.Session.DataMapperSession"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DataMapperSession.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Session.DataMapperSession.SessionFactory">
            <summary>
            Get the <see cref="T:MyBatis.DataMapper.Session.ISessionFactory"/> that created this instance.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Session.DataMapperSession.Connection">
            <summary>
            Gets the ADO.NET connection.
            </summary>
            <value></value>
            <remarks>
            Applications are responsible for calling commit/rollback upon the connection before
            closing the <c>ISession</c>.
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Session.DataMapperSession.Transaction">
            <summary>
            Get the current associated <c>ITransaction</c> object.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.ResultGetterImpl">
            <summary>
            Description r閟um閑 de ResultGetterImpl.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ResultGetterImpl.#ctor(System.Data.IDataReader,System.Int32)">
            <summary>
            Creates an instance for a IDataReader and column index
            </summary>
            <param name="dataReader">The dataReader</param>
            <param name="columnIndex">the column index</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ResultGetterImpl.#ctor(System.Data.IDataReader,System.String)">
            <summary>
            Creates an instance for a IDataReader and column name
            </summary>
            <param name="dataReader">The dataReader</param>
            <param name="columnName">the column name</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.ResultGetterImpl.#ctor(System.Object)">
            <summary>
            Creates an instance for an output parameter
            </summary>
            <param name="outputValue">value of an output parameter (store procedure)</param>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ResultGetterImpl.DataReader">
            <summary>
            Returns the underlying IDataReader
            </summary>
            <remarks>Null for an output parameter</remarks>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.ResultGetterImpl.Value">
            <summary>
            Get the parameter value
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler">
            <summary>
            TypeHandler for Nullable UInt16 Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler">
            <summary>
            TypeHandler for Nullable Guid type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Int16TypeHandler">
            <summary>
            Description r閟um閑 de Int16TypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int16TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int16TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Int16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Static.ProcedureSql">
            <summary>
            Represents a procedure mapped statement without dynamic element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Static.ProcedureSql.#ctor(MyBatis.DataMapper.DataExchange.DataExchangeFactory,MyBatis.DataMapper.Data.DBHelperParameterCache,System.String,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Static.ProcedureSql"/> class.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="dbHelperParameterCache">The db helper parameter cache.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Static.ProcedureSql.GetRequestScope(MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,MyBatis.DataMapper.Session.ISession)">
            <summary>
            Builds a new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/> and the sql command text to execute.
            </summary>
            <param name="mappedStatement">The <see cref="T:MyBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <returns>A new <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Static.ProcedureSql.BuildPreparedStatement(MyBatis.DataMapper.Session.ISession,MyBatis.DataMapper.Scope.RequestScope,System.String)">
            <summary>
            Build the PreparedStatement
            </summary>
            <param name="session">The session.</param>
            <param name="request">The request.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.SqlText">
            <summary>
            Summary description for SqlText.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.SqlText.IsWhiteSpace">
             <summary>
            
             </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.SqlText.Parameters">
            <summary>
            Core parameters
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.SqlText.Parent">
            <summary>
            Parent tag element
            This is used to determine the parent tag node in order that we can ascertain how to determine
            which iterate node we may be within if the "Text" property value contains a property name that
            is relative to the current iterate item. i.e. "[]."
            </summary>
            <remarks>
            Created By: Richard Beacroft
            Created Date: 11\10\2013
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Sql.Dynamic.SqlText.Text">
             <summary>
            
             </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsLessThan">
            <summary>
            Represent an isLessThan sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsLessThan.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsLessThan"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEqual">
            <summary>
            Represent an isEqual sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEqual.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.CacheModel">
            <summary>
            Summary description for CacheModel.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Model.Cache.CacheModel.NULL_OBJECT">
            <summary>
            This is used to represent null objects that are returned from the cache so 
            that they can be cached, too.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheModel.#ctor(System.String,System.String,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.CacheModel"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="implementation">The cache implementation.</param>
            <param name="flushInterval">The flush interval.</param>
            <param name="size">The size.</param>
            <param name="isShare">if set to <c>true</c> [is share].</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheModel.RegisterTriggerStatement(MyBatis.DataMapper.MappedStatements.IMappedStatement)">
            <summary>
            Event listener
            </summary>
            <param name="mappedStatement">A MappedStatement on which we listen ExecuteEventArgs event.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.CacheModel.FlushHandler(System.Object,MyBatis.DataMapper.ExecuteEventArgs)">
            <summary>
            FlushHandler which clear the cache 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.CacheModel.Id">
            <summary>
            Identifier used to identify the CacheModel amongst the others.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.CacheModel.StatementFlushNames">
            <summary>
            Gets the statement flush on execute names.
            </summary>
            <value>The statement flush names.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.CacheModel.Cache">
            <summary>
            Set the cache implementation
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.CacheModel.Item(MyBatis.DataMapper.Model.Cache.CacheKey)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory">
            <summary>
            Factory to get <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory.Get(MyBatis.DataMapper.Model.ResultMapping.ResultProperty)">
            <summary>
            Finds the <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/>.
            </summary>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/>.</param>
            <returns>The <see cref="T:MyBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.SelectDeSerializer">
            <summary>
            Summary description for SelectDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.SelectDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a <see cref="T:MyBatis.DataMapper.Model.Statements.Select"/> object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <param name="configurationSetting"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer">
            <summary>
            Summary description for IsNotPropertyAvailableDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotPropertyAvailable"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsLessThanDeSerializer">
            <summary>
            Summary description for IsLessThanDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsLessThanDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsLessThanDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsLessThanDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.Iterate"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ResultMapEventSupport">
            <summary>
            Base implementation for <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMapEvents"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMapEventSupport.RaisePreCreateEvent(System.Object[])">
            <summary>
            Raises the <see cref="T:MyBatis.DataMapper.Model.Events.PreCreateEventArgs"/>.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
            Returns is used as the parameters used to create the object
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMapEventSupport.RaisePostCreateEvent(System.Object)">
            <summary>
            Raises the <see cref="T:MyBatis.DataMapper.Model.Events.PostCreateEventArgs"/>.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            Returns is used as the parameters used to create the object
            </returns>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.ResultMapEventSupport.PreCreate">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PreCreateEventArgs"/> generated before creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.ResultMapEventSupport.PostCreate">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PostCreateEventArgs"/> generated after creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.DynamicSqlTextTokenHandler">
            <summary>
            This is used within dynamic sql processing to process bindings and property names.
            Please see <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.TextPropertyProbe"/> for more details.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Parsers.ReflectionMapper">
            <summary>
            This is used to parse property names that refer to the current iterate item. i.e. "[]."
            This place holder is replaced with the current iterate index building up the full path
            by looking at the parent tag nodes.
            </summary>
            <remarks>
            Created By: Richard Beacroft
            Created Date: 11\10\2013
            </remarks>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler">
            <summary>
            TypeHandler for Nullable Boolean Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.BooleanTypeHandler">
            <summary>
            Boolean TypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BooleanTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BooleanTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BooleanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.BooleanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.BooleanTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.Delete">
            <summary>
            Summary description for delete.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Delete.#ctor(System.String,System.Type,MyBatis.DataMapper.Model.ParameterMapping.ParameterMap,System.Type,MyBatis.DataMapper.Model.ResultMapping.ResultMapCollection,System.Type,MyBatis.Common.Utilities.Objects.IFactory,MyBatis.DataMapper.Model.Cache.CacheModel,System.Boolean,System.String,MyBatis.DataMapper.ISqlSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.Delete"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="parameterMap">The parameter map.</param>
            <param name="resultClass">The result class.</param>
            <param name="resultMaps">The result maps.</param>
            <param name="listClass">The list class.</param>
            <param name="listClassFactory">The list class factory.</param>
            <param name="cacheModel">The cache model.</param>
            <param name="remapResults">if set to <c>true</c> [remap results].</param>
            <param name="extends">The extends.</param>
            <param name="sqlSource">The SQL source.</param>
            <param name="preserveWhitespace">Preserve whitespace.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEqualTagHandler">
            <summary>
            Summary description for IsNotEqualTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEqualTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEqualTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsParameterPresent">
            <summary>
            Represent an isParameterPresent sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsParameterPresent.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsParameterPresent"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Implementation.FifoCache">
            <summary>
            Cache following a FIFO (first in, first out) algorithm
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.FifoCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.Implementation.FifoCache"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.FifoCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.FifoCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.FifoCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Implementation.FifoCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.RowDelegate">
            <summary>
            A delegate called once per row in the QueryWithRowDelegate method
            </summary>
            <param name="obj">The object currently being processed.</param>
            <param name="parameterObject">The optional parameter object passed into the QueryWithRowDelegate method.</param>
            <param name="list">The IList that will be returned to the caller.</param>
        </member>
        <member name="T:MyBatis.DataMapper.RowDelegate`1">
            <summary>
            A delegate called once per row in the QueryWithRowDelegate method
            </summary>
            <param name="obj">The object currently being processed.</param>
            <param name="parameterObject">The optional parameter object passed into the QueryWithRowDelegate method.</param>
            <param name="list">The IList that will be returned to the caller.</param>
        </member>
        <member name="T:MyBatis.DataMapper.DictionaryRowDelegate`2">
            <summary>
            A delegate called once per row in the QueryForMapWithRowDelegate method
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="parameterObject">The optional parameter object passed into the QueryForMapWithRowDelegate method.</param>
            <param name="dictionary">The IDictionary that will be returned to the caller.</param>
        </member>
        <member name="T:MyBatis.DataMapper.DictionaryRowDelegate">
            <summary>
            A delegate called once per row in the QueryForMapWithRowDelegate method
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="parameterObject">The optional parameter object passed into the QueryForMapWithRowDelegate method.</param>
            <param name="dictionary">The IDictionary that will be returned to the caller.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.DeSerializerFactory">
            <summary>
            Summary description for DeSerializerFactory.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.DeSerializerFactory.#ctor(MyBatis.DataMapper.Model.IModelStore)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.DeSerializerFactory"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.DeSerializerFactory.GetDeSerializer(System.String)">
            <summary>
            Gets the deserializer.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.DefaultSessionFactory">
            <summary>
            Default implementation of the <see cref="T:MyBatis.DataMapper.Session.ISessionFactory"/> contract. 
            Create <see cref="T:MyBatis.DataMapper.Session.ISession"/> instance.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DefaultSessionFactory.#ctor(MyBatis.Common.Data.IDataSource,MyBatis.DataMapper.Session.ISessionStore,MyBatis.DataMapper.Session.Transaction.ITransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.DefaultSessionFactory"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="sessionStore">The session store.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DefaultSessionFactory.OpenSession(System.Data.IDbConnection,System.Boolean)">
            <summary>
            Open a <c>ISession</c> on the given connection
            </summary>
            <param name="connection">The connection.</param>
            <param name="autoClose">if set to <c>true</c> [auto close].</param>
            <returns>A session</returns>
            <remarks>
            The <c>ISession</c> is save in the <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DefaultSessionFactory.OpenSession">
            <summary>
            Create a database connection and open a <c>ISession</c> on it.
            </summary>
            <returns>A session</returns>
            <remarks>
            The <c>ISession</c> is save in the <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.DefaultSessionFactory.Dispose">
            <summary>
            Remove the specified session from the <see cref="T:MyBatis.DataMapper.Session.ISessionStore"/>
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Session.DefaultSessionFactory.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.CirularStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation ro resolve circular refrence when 
            a 'keyColumns' attribute is specified on the resultMap tag.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.CirularStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.CirularStrategy.GetCircularKey(MyBatis.DataMapper.Model.ResultMapping.IResultMap,System.Data.IDataReader)">
            <summary>
            Gets the circular key.
            </summary>
            <param name="resultMap">The result map.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Module.ParameterExpression">
            <summary>
            Handles fluent configuration for ParameterMap element
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.#ctor(MyBatis.DataMapper.Configuration.Module.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Module.ParameterExpression"/> class.
            </summary>
            <param name="builder">The module builder.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.ToColumn(System.String)">
            <summary>
            To the Column name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.WithTypeHandler``1">
            <summary>
            With the type handler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.UsingDbType(System.String)">
            <summary>
            Uses the dbtype.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.UsingType(System.String)">
            <summary>
            Uses the type.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.UsingNullValue(System.String)">
            <summary>
            Uses the null value.
            </summary>
            <param name="val">The null value.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.WithDirection(System.String)">
            <summary>
            With the direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.WithSize(System.String)">
            <summary>
            With the size
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.WithScale(System.String)">
            <summary>
            With the scale
            </summary>
            <param name="scale">The scale.</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Module.ParameterExpression.WithPrecision(System.String)">
            <summary>
            With the precision
            </summary>
            <param name="precision">The precision.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler">
            <summary>
            TypeHandler for Nullable Int16 type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.EnumTypeHandler">
            <summary>
            Summary description for EnumTypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.EnumTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.EnumTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.EnumTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.EnumTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.EnumTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.EnumTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.Select">
            <summary>
            Summary description for Select.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Select.#ctor(System.String,System.Type,MyBatis.DataMapper.Model.ParameterMapping.ParameterMap,System.Type,MyBatis.DataMapper.Model.ResultMapping.ResultMapCollection,System.Type,MyBatis.Common.Utilities.Objects.IFactory,MyBatis.DataMapper.Model.Cache.CacheModel,System.Boolean,System.String,MyBatis.DataMapper.ISqlSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.Select"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="parameterMap">The parameter map.</param>
            <param name="resultClass">The result class.</param>
            <param name="resultMaps">The result maps.</param>
            <param name="listClass">The list class.</param>
            <param name="listClassFactory">The list class factory.</param>
            <param name="cacheModel">The cache model.</param>
            <param name="remapResults">if set to <c>true</c> [remap results].</param>
            <param name="extends">The extends.</param>
            <param name="sqlSource">The SQL source.</param>
            <param name="preserveWhitespace">Preserve whitespace.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEmptyTagHandler">
            <summary>
            Summary description for IsNotEmptyTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEmptyTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEmptyTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsNotEmptyTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotParameterPresent">
            <summary>
            Represent an isNotParameterPresent sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotParameterPresent.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsNotParameterPresent"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsLessEqual">
            <summary>
            Represent an isLessEqual sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsLessEqual.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsLessEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterThan">
            <summary>
            Represent an isGreaterThan sql tag element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterThan.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterThan"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.ListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified and
            the type of the result object is <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.ListStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a ResultClass is specified on the statement and
            the ResultClass is <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.ObjectStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for object.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.PostSelectStrategy.ObjectStrategy.Execute(MyBatis.DataMapper.MappedStatements.PostBindind,MyBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:MyBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:MyBatis.DataMapper.SelectKeyType">
            <summary>
            Indicate if the generated key by a selectKey statement
             concern a pre or post-generated key.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.SelectKeyType.pre">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.SelectKeyType.post">
            <summary>
            
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.CacheKeyType">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.CacheKeyType.Object">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.CacheKeyType.List">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.CacheKeyType.Map">
            <summary>
            
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.DataExchange.DataExchangeFactory">
            <summary>
            Factory for DataExchange objects
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DataExchangeFactory.#ctor(MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory,MyBatis.Common.Utilities.Objects.IObjectFactory,MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.DataExchange.DataExchangeFactory"/> class.
            </summary>
            <param name="typeHandlerFactory">The type handler factory.</param>
            <param name="objectFactory">The object factory.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.DataExchange.DataExchangeFactory.GetDataExchangeForClass(System.Type)">
            <summary>
            Get a DataExchange object for the passed in Class
            </summary>
            <param name="clazz">The class to get a DataExchange object for</param>
            <returns>The IDataExchange object</returns>
        </member>
        <member name="P:MyBatis.DataMapper.DataExchange.DataExchangeFactory.TypeHandlerFactory">
            <summary>
             Getter for the type handler factory
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.DataExchange.DataExchangeFactory.ObjectFactory">
            <summary>
            The factory for object
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.DataExchange.DataExchangeFactory.AccessorFactory">
            <summary>
            The factory which build <see cref="T:MyBatis.Common.Utilities.Objects.Members.ISetAccessor"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.TypeAliasDeSerializer">
            <summary>
            Summary description for TypeAliasDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.TypeAliasDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserialize a TypeAlias object
            </summary>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.ProcedureDeSerializer">
            <summary>
            Summary description for ProcedureDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ProcedureDeSerializer.Deserialize(MyBatis.DataMapper.Model.IModelStore,MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.Configuration.ConfigurationSetting)">
            <summary>
            Deserializes the specified configuration in a <see cref="T:MyBatis.DataMapper.Model.Statements.Procedure"/> object.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="config">The config.</param>
            <param name="configurationSetting"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer">
            <summary>
            Summary description for IsLessEqualDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsLessEqual"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer">
            <summary>
            Summary description for IsGreaterThanDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterThan"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.CacheModelDeSerializer">
            <summary>
            Summary description for CacheModelDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.CacheModelDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration,MyBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Deserializes the specified config in a CacheModel object.
            </summary>
            <param name="config">The config.</param>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <returns>A CacheModel object</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.ConfigurationSetting">
            <summary>
            The <see cref="T:MyBatis.DataMapper.Configuration.ConfigurationSetting"/> class allows the user to set by code some
            setting that will drive the iBATIS engine and his configuration.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.DynamicSqlEngine">
            <summary>
            Gets or sets the dynamic SQL engine.
            </summary>
            <value>The dynamic SQL engine.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.ValidateMapperConfigFile">
            <summary>
            Indicates whether we enable or not the validation of Mapper config files.
            </summary>
            <value>
            	<c>true</c> if must validate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.SessionStore">
            <summary>
            Gets or sets the session store.
            </summary>
            <value>The session store.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.ObjectFactory">
            <summary>
            Gets or sets the object factory.
            </summary>
            <value>The object factory.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.SetAccessorFactory">
            <summary>
            Gets or sets the set accessor factory.
            </summary>
            <value>The set accessor factory.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.GetAccessorFactory">
            <summary>
            Gets or sets the get accessor factory.
            </summary>
            <value>The get accessor factory.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.SessionFactory">
            <summary>
            Gets or sets the session factory.
            </summary>
            <value>The session factory.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.Properties">
            <summary>
            Use to add properties configuration by code.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.UseStatementNamespaces">
            <summary>
            Gets or sets a value indicating whether the DataMapper use statement namespaces.
            </summary>
            <value>
            	<c>true</c> if [use statement namespaces]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.IsCacheModelsEnabled">
            <summary>
            Gets or sets a value indicating whether cache model use is enabled.
            </summary>
            <value>
            	<c>true</c> if cache model use is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.UseReflectionOptimizer">
            <summary>
            Gets or sets a value indicating whether the DataMapper use reflection optimizer.
            </summary>
            <value>
            	<c>true</c> if the DataMapper use reflection optimizer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.ConfigurationSetting.PreserveWhitespace">
            <summary>
            Gets or sets a value indicating whether whitespace within &lt;statement&gt; nodes should be preserved.
            </summary>
            <remarks>
            Using the default value of false may cause single line SQL comments '--' to comment out more than expected. A 
            safer commenting syntax is to always use the multi-line comments supported by most vendors: '/* ... */'
            </remarks>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler">
            <summary>
            TypeHandler for Nullable Int64 Type
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value 
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.Int64TypeHandler">
            <summary>
            Description r閟um閑 de Int64TypeHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int64TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int64TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.Int64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.Int64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler">
            <summary>
            TypeHandler for AnsiString dbType
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Stores.SessionStoreFactory">
            <summary>
            Build a session container for a Windows or Web context.
            When running in the context of a web application the session object is 
            stored in HttpContext items and has 'per request' lifetime.
            When running in the context of a windows application the session object is 
            stored via CallContext.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Stores.SessionStoreFactory.GetSessionStore(System.String)">
            <summary>
            Gets the session store.
            </summary>
            <param name="Id">A unique id to identify the session DataMapper parent.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.LazyListFactory">
            <summary>
            Implementation of <see cref="T:MyBatis.DataMapper.Proxy.ILazyFactory"/> to create proxy for an <see cref="T:System.Collections.IList"/> element.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyListFactory.CreateProxy(MyBatis.DataMapper.IDataMapper,MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,MyBatis.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Create a new proxy instance.
            </summary>
            <param name="dataMapper">The data mapper.</param>
            <param name="mappedStatement">The mapped statement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
            <returns>Returns a new proxy.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.ResultMap">
            <summary>
            Main implementation of ResultMap interface
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.#ctor(System.String,System.String,System.String,System.String,System.String,System.Type,MyBatis.DataMapper.DataExchange.IDataExchange,MyBatis.Common.Utilities.Objects.IFactory,MyBatis.DataMapper.TypeHandlers.TypeHandlerFactory,MyBatis.DataMapper.Model.ResultMapping.ResultPropertyCollection,MyBatis.DataMapper.Model.ResultMapping.ArgumentPropertyCollection,MyBatis.DataMapper.Model.ResultMapping.Discriminator)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultMap"/> class.
            </summary>
            <param name="id">Identifier used to identify the resultMap amongst the others.</param>
            <param name="className">The output class name of the resultMap.</param>
            <param name="extendMap">The extend result map bame.</param>
            <param name="groupBy">The groupBy properties</param>
            <param name="keyColumns">The key columns.</param>
            <param name="type">The result type.</param>
            <param name="dataExchange">The data exchange.</param>
            <param name="objectFactory">The object factory.</param>
            <param name="typeHandlerFactory">The type handler factory.</param>
            <param name="properties">The properties.</param>
            <param name="parameters">The parameters.</param>
            <param name="discriminator">The discriminator.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.SetValueOfProperty(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            Resolve the submap
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.InitializeKeysProperties">
            <summary>
            Initializes the key Column properties.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.CheckGroupBy">
            <summary>
            Checks the group by.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.InitializeGroupByProperties">
            <summary>
            Initializes the groupBy properties.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.ResultMap.CheckKeysProperties">
            <summary>
            Checks the key Column.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.Discriminator">
            <summary>
            The discriminator used to choose the good Case
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <example>GetProduct</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.ExtendMap">
            <summary>
            Extend ResultMap attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.ClassName">
            <summary>
            Gets the name of the class.
            </summary>
            <value>The name of the class.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.KeyPropertyNames">
            <summary>
            The Key properties names (used for resolved circular reference).
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.ResultMap.KeysProperties">
            <summary>
            The Keys Properties.
            </summary>
            <value></value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Implementation.PerpetualCache">
            <summary>
            A read-only cache implementation where cache object are shared among all users and therefore offer greater performance benefit. 
            However, objects read from a read-only cache should not be modified. 	
            </summary>
            <remarks>
            eq to SHARED_READ_ONLY
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.PerpetualCache.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.PerpetualCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.PerpetualCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.PerpetualCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Implementation.PerpetualCache.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Implementation.PerpetualCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Cache.Implementation.LruCache">
            <summary>
            Cache following a LRU (least recently used) algorithm
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.LruCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Cache.Implementation.LruCache"/> class.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.LruCache.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.LruCache.Clear">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Cache.Implementation.LruCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the cache contains the key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Cache.Implementation.LruCache.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.SimpleTypeStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified and
            the type of the result object is primitive.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ResultStrategy.SimpleTypeStrategy.Process(MyBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a ResultClass is specified on the statement and
            the ResultClass is a SimpleType.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostBindind">
            <summary>
            All data to retrieve 'select' <see cref="P:MyBatis.DataMapper.MappedStatements.PostBindind.ResultProperty"/>
            </summary>
            <remarks>
            As ADO.NET allows one open <see cref="T:System.Data.IDataReader"/> per connection at once, we keep
            all the datas to open the next <see cref="T:System.Data.IDataReader"/> after having closed the current. 
            </remarks>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.PostBindind.Statement">
            <summary>
            Gets or sets the statement.
            </summary>
            <value>The statement.</value>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.PostBindind.ResultProperty">
            <summary>
            Gets or sets the result property.
            </summary>
            <value>The result property.</value>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.PostBindind.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.PostBindind.Keys">
            <summary>
            Gets or sets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:MyBatis.DataMapper.MappedStatements.PostBindind.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod">
            <summary>
            Enumeration of the ExecuteQuery method.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForObject">
            <summary>
            Execute Query For Object
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForIList">
            <summary>
            Execute Query For IList
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForGenericIList">
            <summary>
            Execute Query For Generic IList
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForArrayList">
            <summary>
            Execute Query For Array List
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForStrongTypedIList">
            <summary>
            Execute Query For Strong Typed IList
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectArrayStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Array"/> <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectArrayStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.ParameterPropertyDeSerializer">
            <summary>
            Summary description for ParameterPropertyDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.ParameterPropertyDeSerializer.Deserialize(MyBatis.DataMapper.DataExchange.DataExchangeFactory,System.Type,MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified config in a ResultMap object.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="config">The config.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer">
            <summary>
            Summary description for IsGreaterEqualDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsGreaterEqual"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransactionFactory">
            <summary>
            Create <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransaction"/> instance that will use ADO.NET <see cref="T:System.Data.IDbTransaction"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransactionFactory.Create(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Creates a new <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransaction"/> instance.
            </summary>
            <param name="session">The session.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Events.PreStatementEventArgs">
            <summary>
            Base class for pre <see cref="T:MyBatis.DataMapper.Model.Events.BaseStatementEventArgs"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Events.PrePropertyEventArgs">
            <summary>
            Lauchs before setting the property value in an instance of a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.PrePropertyEventArgs.DataBaseValue">
            <summary>
            Gets or sets the data base value.
            </summary>
            <value>The data base value.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Events.PrePropertyEventArgs.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.XmlConfigurationInterpreter">
            <summary>
            <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.XmlConfigurationInterpreter"/> is reponsible for translating the DataMapper configuration 
            in XML format to what the IConfigurationEngine expects
            </summary>
            <example>
             &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;sqlMapConfig xmlns="http://ibatis.apache.org/dataMapper" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
             
                &lt;properties uri="file://../../database.config"/&gt;
              
              	&lt;settings&gt;
              	   &lt;setting useStatementNamespaces="false"/&gt;
              	&lt;/settings&gt;
                
                ...
            
            &lt;/sqlMapConfig&gt;
            </example>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.XmlConfigurationInterpreter.#ctor(MyBatis.Common.Resources.IResource)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.XmlConfigurationInterpreter"/> class
            from an The <see cref="T:MyBatis.Common.Resources.IResource"/>.
            </summary>
            <param name="resource">The <see cref="T:MyBatis.Common.Resources.IResource"/>.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.XmlConfigurationInterpreter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.XmlConfigurationInterpreter"/> class
            from an XML file path.
            </summary>
            <param name="xmlFileName">The XML filename.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.XmlConfigurationInterpreter.ProcessResource(MyBatis.DataMapper.Configuration.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="configurationStore">The store.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants">
            <summary>
             Constants for nodes and attributes name in iBATIS configuration
             </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.DOT">
            <summary>
            Dot representation.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_DATAMAPPER_CONFIG_ROOT">
            <summary>
            Token for SqlMapConfig xml root element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_ALIAS">
            <summary>
            Token for attribute alias.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_ARGUMENTNAME">
            <summary>
            Token for attribute argumentName.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_CACHE_MODELS_ENABLED">
            <summary>
            Token for attribute cacheModelsEnabled.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_CACHEMODEL">
            <summary>
            Token for attribute cacheModel.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_CALLBACK">
            <summary>
            Token for attribute callback.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_CLASS">
            <summary>
            Token for attribute class.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_COLUMN">
            <summary>
            Token for attribute column.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_COLUMNINDEX">
            <summary>
            Token for attribute columnIndex.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_COMMAND_TIMEOUT">
            <summary>
            Token for attribute command.timeout.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_DBTYPE">
            <summary>
            Token for attribute dbType.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_DIRECTION">
            <summary>
            Token for attribute direction.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_EXTENDS">
            <summary>
            Token for attribute extends.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_FLUSHINTERVAL">
            <summary>
            Token for attribute flushInterval.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_GROUPBY">
            <summary>
            Token for attribute groupBy.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_HOURS">
            <summary>
            Token for attribute hours.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_ID">
            <summary>
            Token for attribute id.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_IMPLEMENTATION">
            <summary>
            Token for attribute implementation.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_KEY">
            <summary>
            Token for attribute key of property element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_KEYS_PROPERTIES">
            <summary>
            Token for attribute keyColumns.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_LAZYLOAD">
            <summary>
            Token for attribute lazyLoad.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_LISTCLASS">
            <summary>
            Token for attribute listClass.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_MILLISECONDS">
            <summary>
            Token for attribute milliseconds.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_MINUTES">
            <summary>
            Token for attribute minutes.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_NAME">
            <summary>
            Token for attribute name.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_NAMESPACE">
            <summary>
            Token for attribute namespace.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_NULLVALUE">
            <summary>
            Token for attribute nullValue.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_PARAMETERCLASS">
            <summary>
            Token for attribute parameterClass.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_PARAMETERMAP">
            <summary>
            Token for attribute parameterMap.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_PRECISION">
            <summary>
            Token for attribute precision.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_PREFIX">
            <summary>
            Token for attribute keyColumns.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_PREPEND">
            <summary>
            Token for attribute prepend.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_PRESERVEWHITSPACE">
            <summary>
            Token for attribute preserveWhitespace
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_PROPERTY">
            <summary>
            Token for attribute property.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_READONLY">
            <summary>
            Token for attribute readOnly.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_REFID">
            <summary>
            Token for attribute refid.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_REMAPRESULTS">
            <summary>
            Token for attribute remapResults.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_RESULTCLASS">
            <summary>
            Token for attribute resultClass.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_RESULTMAP">
            <summary>
            Token for attribute resultMap.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_RESULTMAPPING">
            <summary>
            Token for attribute resultMapping.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SCALE">
            <summary>
            Token for attribute scale.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SECONDS">
            <summary>
            Token for attribute seconds.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SELECT">
            <summary>
            Token for attribute select.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SERIALIZE">
            <summary>
            Token for attribute serialize.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SHARE">
            <summary>
            Token for attribute share.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SIZE">
            <summary>
            Token for attribute size.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SQLSOURCE">
            <summary>
            Token for attribute sqlSource
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_STATEMENT">
            <summary>
            Token for attribute statement.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_SUFFIX">
            <summary>
            Token for attribute keyColumns.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_TYPE">
            <summary>
            Token for attribute type.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_TYPEHANDLER">
            <summary>
            Token for attribute typeHandler.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_URI">
            <summary>
            Token for attribute uri.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_USE_REFLECTION_OPTIMIZER">
            <summary>
            Token for attribute useReflectionOptimizer.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_USE_STATEMENT_NAMESPACES">
            <summary>
            Token for attribute useStatementNamespaces.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_VALIDATE_SQLMAP">
            <summary>
            Token for attribute validateSqlMap.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ATTRIBUTE_VALUE">
            <summary>
            Token for attribute value of property element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ADD">
            <summary>
            Token for xml path to add element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ARGUMENT">
            <summary>
            Token for xml path to argument element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_BIND">
            <summary>
            Token for xml path to bind element.
            </summary>
            <remarks>
            Created By: Richard Beacroft
            Created Date: 11\10\2013
            </remarks>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_CACHEMODEL">
            <summary>
            Token for xml path to cacheModel element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_CASE">
            <summary>
            Token for xml path to subMap element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_CDATA">
            <summary>
            Token for CDATA element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_CONSTRUCTOR">
            <summary>
            Token for xml path to constructor element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_DATABASE">
            <summary>
            Token for xml path to database element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_DEFAULT">
            <summary>
            Token for default element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_DELETE">
            <summary>
            Token for xml path to delete element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_DISCRIMINATOR">
            <summary>
            Token for xml path to discriminator element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_DYNAMIC">
            <summary>
            Token for xml path to dynamic element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_FLUSHINTERVAL">
            <summary>
            Token for xml path to flushInterval element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_FLUSHONEXECUTE">
            <summary>
            Token for xml path to flushOnExecute element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_INCLUDE">
            <summary>
            Token for xml path to include element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_INSERT">
            <summary>
            Token for xml path to insert element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISEMPTY">
            <summary>
            Token for xml path to isEmpty element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISEQUAL">
            <summary>
            Token for xml path to isEqual element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISGREATEREQUAL">
            <summary>
            Token for xml path to isGreaterEqual element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISGREATERTHAN">
            <summary>
            Token for xml path to isGreaterThan element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISLESSEQUAL">
            <summary>
            Token for xml path to isLessEqual element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISLESSTHAN">
            <summary>
            Token for xml path to isLessThan element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISNOTEMPTY">
            <summary>
            Token for xml path to isNotEmpty element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISNOTEQUAL">
            <summary>
            Token for xml path to isNotEqual element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISNOTNULL">
            <summary>
            Token for xml path to isNotNull element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISNOTPARAMETERPRESENT">
            <summary>
            Token for xml path to isNotParameterPresent element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISNOTPROPERTYAVAILABLE">
            <summary>
            Token for xml path to isNotPropertyAvailable element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISNULL">
            <summary>
            Token for xml path to isNull element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISPARAMETERPRESENT">
            <summary>
            Token for xml path to isParameterPresent element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ISPROPERTYAVAILABLE">
            <summary>
            Token for xml path to isPropertyAvailable element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_ITERATE">
            <summary>
            Token for xml path to iterate element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_PARAMETER">
            <summary>
            Token for xml path to parameter element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_PARAMETERMAP">
            <summary>
            Token for xml path to parameterMap element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_PRESERVEWHITESPACE">
            <summary>
            Token to preserve whitespace in statements.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_PROCEDURE">
            <summary>
            Token for xml path to procedure element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_PROPERTIES">
            <summary>
            Token for xml path to properties element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_PROPERTY">
            <summary>
            Token for xml path to property element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_RESULT">
            <summary>
            Token for xml path to result element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_RESULTMAP">
            <summary>
            Token for xml path to resultMap element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_SELECT">
            <summary>
            Token for xml path to select element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_SELECTKEY">
            <summary>
            Token for xml path to selectKey element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_SETTING">
            <summary>
            Token for xml path to setting elements.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_SQL">
            <summary>
            Token for xml path to sql element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_SQLMAP">
            <summary>
            Token for xml path to sqlMap element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_STATEMENT">
            <summary>
            Token for xml path to statement element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_TEXT">
            <summary>
            Token for xml path to text element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_TYPEALIAS">
            <summary>
            Token for xml path to typeAlias element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_TYPEHANDLER">
            <summary>
            Token for xml path to typeHandler element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.ELEMENT_UPDATE">
            <summary>
            Token for xml path to update element.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Configuration.Interpreters.Config.ConfigConstants.EMPTY_PARAMETER_MAP">
            <summary>
            Token to identify the empty parameter map.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.SchemaValidator">
            <summary>
            Validates XmlNode againts a schema
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.SchemaValidator.Validate(System.Xml.XmlNode,System.String)">
            <summary>
            Validates an XmlNode against a schema file.
            </summary>
            <param name="section">The doc to validate.</param>
            <param name="schemaFileName">Schema file name.</param>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.SchemaValidator.ValidationResult">
            <summary>
            The schema validation result
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.SchemaValidator.ValidationResult.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.Interpreters.Config.Xml.SchemaValidator.ValidationResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.DefaultConfigurationStore">
            <summary>
            This implementation of <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/>
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.IConfigurationStore">
            <summary>
            The contract of the configuration storage
            It is used by the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationEngine"/> to build
            an <see cref="T:MyBatis.DataMapper.IMapperFactory"/>.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddPropertyConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a property key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddSettingConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Setting key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddProviderConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Provider key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddDatabaseConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Database key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddTypeHandlerConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a TypeHandler key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddAliasConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Alias key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetPropertyConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified setting key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetSettingConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified setting key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetProviderConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified <see cref="T:MyBatis.Common.Data.IDbProvider"/> key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetDatabaseConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified Database key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetTypeHandlerConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified TypeHandler key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetAliasConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified Alias key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddCacheConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Cache key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddResultMapConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a ResultMap key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddStatementConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Statement key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.AddParameterMapConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a ParameterMap key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetCacheConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified Cache key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetResultMapConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified ResultMap key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetStatementConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified Statement key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.IConfigurationStore.GetParameterMapConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with 
            the specified ParameterMap key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.Properties">
            <summary>
            Returns all configuration nodes for properties
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.Settings">
            <summary>
            Returns all configuration nodes for setting
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.Providers">
            <summary>
            Returns all configuration nodes for <see cref="T:MyBatis.Common.Data.IDbProvider"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.Databases">
            <summary>
            Returns all configuration nodes for Database
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.TypeHandlers">
            <summary>
            Returns all configuration nodes for TypeHandler
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.Alias">
            <summary>
            Returns all configuration nodes for Alias
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.CacheModels">
            <summary>
            Returns all configuration nodes for Cache
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.ResultMaps">
            <summary>
            Returns all configuration nodes for ResultMap
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.Statements">
            <summary>
            Returns all configuration nodes for Statement
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.IConfigurationStore.ParameterMaps">
            <summary>
            Returns all configuration nodes for ParameterMap
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddPropertyConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a property key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddSettingConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Setting key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddProviderConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Provider key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddDatabaseConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Database key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddTypeHandlerConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a TypeHandler key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddAliasConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Alias key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddCacheConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Cache key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddResultMapConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a ResultMap key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddStatementConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a Statement key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddParameterMapConfiguration(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Associates a configuration node with a ParameterMap key
            </summary>
            <param name="config">Configuration node</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetPropertyConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified setting key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetSettingConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified setting key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetProviderConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified <see cref="T:MyBatis.Common.Data.DbProvider"/> key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetDatabaseConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified Database key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetTypeHandlerConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified TypeHandler key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetAliasConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified Alias key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetCacheConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified Cache key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetResultMapConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified ResultMap key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetStatementConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified Statement key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.GetParameterMapConfiguration(System.String)">
            <summary>
            Returns the configuration node associated with
            the specified ParameterMap key. Should return null
            if no association exists.
            </summary>
            <param name="key">item key</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.AddToList(MyBatis.Common.Configuration.IConfiguration,System.Collections.Generic.IDictionary{System.String,MyBatis.Common.Configuration.IConfiguration},System.Collections.Generic.List{MyBatis.Common.Configuration.IConfiguration})">
            <summary>
            Adds to list, remove the <see cref="T:MyBatis.DataMapper.Configuration.IConfigurationStore"/> element 
            if it is already register under the same id in the dictionary.
            </summary>
            <param name="config">The config.</param>
            <param name="dictionary">The dictionary.</param>
            <param name="list">The list.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.Properties">
            <summary>
            Returns all configuration nodes for property
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.Settings">
            <summary>
            Returns all configuration nodes for setting
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.Providers">
            <summary>
            Returns all configuration nodes for <see cref="T:MyBatis.Common.Data.IDbProvider"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.Databases">
            <summary>
            Returns all configuration nodes for Database
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.TypeHandlers">
            <summary>
            Returns all configuration nodes for TypeHandler
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.Alias">
            <summary>
            Returns all configuration nodes for Alias
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.SqlMappings">
            <summary>
            Returns all configuration nodes for SqlMapping
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.CacheModels">
            <summary>
            Returns all configuration nodes for Cache
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.ResultMaps">
            <summary>
            Returns all configuration nodes for ResultMap
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.Statements">
            <summary>
            Returns all configuration nodes for Statement
            </summary>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Configuration.DefaultConfigurationStore.ParameterMaps">
            <summary>
            Returns all configuration nodes for ParameterMap
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.XmlTextNodeToIntArrayTypeHandlerCallback">
            <summary>
            Summary description for XmlNodeToIntArrayTypeHandlerCallback.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.XmlTextNodeToIntArrayTypeHandlerCallback.GetResult(MyBatis.DataMapper.TypeHandlers.IResultGetter)">
            <summary>
            SqlServer 2005 upwards supports XML data types. 
            You could have xml text node containing data you wish converted to an int array for simpler data mapping
            within your mapper file.
            </summary>
            <param name="getter"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.TypeHandlers.UInt32TypeHandler">
            <summary>
            UInt32TypeHandler
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt32TypeHandler.GetValueByName(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt32TypeHandler.GetValueByIndex(MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.TypeHandlers.UInt32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:MyBatis.DataMapper.TypeHandlers.UInt32TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MyBatis.DataMapper.Proxy.LazyList">
            <summary>
            A lazy list
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.Load(System.String)">
            <summary>
            Resolve the lazy loading.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.#ctor(MyBatis.DataMapper.IDataMapper,MyBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,MyBatis.Common.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:LazyList"/> class.
            </summary>
            <param name="dataMapper">The data mapper.</param>
            <param name="mappedSatement">The mapped satement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:MyBatis.DataMapper.Proxy.LazyList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:MyBatis.DataMapper.Proxy.LazyList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Statements.Procedure">
            <summary>
            Represent a store Procedure.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Statements.Procedure.#ctor(System.String,System.Type,MyBatis.DataMapper.Model.ParameterMapping.ParameterMap,System.Type,MyBatis.DataMapper.Model.ResultMapping.ResultMapCollection,System.Type,MyBatis.Common.Utilities.Objects.IFactory,MyBatis.DataMapper.Model.Cache.CacheModel,System.Boolean,System.String,MyBatis.DataMapper.ISqlSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Statements.Procedure"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="parameterClass">The parameter class.</param>
            <param name="parameterMap">The parameter map.</param>
            <param name="resultClass">The result class.</param>
            <param name="resultMaps">The result maps.</param>
            <param name="listClass">The list class.</param>
            <param name="listClassFactory">The list class factory.</param>
            <param name="cacheModel">The cache model.</param>
            <param name="remapResults">if set to <c>true</c> [remap results].</param>
            <param name="extends">The extends.</param>
            <param name="sqlSource">The SQL source.</param>
            <param name="preserveWhitespace">Preserve whitespace.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Procedure.CommandType">
            <summary>
            The type of the statement StoredProcedure.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.Statements.Procedure.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessEqualTagHandler">
            <summary>
            Summary description for IsLessEqualTagHandler.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessEqualTagHandler.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.IsLessEqualTagHandler.IsCondition(MyBatis.DataMapper.Model.Sql.Dynamic.Handlers.SqlTagContext,MyBatis.DataMapper.Model.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Model.ResultMapping.NullResultMap">
            <summary>
            Represents a Null ResultMap
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parms">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.SetValueOfProperty(System.Object@,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.Discriminator">
            <summary>
            The discriminator used to choose the good Case
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <example>GetProduct</example>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.ExtendMap">
            <summary>
            Extend ResultMap attribute
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.KeyPropertyNames">
            <summary>
            The Key Properties name (used for resolved circular reference).
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.KeysProperties">
            <summary>
            The Keys Properties.
            </summary>
            <value></value>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.PreCreate">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PreCreateEventArgs"/> generated before creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="E:MyBatis.DataMapper.Model.ResultMapping.NullResultMap.PostCreate">
            <summary>
            Handles event <see cref="T:MyBatis.DataMapper.Model.Events.PostCreateEventArgs"/> generated after creating an instance of the <see cref="T:MyBatis.DataMapper.Model.ResultMapping.IResultMap"/> object.
            </summary>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.SelectMappedStatement">
            <summary>
            Summary description for SelectMappedStatement.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.SelectMappedStatement.#ctor(MyBatis.DataMapper.Model.IModelStore,MyBatis.DataMapper.Model.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.MappedStatements.SelectMappedStatement"/> class.
            </summary>
            <param name="modelStore">The model store.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.SelectMappedStatement.ExecuteInsert(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.SelectMappedStatement.ExecuteUpdate(MyBatis.DataMapper.Session.ISession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ReaderAutoMapper">
            <summary>
            Build a dynamic instance of a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyCollection"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ReaderAutoMapper.Build(MyBatis.DataMapper.DataExchange.DataExchangeFactory,System.Data.IDataReader,System.Object@)">
            <summary>
            Builds a <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultPropertyCollection"/> for an <see cref="T:MyBatis.DataMapper.Model.ResultMapping.AutoResultMap"/>.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectListStrategy">
            <summary>
            <see cref="T:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Collections.IList"/> <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ArgumentProperty"/>
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectListStrategy.GetValue(MyBatis.DataMapper.Scope.RequestScope,MyBatis.DataMapper.Model.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:MyBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:MyBatis.DataMapper.Model.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:MyBatis.DataMapper.Data.PreparedCommandFactory">
            <summary>
            Summary description for PreparedCommandFactory.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Data.PreparedCommandFactory.GetPreparedCommand(System.Boolean)">
            <summary>
            Get an IPreparedCommand.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer">
            <summary>
            Summary description for IsPropertyAvailableDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsPropertyAvailable"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer">
            <summary>
            Summary description for IsParameterPresentDeSerializer.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer.#ctor(MyBatis.Common.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer.Deserialize(MyBatis.Common.Configuration.IConfiguration)">
            <summary>
            Deserializes the specified configuration in an <see cref="T:MyBatis.DataMapper.Model.Sql.Dynamic.Elements.IsParameterPresent"/> object
            </summary>
            <param name="configuration">The configuration.</param>
            <returns></returns>
        </member>
        <member name="T:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction">
            <summary>
            Implement the <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransaction"/> interface using an ADO.NET <see cref="T:System.Data.IDbTransaction"/>
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.isConsistent">
            <summary>
            Changes the vote to commit (true) or to abort (false) in transsaction
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.#ctor(MyBatis.DataMapper.Session.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Begin(System.Data.IsolationLevel)">
            <summary>
            Begin the transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">Isolation level of the transaction</param>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Commit">
            <summary>
            Flush the associated <c>ISession</c> and end the unit of work.
            </summary>
            <remarks>
            This method will commit the underlying transaction if and only if the transaction
            was initiated by this object.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Rollback">
            <summary>
            Force the underlying transaction to roll back.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Enlist(System.Data.IDbCommand)">
            <summary>
            Enlist the <see cref="T:System.Data.IDbCommand"/> in the current Transaction.
            </summary>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to enlist.</param>
            <remarks>
            It is okay for this to be a no op implementation.
            </remarks>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Complete">
            <summary>
            Indicates that all operations within the scope are completed successfully.
            </summary>
        </member>
        <member name="F:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.isAlreadyDisposed">
            <summary>
            A flag to indicate if <c>Dispose()</c> has been called.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Finalize">
            <summary>
            Finalizer that ensures the object is correctly disposed of.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Dispose">
            <summary>
            Takes care of freeing the managed and unmanaged resources that 
            this class is responsible for.
            </summary>
        </member>
        <member name="M:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.IsStarted">
            <summary>
            Gets a value indicating whether this instance is started.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:MyBatis.DataMapper.Session.Transaction.ITransaction"/> is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.WasRollback">
            <summary>
            Was the transaction rolled back or set to rollback only?
            </summary>
            <value></value>
        </member>
        <member name="P:MyBatis.DataMapper.Session.Transaction.Ado.AdoTransaction.WasCommit">
            <summary>
            Was the transaction successfully committed?
            </summary>
            <value></value>
            <remarks>
            This method could return <see langword="false"/> even after successful invocation of <c>Commit()</c>
            </remarks>
        </member>
    </members>
</doc>
